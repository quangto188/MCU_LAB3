
LAB_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d24  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08003e30  08003e30  00013e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f0c  08003f0c  000200ac  2**0
                  CONTENTS
  4 .ARM          00000000  08003f0c  08003f0c  000200ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f0c  08003f0c  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f0c  08003f0c  00013f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f10  08003f10  00013f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08003f14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  200000ac  08003fc0  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08003fc0  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b1e  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002810  00000000  00000000  00030bf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  00033408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc8  00000000  00000000  00034210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000193dd  00000000  00000000  00034ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010bf1  00000000  00000000  0004e2b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a736  00000000  00000000  0005eea6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e95dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fb8  00000000  00000000  000e9630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000ac 	.word	0x200000ac
 8000128:	00000000 	.word	0x00000000
 800012c:	08003e18 	.word	0x08003e18

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b0 	.word	0x200000b0
 8000148:	08003e18 	.word	0x08003e18

0800014c <subKeyProcess>:

int TimeOutForKeyPress =  100;
int status_LED1 = 0;
int button1_flag = 0;

void subKeyProcess(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	button1_flag = 1;
 8000150:	4b03      	ldr	r3, [pc, #12]	; (8000160 <subKeyProcess+0x14>)
 8000152:	2201      	movs	r2, #1
 8000154:	601a      	str	r2, [r3, #0]
}
 8000156:	bf00      	nop
 8000158:	46bd      	mov	sp, r7
 800015a:	bc80      	pop	{r7}
 800015c:	4770      	bx	lr
 800015e:	bf00      	nop
 8000160:	200000c8 	.word	0x200000c8

08000164 <getKeyInput>:
void getKeyInput(){
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
  KeyReg2 = KeyReg1;
 8000168:	4b1f      	ldr	r3, [pc, #124]	; (80001e8 <getKeyInput+0x84>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	4a1f      	ldr	r2, [pc, #124]	; (80001ec <getKeyInput+0x88>)
 800016e:	6013      	str	r3, [r2, #0]
  KeyReg1 = KeyReg0;
 8000170:	4b1f      	ldr	r3, [pc, #124]	; (80001f0 <getKeyInput+0x8c>)
 8000172:	681b      	ldr	r3, [r3, #0]
 8000174:	4a1c      	ldr	r2, [pc, #112]	; (80001e8 <getKeyInput+0x84>)
 8000176:	6013      	str	r3, [r2, #0]
  KeyReg0 = HAL_GPIO_ReadPin(GPIOA, MODE_Pin);
 8000178:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800017c:	481d      	ldr	r0, [pc, #116]	; (80001f4 <getKeyInput+0x90>)
 800017e:	f001 f8bd 	bl	80012fc <HAL_GPIO_ReadPin>
 8000182:	4603      	mov	r3, r0
 8000184:	461a      	mov	r2, r3
 8000186:	4b1a      	ldr	r3, [pc, #104]	; (80001f0 <getKeyInput+0x8c>)
 8000188:	601a      	str	r2, [r3, #0]
  if ((KeyReg1 == KeyReg0) && (KeyReg1 == KeyReg2)){
 800018a:	4b17      	ldr	r3, [pc, #92]	; (80001e8 <getKeyInput+0x84>)
 800018c:	681a      	ldr	r2, [r3, #0]
 800018e:	4b18      	ldr	r3, [pc, #96]	; (80001f0 <getKeyInput+0x8c>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	429a      	cmp	r2, r3
 8000194:	d125      	bne.n	80001e2 <getKeyInput+0x7e>
 8000196:	4b14      	ldr	r3, [pc, #80]	; (80001e8 <getKeyInput+0x84>)
 8000198:	681a      	ldr	r2, [r3, #0]
 800019a:	4b14      	ldr	r3, [pc, #80]	; (80001ec <getKeyInput+0x88>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	429a      	cmp	r2, r3
 80001a0:	d11f      	bne.n	80001e2 <getKeyInput+0x7e>
    if (KeyReg2 != KeyReg3){
 80001a2:	4b12      	ldr	r3, [pc, #72]	; (80001ec <getKeyInput+0x88>)
 80001a4:	681a      	ldr	r2, [r3, #0]
 80001a6:	4b14      	ldr	r3, [pc, #80]	; (80001f8 <getKeyInput+0x94>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	429a      	cmp	r2, r3
 80001ac:	d00d      	beq.n	80001ca <getKeyInput+0x66>
      KeyReg3 = KeyReg2;
 80001ae:	4b0f      	ldr	r3, [pc, #60]	; (80001ec <getKeyInput+0x88>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	4a11      	ldr	r2, [pc, #68]	; (80001f8 <getKeyInput+0x94>)
 80001b4:	6013      	str	r3, [r2, #0]

      if (KeyReg3 == PRESSED_STATE){
 80001b6:	4b10      	ldr	r3, [pc, #64]	; (80001f8 <getKeyInput+0x94>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d111      	bne.n	80001e2 <getKeyInput+0x7e>
        TimeOutForKeyPress = 100;
 80001be:	4b0f      	ldr	r3, [pc, #60]	; (80001fc <getKeyInput+0x98>)
 80001c0:	2264      	movs	r2, #100	; 0x64
 80001c2:	601a      	str	r2, [r3, #0]
        subKeyProcess();
 80001c4:	f7ff ffc2 	bl	800014c <subKeyProcess>
        if (TimeOutForKeyPress == 0){
          KeyReg3 = NORMAL_STATE;
        }
    }
  }
}
 80001c8:	e00b      	b.n	80001e2 <getKeyInput+0x7e>
       TimeOutForKeyPress --;
 80001ca:	4b0c      	ldr	r3, [pc, #48]	; (80001fc <getKeyInput+0x98>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	3b01      	subs	r3, #1
 80001d0:	4a0a      	ldr	r2, [pc, #40]	; (80001fc <getKeyInput+0x98>)
 80001d2:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress == 0){
 80001d4:	4b09      	ldr	r3, [pc, #36]	; (80001fc <getKeyInput+0x98>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d102      	bne.n	80001e2 <getKeyInput+0x7e>
          KeyReg3 = NORMAL_STATE;
 80001dc:	4b06      	ldr	r3, [pc, #24]	; (80001f8 <getKeyInput+0x94>)
 80001de:	2201      	movs	r2, #1
 80001e0:	601a      	str	r2, [r3, #0]
}
 80001e2:	bf00      	nop
 80001e4:	bd80      	pop	{r7, pc}
 80001e6:	bf00      	nop
 80001e8:	20000004 	.word	0x20000004
 80001ec:	20000008 	.word	0x20000008
 80001f0:	20000000 	.word	0x20000000
 80001f4:	40010800 	.word	0x40010800
 80001f8:	2000000c 	.word	0x2000000c
 80001fc:	20000010 	.word	0x20000010

08000200 <WhichButtonIsPressed>:
};

enum ButtonState buttonState = BUTTON_RELEASED;


int WhichButtonIsPressed() {
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	if (is_button_pressed(0)) return button_mode_is_pressed;
 8000204:	2000      	movs	r0, #0
 8000206:	f000 f90f 	bl	8000428 <is_button_pressed>
 800020a:	4603      	mov	r3, r0
 800020c:	2b00      	cmp	r3, #0
 800020e:	d001      	beq.n	8000214 <WhichButtonIsPressed+0x14>
 8000210:	230a      	movs	r3, #10
 8000212:	e018      	b.n	8000246 <WhichButtonIsPressed+0x46>
	if (is_button_pressed(1)) return button_add_is_pressed;
 8000214:	2001      	movs	r0, #1
 8000216:	f000 f907 	bl	8000428 <is_button_pressed>
 800021a:	4603      	mov	r3, r0
 800021c:	2b00      	cmp	r3, #0
 800021e:	d001      	beq.n	8000224 <WhichButtonIsPressed+0x24>
 8000220:	230b      	movs	r3, #11
 8000222:	e010      	b.n	8000246 <WhichButtonIsPressed+0x46>
	if (is_button_pressed(2)) return button_confirm_is_pressed;
 8000224:	2002      	movs	r0, #2
 8000226:	f000 f8ff 	bl	8000428 <is_button_pressed>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	d001      	beq.n	8000234 <WhichButtonIsPressed+0x34>
 8000230:	230c      	movs	r3, #12
 8000232:	e008      	b.n	8000246 <WhichButtonIsPressed+0x46>
	if (is_button_pressed(3)) return button_reset_is_pressed;
 8000234:	2003      	movs	r0, #3
 8000236:	f000 f8f7 	bl	8000428 <is_button_pressed>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d001      	beq.n	8000244 <WhichButtonIsPressed+0x44>
 8000240:	230d      	movs	r3, #13
 8000242:	e000      	b.n	8000246 <WhichButtonIsPressed+0x46>

	return 0; // none of these button is pressed
 8000244:	2300      	movs	r3, #0
}
 8000246:	4618      	mov	r0, r3
 8000248:	bd80      	pop	{r7, pc}
	...

0800024c <fsm_for_input_processing>:

void fsm_for_input_processing() {
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	switch(buttonState) {
 8000250:	4b33      	ldr	r3, [pc, #204]	; (8000320 <fsm_for_input_processing+0xd4>)
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	2b02      	cmp	r3, #2
 8000256:	d051      	beq.n	80002fc <fsm_for_input_processing+0xb0>
 8000258:	2b02      	cmp	r3, #2
 800025a:	dc59      	bgt.n	8000310 <fsm_for_input_processing+0xc4>
 800025c:	2b00      	cmp	r3, #0
 800025e:	d002      	beq.n	8000266 <fsm_for_input_processing+0x1a>
 8000260:	2b01      	cmp	r3, #1
 8000262:	d037      	beq.n	80002d4 <fsm_for_input_processing+0x88>
				buttonState = BUTTON_RELEASED;
			}
			// TODO
			break;
		default:
			break;
 8000264:	e054      	b.n	8000310 <fsm_for_input_processing+0xc4>
			if (WhichButtonIsPressed()) {
 8000266:	f7ff ffcb 	bl	8000200 <WhichButtonIsPressed>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d02d      	beq.n	80002cc <fsm_for_input_processing+0x80>
				buttonState = BUTTON_PRESSED;
 8000270:	4b2b      	ldr	r3, [pc, #172]	; (8000320 <fsm_for_input_processing+0xd4>)
 8000272:	2201      	movs	r2, #1
 8000274:	701a      	strb	r2, [r3, #0]
				switch(WhichButtonIsPressed()) {
 8000276:	f7ff ffc3 	bl	8000200 <WhichButtonIsPressed>
 800027a:	4603      	mov	r3, r0
 800027c:	3b0a      	subs	r3, #10
 800027e:	2b03      	cmp	r3, #3
 8000280:	d820      	bhi.n	80002c4 <fsm_for_input_processing+0x78>
 8000282:	a201      	add	r2, pc, #4	; (adr r2, 8000288 <fsm_for_input_processing+0x3c>)
 8000284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000288:	08000299 	.word	0x08000299
 800028c:	080002d1 	.word	0x080002d1
 8000290:	080002d1 	.word	0x080002d1
 8000294:	080002d1 	.word	0x080002d1
						if (status >= 3) status = -1;
 8000298:	4b22      	ldr	r3, [pc, #136]	; (8000324 <fsm_for_input_processing+0xd8>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	2b02      	cmp	r3, #2
 800029e:	dd03      	ble.n	80002a8 <fsm_for_input_processing+0x5c>
 80002a0:	4b20      	ldr	r3, [pc, #128]	; (8000324 <fsm_for_input_processing+0xd8>)
 80002a2:	f04f 32ff 	mov.w	r2, #4294967295
 80002a6:	601a      	str	r2, [r3, #0]
						display7SEG(++status);
 80002a8:	4b1e      	ldr	r3, [pc, #120]	; (8000324 <fsm_for_input_processing+0xd8>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	3301      	adds	r3, #1
 80002ae:	4a1d      	ldr	r2, [pc, #116]	; (8000324 <fsm_for_input_processing+0xd8>)
 80002b0:	6013      	str	r3, [r2, #0]
 80002b2:	4b1c      	ldr	r3, [pc, #112]	; (8000324 <fsm_for_input_processing+0xd8>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	4618      	mov	r0, r3
 80002b8:	f000 f8f2 	bl	80004a0 <display7SEG>
						buttonState = BUTTON_PRESSED;
 80002bc:	4b18      	ldr	r3, [pc, #96]	; (8000320 <fsm_for_input_processing+0xd4>)
 80002be:	2201      	movs	r2, #1
 80002c0:	701a      	strb	r2, [r3, #0]
						break;
 80002c2:	e006      	b.n	80002d2 <fsm_for_input_processing+0x86>
					default: buttonState = BUTTON_RELEASED;
 80002c4:	4b16      	ldr	r3, [pc, #88]	; (8000320 <fsm_for_input_processing+0xd4>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	701a      	strb	r2, [r3, #0]
			break;
 80002ca:	e026      	b.n	800031a <fsm_for_input_processing+0xce>
			}
 80002cc:	bf00      	nop
 80002ce:	e024      	b.n	800031a <fsm_for_input_processing+0xce>
						break;
 80002d0:	bf00      	nop
			break;
 80002d2:	e022      	b.n	800031a <fsm_for_input_processing+0xce>
			if (!is_button_pressed(0)) {
 80002d4:	2000      	movs	r0, #0
 80002d6:	f000 f8a7 	bl	8000428 <is_button_pressed>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d103      	bne.n	80002e8 <fsm_for_input_processing+0x9c>
				buttonState = BUTTON_RELEASED;
 80002e0:	4b0f      	ldr	r3, [pc, #60]	; (8000320 <fsm_for_input_processing+0xd4>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	701a      	strb	r2, [r3, #0]
			break;
 80002e6:	e015      	b.n	8000314 <fsm_for_input_processing+0xc8>
				if (is_button_pressed_1s(0)) {
 80002e8:	2000      	movs	r0, #0
 80002ea:	f000 f8bf 	bl	800046c <is_button_pressed_1s>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d00f      	beq.n	8000314 <fsm_for_input_processing+0xc8>
					buttonState = BUTTON_PRESS_MORE_THAN_1S;
 80002f4:	4b0a      	ldr	r3, [pc, #40]	; (8000320 <fsm_for_input_processing+0xd4>)
 80002f6:	2202      	movs	r2, #2
 80002f8:	701a      	strb	r2, [r3, #0]
			break;
 80002fa:	e00b      	b.n	8000314 <fsm_for_input_processing+0xc8>
			if (!is_button_pressed(0)) {
 80002fc:	2000      	movs	r0, #0
 80002fe:	f000 f893 	bl	8000428 <is_button_pressed>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d107      	bne.n	8000318 <fsm_for_input_processing+0xcc>
				buttonState = BUTTON_RELEASED;
 8000308:	4b05      	ldr	r3, [pc, #20]	; (8000320 <fsm_for_input_processing+0xd4>)
 800030a:	2200      	movs	r2, #0
 800030c:	701a      	strb	r2, [r3, #0]
			break;
 800030e:	e003      	b.n	8000318 <fsm_for_input_processing+0xcc>
			break;
 8000310:	bf00      	nop
 8000312:	e002      	b.n	800031a <fsm_for_input_processing+0xce>
			break;
 8000314:	bf00      	nop
 8000316:	e000      	b.n	800031a <fsm_for_input_processing+0xce>
			break;
 8000318:	bf00      	nop
	}
}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	200000cc 	.word	0x200000cc
 8000324:	20000014 	.word	0x20000014

08000328 <button_reading>:
// we define counter for automatically increasing the value
// after the button is pressed more than 1 second .
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];


void button_reading(void) {
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 800032e:	2300      	movs	r3, #0
 8000330:	607b      	str	r3, [r7, #4]
 8000332:	e061      	b.n	80003f8 <button_reading+0xd0>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000334:	4a34      	ldr	r2, [pc, #208]	; (8000408 <button_reading+0xe0>)
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	4413      	add	r3, r2
 800033a:	7819      	ldrb	r1, [r3, #0]
 800033c:	4a33      	ldr	r2, [pc, #204]	; (800040c <button_reading+0xe4>)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	4413      	add	r3, r2
 8000342:	460a      	mov	r2, r1
 8000344:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(buttonPort[i], buttonPin[i]);
 8000346:	4a32      	ldr	r2, [pc, #200]	; (8000410 <button_reading+0xe8>)
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800034e:	4931      	ldr	r1, [pc, #196]	; (8000414 <button_reading+0xec>)
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000356:	4619      	mov	r1, r3
 8000358:	4610      	mov	r0, r2
 800035a:	f000 ffcf 	bl	80012fc <HAL_GPIO_ReadPin>
 800035e:	4603      	mov	r3, r0
 8000360:	4619      	mov	r1, r3
 8000362:	4a29      	ldr	r2, [pc, #164]	; (8000408 <button_reading+0xe0>)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	4413      	add	r3, r2
 8000368:	460a      	mov	r2, r1
 800036a:	701a      	strb	r2, [r3, #0]

		if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) {
 800036c:	4a26      	ldr	r2, [pc, #152]	; (8000408 <button_reading+0xe0>)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4413      	add	r3, r2
 8000372:	781a      	ldrb	r2, [r3, #0]
 8000374:	4925      	ldr	r1, [pc, #148]	; (800040c <button_reading+0xe4>)
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	440b      	add	r3, r1
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	429a      	cmp	r2, r3
 800037e:	d138      	bne.n	80003f2 <button_reading+0xca>
			//valid input, can read now
			buttonBufferPrev[i] = buttonBuffer[i];
 8000380:	4a25      	ldr	r2, [pc, #148]	; (8000418 <button_reading+0xf0>)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	4413      	add	r3, r2
 8000386:	7819      	ldrb	r1, [r3, #0]
 8000388:	4a24      	ldr	r2, [pc, #144]	; (800041c <button_reading+0xf4>)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	4413      	add	r3, r2
 800038e:	460a      	mov	r2, r1
 8000390:	701a      	strb	r2, [r3, #0]
			buttonBuffer[i] = debounceButtonBuffer1[i];
 8000392:	4a1d      	ldr	r2, [pc, #116]	; (8000408 <button_reading+0xe0>)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4413      	add	r3, r2
 8000398:	7819      	ldrb	r1, [r3, #0]
 800039a:	4a1f      	ldr	r2, [pc, #124]	; (8000418 <button_reading+0xf0>)
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4413      	add	r3, r2
 80003a0:	460a      	mov	r2, r1
 80003a2:	701a      	strb	r2, [r3, #0]
			if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 80003a4:	4a1c      	ldr	r2, [pc, #112]	; (8000418 <button_reading+0xf0>)
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4413      	add	r3, r2
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d116      	bne.n	80003de <button_reading+0xb6>
				//toggle pin to validate
				//HAL_GPIO_TogglePin(BRESP_GPIO_Port, BRESP_Pin);
				//if a button is pressed , we start counting
				if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 80003b0:	4a1b      	ldr	r2, [pc, #108]	; (8000420 <button_reading+0xf8>)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003b8:	2b63      	cmp	r3, #99	; 0x63
 80003ba:	d80a      	bhi.n	80003d2 <button_reading+0xaa>
					counterForButtonPress1s[i]++;
 80003bc:	4a18      	ldr	r2, [pc, #96]	; (8000420 <button_reading+0xf8>)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003c4:	3301      	adds	r3, #1
 80003c6:	b299      	uxth	r1, r3
 80003c8:	4a15      	ldr	r2, [pc, #84]	; (8000420 <button_reading+0xf8>)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80003d0:	e00f      	b.n	80003f2 <button_reading+0xca>
				}

				else {
					//the flag is turned on when 1 second has passed
					//since the button is pressed.
					flagForButtonPress1s[i] = 1;
 80003d2:	4a14      	ldr	r2, [pc, #80]	; (8000424 <button_reading+0xfc>)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4413      	add	r3, r2
 80003d8:	2201      	movs	r2, #1
 80003da:	701a      	strb	r2, [r3, #0]
 80003dc:	e009      	b.n	80003f2 <button_reading+0xca>
				}
			}

			else {
				counterForButtonPress1s[i] = 0;
 80003de:	4a10      	ldr	r2, [pc, #64]	; (8000420 <button_reading+0xf8>)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	2100      	movs	r1, #0
 80003e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[i] = 0;
 80003e8:	4a0e      	ldr	r2, [pc, #56]	; (8000424 <button_reading+0xfc>)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	4413      	add	r3, r2
 80003ee:	2200      	movs	r2, #0
 80003f0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	3301      	adds	r3, #1
 80003f6:	607b      	str	r3, [r7, #4]
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	2b03      	cmp	r3, #3
 80003fc:	dd9a      	ble.n	8000334 <button_reading+0xc>
			}
		}
	}
}
 80003fe:	bf00      	nop
 8000400:	bf00      	nop
 8000402:	3708      	adds	r7, #8
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	200000d8 	.word	0x200000d8
 800040c:	200000dc 	.word	0x200000dc
 8000410:	20000018 	.word	0x20000018
 8000414:	20000028 	.word	0x20000028
 8000418:	200000d0 	.word	0x200000d0
 800041c:	200000d4 	.word	0x200000d4
 8000420:	200000e4 	.word	0x200000e4
 8000424:	200000e0 	.word	0x200000e0

08000428 <is_button_pressed>:
// Check if a button is pressed or not
unsigned char is_button_pressed(uint8_t index) {
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	71fb      	strb	r3, [r7, #7]
	if (index >= N0_OF_BUTTONS) return 0;
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	2b03      	cmp	r3, #3
 8000436:	d901      	bls.n	800043c <is_button_pressed+0x14>
 8000438:	2300      	movs	r3, #0
 800043a:	e00d      	b.n	8000458 <is_button_pressed+0x30>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED
 800043c:	79fb      	ldrb	r3, [r7, #7]
 800043e:	4a09      	ldr	r2, [pc, #36]	; (8000464 <is_button_pressed+0x3c>)
 8000440:	5cd3      	ldrb	r3, [r2, r3]
			&& buttonBufferPrev[index] == BUTTON_IS_RELEASED);
 8000442:	2b00      	cmp	r3, #0
 8000444:	d106      	bne.n	8000454 <is_button_pressed+0x2c>
 8000446:	79fb      	ldrb	r3, [r7, #7]
 8000448:	4a07      	ldr	r2, [pc, #28]	; (8000468 <is_button_pressed+0x40>)
 800044a:	5cd3      	ldrb	r3, [r2, r3]
 800044c:	2b01      	cmp	r3, #1
 800044e:	d101      	bne.n	8000454 <is_button_pressed+0x2c>
 8000450:	2301      	movs	r3, #1
 8000452:	e000      	b.n	8000456 <is_button_pressed+0x2e>
 8000454:	2300      	movs	r3, #0
 8000456:	b2db      	uxtb	r3, r3
}
 8000458:	4618      	mov	r0, r3
 800045a:	370c      	adds	r7, #12
 800045c:	46bd      	mov	sp, r7
 800045e:	bc80      	pop	{r7}
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	200000d0 	.word	0x200000d0
 8000468:	200000d4 	.word	0x200000d4

0800046c <is_button_pressed_1s>:

// Check for button is pressed more than a second or not
unsigned char is_button_pressed_1s (unsigned char index ) {
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
 8000472:	4603      	mov	r3, r0
 8000474:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS ) return 0xff ;
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	2b03      	cmp	r3, #3
 800047a:	d901      	bls.n	8000480 <is_button_pressed_1s+0x14>
 800047c:	23ff      	movs	r3, #255	; 0xff
 800047e:	e007      	b.n	8000490 <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1) ;
 8000480:	79fb      	ldrb	r3, [r7, #7]
 8000482:	4a06      	ldr	r2, [pc, #24]	; (800049c <is_button_pressed_1s+0x30>)
 8000484:	5cd3      	ldrb	r3, [r2, r3]
 8000486:	2b01      	cmp	r3, #1
 8000488:	bf0c      	ite	eq
 800048a:	2301      	moveq	r3, #1
 800048c:	2300      	movne	r3, #0
 800048e:	b2db      	uxtb	r3, r3
}
 8000490:	4618      	mov	r0, r3
 8000492:	370c      	adds	r7, #12
 8000494:	46bd      	mov	sp, r7
 8000496:	bc80      	pop	{r7}
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	200000e0 	.word	0x200000e0

080004a0 <display7SEG>:
			break;
		default:
			break;
	}
}
void display7SEG(int num) {
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
	GPIOB->BRR= 0xFF;
 80004a8:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <display7SEG+0x24>)
 80004aa:	22ff      	movs	r2, #255	; 0xff
 80004ac:	615a      	str	r2, [r3, #20]
	GPIOB->BSRR = led7seg[num];
 80004ae:	4a06      	ldr	r2, [pc, #24]	; (80004c8 <display7SEG+0x28>)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	4413      	add	r3, r2
 80004b4:	781a      	ldrb	r2, [r3, #0]
 80004b6:	4b03      	ldr	r3, [pc, #12]	; (80004c4 <display7SEG+0x24>)
 80004b8:	611a      	str	r2, [r3, #16]
}
 80004ba:	bf00      	nop
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	bc80      	pop	{r7}
 80004c2:	4770      	bx	lr
 80004c4:	40010c00 	.word	0x40010c00
 80004c8:	20000030 	.word	0x20000030

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fb78 	bl	8000bc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f81e 	bl	8000514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f8ce 	bl	8000678 <MX_GPIO_Init>
  MX_TIM2_Init();
 80004dc:	f000 f856 	bl	800058c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80004e0:	f000 f8a0 	bl	8000624 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_for_input_processing();
 80004e4:	f7ff feb2 	bl	800024c <fsm_for_input_processing>
	  	  display7SEG(status);
 80004e8:	4b08      	ldr	r3, [pc, #32]	; (800050c <main+0x40>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4618      	mov	r0, r3
 80004ee:	f7ff ffd7 	bl	80004a0 <display7SEG>

	  	  if (WhichButtonIsPressed()) {
 80004f2:	f7ff fe85 	bl	8000200 <WhichButtonIsPressed>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d0f3      	beq.n	80004e4 <main+0x18>
	  		  printf("Current mode is: %d\r\n", status);
 80004fc:	4b03      	ldr	r3, [pc, #12]	; (800050c <main+0x40>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4619      	mov	r1, r3
 8000502:	4803      	ldr	r0, [pc, #12]	; (8000510 <main+0x44>)
 8000504:	f002 fd28 	bl	8002f58 <iprintf>
	  fsm_for_input_processing();
 8000508:	e7ec      	b.n	80004e4 <main+0x18>
 800050a:	bf00      	nop
 800050c:	20000014 	.word	0x20000014
 8000510:	08003e30 	.word	0x08003e30

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b090      	sub	sp, #64	; 0x40
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	f107 0318 	add.w	r3, r7, #24
 800051e:	2228      	movs	r2, #40	; 0x28
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f002 fd10 	bl	8002f48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	605a      	str	r2, [r3, #4]
 8000530:	609a      	str	r2, [r3, #8]
 8000532:	60da      	str	r2, [r3, #12]
 8000534:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000536:	2302      	movs	r3, #2
 8000538:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800053a:	2301      	movs	r3, #1
 800053c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800053e:	2310      	movs	r3, #16
 8000540:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000542:	2300      	movs	r3, #0
 8000544:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000546:	f107 0318 	add.w	r3, r7, #24
 800054a:	4618      	mov	r0, r3
 800054c:	f000 ff06 	bl	800135c <HAL_RCC_OscConfig>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000556:	f000 f8f3 	bl	8000740 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800055a:	230f      	movs	r3, #15
 800055c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800055e:	2300      	movs	r3, #0
 8000560:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000562:	2300      	movs	r3, #0
 8000564:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000566:	2300      	movs	r3, #0
 8000568:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800056a:	2300      	movs	r3, #0
 800056c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800056e:	1d3b      	adds	r3, r7, #4
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f001 f972 	bl	800185c <HAL_RCC_ClockConfig>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800057e:	f000 f8df 	bl	8000740 <Error_Handler>
  }
}
 8000582:	bf00      	nop
 8000584:	3740      	adds	r7, #64	; 0x40
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
	...

0800058c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000592:	f107 0308 	add.w	r3, r7, #8
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005a0:	463b      	mov	r3, r7
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005a8:	4b1d      	ldr	r3, [pc, #116]	; (8000620 <MX_TIM2_Init+0x94>)
 80005aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80005b0:	4b1b      	ldr	r3, [pc, #108]	; (8000620 <MX_TIM2_Init+0x94>)
 80005b2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80005b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005b8:	4b19      	ldr	r3, [pc, #100]	; (8000620 <MX_TIM2_Init+0x94>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80005be:	4b18      	ldr	r3, [pc, #96]	; (8000620 <MX_TIM2_Init+0x94>)
 80005c0:	2209      	movs	r2, #9
 80005c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005c4:	4b16      	ldr	r3, [pc, #88]	; (8000620 <MX_TIM2_Init+0x94>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ca:	4b15      	ldr	r3, [pc, #84]	; (8000620 <MX_TIM2_Init+0x94>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005d0:	4813      	ldr	r0, [pc, #76]	; (8000620 <MX_TIM2_Init+0x94>)
 80005d2:	f001 fad1 	bl	8001b78 <HAL_TIM_Base_Init>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80005dc:	f000 f8b0 	bl	8000740 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005e6:	f107 0308 	add.w	r3, r7, #8
 80005ea:	4619      	mov	r1, r3
 80005ec:	480c      	ldr	r0, [pc, #48]	; (8000620 <MX_TIM2_Init+0x94>)
 80005ee:	f001 fc1a 	bl	8001e26 <HAL_TIM_ConfigClockSource>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80005f8:	f000 f8a2 	bl	8000740 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005fc:	2300      	movs	r3, #0
 80005fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000600:	2300      	movs	r3, #0
 8000602:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000604:	463b      	mov	r3, r7
 8000606:	4619      	mov	r1, r3
 8000608:	4805      	ldr	r0, [pc, #20]	; (8000620 <MX_TIM2_Init+0x94>)
 800060a:	f001 fde5 	bl	80021d8 <HAL_TIMEx_MasterConfigSynchronization>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000614:	f000 f894 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000618:	bf00      	nop
 800061a:	3718      	adds	r7, #24
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000128 	.word	0x20000128

08000624 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 800062a:	4a12      	ldr	r2, [pc, #72]	; (8000674 <MX_USART2_UART_Init+0x50>)
 800062c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 8000630:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000634:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 800063e:	2200      	movs	r2, #0
 8000640:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000648:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 800064a:	220c      	movs	r2, #12
 800064c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800064e:	4b08      	ldr	r3, [pc, #32]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 800065c:	f001 fe26 	bl	80022ac <HAL_UART_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000666:	f000 f86b 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000170 	.word	0x20000170
 8000674:	40004400 	.word	0x40004400

08000678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	f107 0308 	add.w	r3, r7, #8
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068c:	4b29      	ldr	r3, [pc, #164]	; (8000734 <MX_GPIO_Init+0xbc>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a28      	ldr	r2, [pc, #160]	; (8000734 <MX_GPIO_Init+0xbc>)
 8000692:	f043 0304 	orr.w	r3, r3, #4
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b26      	ldr	r3, [pc, #152]	; (8000734 <MX_GPIO_Init+0xbc>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f003 0304 	and.w	r3, r3, #4
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a4:	4b23      	ldr	r3, [pc, #140]	; (8000734 <MX_GPIO_Init+0xbc>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	4a22      	ldr	r2, [pc, #136]	; (8000734 <MX_GPIO_Init+0xbc>)
 80006aa:	f043 0308 	orr.w	r3, r3, #8
 80006ae:	6193      	str	r3, [r2, #24]
 80006b0:	4b20      	ldr	r3, [pc, #128]	; (8000734 <MX_GPIO_Init+0xbc>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	f003 0308 	and.w	r3, r3, #8
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 80006bc:	2200      	movs	r2, #0
 80006be:	f44f 61de 	mov.w	r1, #1776	; 0x6f0
 80006c2:	481d      	ldr	r0, [pc, #116]	; (8000738 <MX_GPIO_Init+0xc0>)
 80006c4:	f000 fe31 	bl	800132a <HAL_GPIO_WritePin>
                          |RX0_Pin|TX0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|DP3_Pin
 80006c8:	2200      	movs	r2, #0
 80006ca:	f643 71ff 	movw	r1, #16383	; 0x3fff
 80006ce:	481b      	ldr	r0, [pc, #108]	; (800073c <MX_GPIO_Init+0xc4>)
 80006d0:	f000 fe2b 	bl	800132a <HAL_GPIO_WritePin>
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|DP0_Pin
                          |DP1_Pin|DP2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           RX0_Pin TX0_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 80006d4:	f44f 63de 	mov.w	r3, #1776	; 0x6f0
 80006d8:	60bb      	str	r3, [r7, #8]
                          |RX0_Pin|TX0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006da:	2301      	movs	r3, #1
 80006dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e2:	2302      	movs	r3, #2
 80006e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e6:	f107 0308 	add.w	r3, r7, #8
 80006ea:	4619      	mov	r1, r3
 80006ec:	4812      	ldr	r0, [pc, #72]	; (8000738 <MX_GPIO_Init+0xc0>)
 80006ee:	f000 fc8b 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin DP3_Pin
                           DP4_Pin DP5_Pin DP6_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin DP0_Pin
                           DP1_Pin DP2_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|DP3_Pin
 80006f2:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80006f6:	60bb      	str	r3, [r7, #8]
                          |DP4_Pin|DP5_Pin|DP6_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|DP0_Pin
                          |DP1_Pin|DP2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f8:	2301      	movs	r3, #1
 80006fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000700:	2302      	movs	r3, #2
 8000702:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000704:	f107 0308 	add.w	r3, r7, #8
 8000708:	4619      	mov	r1, r3
 800070a:	480c      	ldr	r0, [pc, #48]	; (800073c <MX_GPIO_Init+0xc4>)
 800070c:	f000 fc7c 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_Pin ADD_Pin CONFIRM_Pin RESET_Pin */
  GPIO_InitStruct.Pin = MODE_Pin|ADD_Pin|CONFIRM_Pin|RESET_Pin;
 8000710:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000714:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800071a:	2301      	movs	r3, #1
 800071c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071e:	f107 0308 	add.w	r3, r7, #8
 8000722:	4619      	mov	r1, r3
 8000724:	4804      	ldr	r0, [pc, #16]	; (8000738 <MX_GPIO_Init+0xc0>)
 8000726:	f000 fc6f 	bl	8001008 <HAL_GPIO_Init>

}
 800072a:	bf00      	nop
 800072c:	3718      	adds	r7, #24
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40021000 	.word	0x40021000
 8000738:	40010800 	.word	0x40010800
 800073c:	40010c00 	.word	0x40010c00

08000740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000744:	b672      	cpsid	i
}
 8000746:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000748:	e7fe      	b.n	8000748 <Error_Handler+0x8>
	...

0800074c <_write>:
#include "output_display.h"

extern UART_HandleTypeDef huart2;

int _write(int file, char *ptr, int len)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	60b9      	str	r1, [r7, #8]
 8000756:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	b29a      	uxth	r2, r3
 800075c:	f04f 33ff 	mov.w	r3, #4294967295
 8000760:	68b9      	ldr	r1, [r7, #8]
 8000762:	4804      	ldr	r0, [pc, #16]	; (8000774 <_write+0x28>)
 8000764:	f001 fdf2 	bl	800234c <HAL_UART_Transmit>
	return len;
 8000768:	687b      	ldr	r3, [r7, #4]
}
 800076a:	4618      	mov	r0, r3
 800076c:	3710      	adds	r7, #16
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000170 	.word	0x20000170

08000778 <timerRun>:
		duration = DURATION_LED_BLINKING_2HZ;
	}
	timer5_counter = duration;
	timer5_flag = 0;
}
void timerRun() {
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 800077c:	4b31      	ldr	r3, [pc, #196]	; (8000844 <timerRun+0xcc>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	dd0b      	ble.n	800079c <timerRun+0x24>
		timer1_counter--;
 8000784:	4b2f      	ldr	r3, [pc, #188]	; (8000844 <timerRun+0xcc>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	3b01      	subs	r3, #1
 800078a:	4a2e      	ldr	r2, [pc, #184]	; (8000844 <timerRun+0xcc>)
 800078c:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0) {
 800078e:	4b2d      	ldr	r3, [pc, #180]	; (8000844 <timerRun+0xcc>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	2b00      	cmp	r3, #0
 8000794:	dc02      	bgt.n	800079c <timerRun+0x24>
			timer1_flag = 1;
 8000796:	4b2c      	ldr	r3, [pc, #176]	; (8000848 <timerRun+0xd0>)
 8000798:	2201      	movs	r2, #1
 800079a:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter > 0) {
 800079c:	4b2b      	ldr	r3, [pc, #172]	; (800084c <timerRun+0xd4>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dd0b      	ble.n	80007bc <timerRun+0x44>
		timer2_counter--;
 80007a4:	4b29      	ldr	r3, [pc, #164]	; (800084c <timerRun+0xd4>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	3b01      	subs	r3, #1
 80007aa:	4a28      	ldr	r2, [pc, #160]	; (800084c <timerRun+0xd4>)
 80007ac:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0) {
 80007ae:	4b27      	ldr	r3, [pc, #156]	; (800084c <timerRun+0xd4>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	dc02      	bgt.n	80007bc <timerRun+0x44>
			timer2_flag = 1;
 80007b6:	4b26      	ldr	r3, [pc, #152]	; (8000850 <timerRun+0xd8>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_counter > 0) {
 80007bc:	4b25      	ldr	r3, [pc, #148]	; (8000854 <timerRun+0xdc>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	dd0b      	ble.n	80007dc <timerRun+0x64>
		timer3_counter--;
 80007c4:	4b23      	ldr	r3, [pc, #140]	; (8000854 <timerRun+0xdc>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	3b01      	subs	r3, #1
 80007ca:	4a22      	ldr	r2, [pc, #136]	; (8000854 <timerRun+0xdc>)
 80007cc:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0) {
 80007ce:	4b21      	ldr	r3, [pc, #132]	; (8000854 <timerRun+0xdc>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	dc02      	bgt.n	80007dc <timerRun+0x64>
			timer3_flag = 1;
 80007d6:	4b20      	ldr	r3, [pc, #128]	; (8000858 <timerRun+0xe0>)
 80007d8:	2201      	movs	r2, #1
 80007da:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer4_counter > 0) {
 80007dc:	4b1f      	ldr	r3, [pc, #124]	; (800085c <timerRun+0xe4>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	dd0b      	ble.n	80007fc <timerRun+0x84>
		timer4_counter--;
 80007e4:	4b1d      	ldr	r3, [pc, #116]	; (800085c <timerRun+0xe4>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	3b01      	subs	r3, #1
 80007ea:	4a1c      	ldr	r2, [pc, #112]	; (800085c <timerRun+0xe4>)
 80007ec:	6013      	str	r3, [r2, #0]
		if (timer4_counter <= 0) {
 80007ee:	4b1b      	ldr	r3, [pc, #108]	; (800085c <timerRun+0xe4>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	dc02      	bgt.n	80007fc <timerRun+0x84>
			timer4_flag = 1;
 80007f6:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <timerRun+0xe8>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer5_counter > 0) {
 80007fc:	4b19      	ldr	r3, [pc, #100]	; (8000864 <timerRun+0xec>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	dd0b      	ble.n	800081c <timerRun+0xa4>
		timer5_counter--;
 8000804:	4b17      	ldr	r3, [pc, #92]	; (8000864 <timerRun+0xec>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	3b01      	subs	r3, #1
 800080a:	4a16      	ldr	r2, [pc, #88]	; (8000864 <timerRun+0xec>)
 800080c:	6013      	str	r3, [r2, #0]
		if (timer5_counter <= 0) {
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <timerRun+0xec>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	dc02      	bgt.n	800081c <timerRun+0xa4>
			timer5_flag = 1;
 8000816:	4b14      	ldr	r3, [pc, #80]	; (8000868 <timerRun+0xf0>)
 8000818:	2201      	movs	r2, #1
 800081a:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer0_mode_debounce_counter > 0) {
 800081c:	4b13      	ldr	r3, [pc, #76]	; (800086c <timerRun+0xf4>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	dd0b      	ble.n	800083c <timerRun+0xc4>
		timer0_mode_debounce_counter--;
 8000824:	4b11      	ldr	r3, [pc, #68]	; (800086c <timerRun+0xf4>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	3b01      	subs	r3, #1
 800082a:	4a10      	ldr	r2, [pc, #64]	; (800086c <timerRun+0xf4>)
 800082c:	6013      	str	r3, [r2, #0]
		if (timer0_mode_debounce_counter <= 0) {
 800082e:	4b0f      	ldr	r3, [pc, #60]	; (800086c <timerRun+0xf4>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2b00      	cmp	r3, #0
 8000834:	dc02      	bgt.n	800083c <timerRun+0xc4>
			timer0_mode_debounce_flag = 1;
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <timerRun+0xf8>)
 8000838:	2201      	movs	r2, #1
 800083a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr
 8000844:	20000100 	.word	0x20000100
 8000848:	200000ec 	.word	0x200000ec
 800084c:	20000104 	.word	0x20000104
 8000850:	200000f0 	.word	0x200000f0
 8000854:	20000108 	.word	0x20000108
 8000858:	200000f4 	.word	0x200000f4
 800085c:	2000010c 	.word	0x2000010c
 8000860:	200000f8 	.word	0x200000f8
 8000864:	20000110 	.word	0x20000110
 8000868:	200000fc 	.word	0x200000fc
 800086c:	20000118 	.word	0x20000118
 8000870:	20000114 	.word	0x20000114

08000874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800087a:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <HAL_MspInit+0x5c>)
 800087c:	699b      	ldr	r3, [r3, #24]
 800087e:	4a14      	ldr	r2, [pc, #80]	; (80008d0 <HAL_MspInit+0x5c>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6193      	str	r3, [r2, #24]
 8000886:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <HAL_MspInit+0x5c>)
 8000888:	699b      	ldr	r3, [r3, #24]
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000892:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <HAL_MspInit+0x5c>)
 8000894:	69db      	ldr	r3, [r3, #28]
 8000896:	4a0e      	ldr	r2, [pc, #56]	; (80008d0 <HAL_MspInit+0x5c>)
 8000898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800089c:	61d3      	str	r3, [r2, #28]
 800089e:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <HAL_MspInit+0x5c>)
 80008a0:	69db      	ldr	r3, [r3, #28]
 80008a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80008aa:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <HAL_MspInit+0x60>)
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	4a04      	ldr	r2, [pc, #16]	; (80008d4 <HAL_MspInit+0x60>)
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c6:	bf00      	nop
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr
 80008d0:	40021000 	.word	0x40021000
 80008d4:	40010000 	.word	0x40010000

080008d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008e8:	d113      	bne.n	8000912 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008ea:	4b0c      	ldr	r3, [pc, #48]	; (800091c <HAL_TIM_Base_MspInit+0x44>)
 80008ec:	69db      	ldr	r3, [r3, #28]
 80008ee:	4a0b      	ldr	r2, [pc, #44]	; (800091c <HAL_TIM_Base_MspInit+0x44>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	61d3      	str	r3, [r2, #28]
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <HAL_TIM_Base_MspInit+0x44>)
 80008f8:	69db      	ldr	r3, [r3, #28]
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	2100      	movs	r1, #0
 8000906:	201c      	movs	r0, #28
 8000908:	f000 fa95 	bl	8000e36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800090c:	201c      	movs	r0, #28
 800090e:	f000 faae 	bl	8000e6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000912:	bf00      	nop
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40021000 	.word	0x40021000

08000920 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b088      	sub	sp, #32
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f107 0310 	add.w	r3, r7, #16
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a1f      	ldr	r2, [pc, #124]	; (80009b8 <HAL_UART_MspInit+0x98>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d137      	bne.n	80009b0 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000940:	4b1e      	ldr	r3, [pc, #120]	; (80009bc <HAL_UART_MspInit+0x9c>)
 8000942:	69db      	ldr	r3, [r3, #28]
 8000944:	4a1d      	ldr	r2, [pc, #116]	; (80009bc <HAL_UART_MspInit+0x9c>)
 8000946:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800094a:	61d3      	str	r3, [r2, #28]
 800094c:	4b1b      	ldr	r3, [pc, #108]	; (80009bc <HAL_UART_MspInit+0x9c>)
 800094e:	69db      	ldr	r3, [r3, #28]
 8000950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000958:	4b18      	ldr	r3, [pc, #96]	; (80009bc <HAL_UART_MspInit+0x9c>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	4a17      	ldr	r2, [pc, #92]	; (80009bc <HAL_UART_MspInit+0x9c>)
 800095e:	f043 0304 	orr.w	r3, r3, #4
 8000962:	6193      	str	r3, [r2, #24]
 8000964:	4b15      	ldr	r3, [pc, #84]	; (80009bc <HAL_UART_MspInit+0x9c>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	f003 0304 	and.w	r3, r3, #4
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000970:	2304      	movs	r3, #4
 8000972:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000974:	2302      	movs	r3, #2
 8000976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000978:	2303      	movs	r3, #3
 800097a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097c:	f107 0310 	add.w	r3, r7, #16
 8000980:	4619      	mov	r1, r3
 8000982:	480f      	ldr	r0, [pc, #60]	; (80009c0 <HAL_UART_MspInit+0xa0>)
 8000984:	f000 fb40 	bl	8001008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000988:	2308      	movs	r3, #8
 800098a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000994:	f107 0310 	add.w	r3, r7, #16
 8000998:	4619      	mov	r1, r3
 800099a:	4809      	ldr	r0, [pc, #36]	; (80009c0 <HAL_UART_MspInit+0xa0>)
 800099c:	f000 fb34 	bl	8001008 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2100      	movs	r1, #0
 80009a4:	2026      	movs	r0, #38	; 0x26
 80009a6:	f000 fa46 	bl	8000e36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009aa:	2026      	movs	r0, #38	; 0x26
 80009ac:	f000 fa5f 	bl	8000e6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009b0:	bf00      	nop
 80009b2:	3720      	adds	r7, #32
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40004400 	.word	0x40004400
 80009bc:	40021000 	.word	0x40021000
 80009c0:	40010800 	.word	0x40010800

080009c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <NMI_Handler+0x4>

080009ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <HardFault_Handler+0x4>

080009d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <MemManage_Handler+0x4>

080009d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <BusFault_Handler+0x4>

080009dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <UsageFault_Handler+0x4>

080009e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr

080009ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr

080009fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr

08000a06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a0a:	f000 f921 	bl	8000c50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a18:	4802      	ldr	r0, [pc, #8]	; (8000a24 <TIM2_IRQHandler+0x10>)
 8000a1a:	f001 f8fc 	bl	8001c16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000128 	.word	0x20000128

08000a28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a2c:	4802      	ldr	r0, [pc, #8]	; (8000a38 <USART2_IRQHandler+0x10>)
 8000a2e:	f001 fd11 	bl	8002454 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000170 	.word	0x20000170

08000a3c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]
 8000a4c:	e00a      	b.n	8000a64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a4e:	f3af 8000 	nop.w
 8000a52:	4601      	mov	r1, r0
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	1c5a      	adds	r2, r3, #1
 8000a58:	60ba      	str	r2, [r7, #8]
 8000a5a:	b2ca      	uxtb	r2, r1
 8000a5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	3301      	adds	r3, #1
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	697a      	ldr	r2, [r7, #20]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	dbf0      	blt.n	8000a4e <_read+0x12>
	}

return len;
 8000a6c:	687b      	ldr	r3, [r7, #4]
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000a76:	b480      	push	{r7}
 8000a78:	b083      	sub	sp, #12
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
	return -1;
 8000a7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr

08000a8c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a9c:	605a      	str	r2, [r3, #4]
	return 0;
 8000a9e:	2300      	movs	r3, #0
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bc80      	pop	{r7}
 8000aa8:	4770      	bx	lr

08000aaa <_isatty>:

int _isatty(int file)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	b083      	sub	sp, #12
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
	return 1;
 8000ab2:	2301      	movs	r3, #1
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bc80      	pop	{r7}
 8000abc:	4770      	bx	lr

08000abe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	b085      	sub	sp, #20
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	60f8      	str	r0, [r7, #12]
 8000ac6:	60b9      	str	r1, [r7, #8]
 8000ac8:	607a      	str	r2, [r7, #4]
	return 0;
 8000aca:	2300      	movs	r3, #0
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3714      	adds	r7, #20
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc80      	pop	{r7}
 8000ad4:	4770      	bx	lr
	...

08000ad8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ae0:	4a14      	ldr	r2, [pc, #80]	; (8000b34 <_sbrk+0x5c>)
 8000ae2:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <_sbrk+0x60>)
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aec:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <_sbrk+0x64>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d102      	bne.n	8000afa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000af4:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <_sbrk+0x64>)
 8000af6:	4a12      	ldr	r2, [pc, #72]	; (8000b40 <_sbrk+0x68>)
 8000af8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <_sbrk+0x64>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4413      	add	r3, r2
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d207      	bcs.n	8000b18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b08:	f002 f9f4 	bl	8002ef4 <__errno>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	220c      	movs	r2, #12
 8000b10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b12:	f04f 33ff 	mov.w	r3, #4294967295
 8000b16:	e009      	b.n	8000b2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <_sbrk+0x64>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b1e:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <_sbrk+0x64>)
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4413      	add	r3, r2
 8000b26:	4a05      	ldr	r2, [pc, #20]	; (8000b3c <_sbrk+0x64>)
 8000b28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3718      	adds	r7, #24
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20002800 	.word	0x20002800
 8000b38:	00000400 	.word	0x00000400
 8000b3c:	2000011c 	.word	0x2000011c
 8000b40:	200001d0 	.word	0x200001d0

08000b44 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr

08000b50 <HAL_TIM_PeriodElapsedCallback>:
#include "main.h"
#include "input_processing.h"
#include "input_reading.h"
#include "software_timer.h"
#include "button.h"
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim ) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b60:	d105      	bne.n	8000b6e <HAL_TIM_PeriodElapsedCallback+0x1e>
		button_reading();
 8000b62:	f7ff fbe1 	bl	8000328 <button_reading>
		timerRun();
 8000b66:	f7ff fe07 	bl	8000778 <timerRun>
		getKeyInput();
 8000b6a:	f7ff fafb 	bl	8000164 <getKeyInput>
	}
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
	...

08000b78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b78:	f7ff ffe4 	bl	8000b44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b7c:	480b      	ldr	r0, [pc, #44]	; (8000bac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b7e:	490c      	ldr	r1, [pc, #48]	; (8000bb0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b80:	4a0c      	ldr	r2, [pc, #48]	; (8000bb4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b84:	e002      	b.n	8000b8c <LoopCopyDataInit>

08000b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8a:	3304      	adds	r3, #4

08000b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b90:	d3f9      	bcc.n	8000b86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b92:	4a09      	ldr	r2, [pc, #36]	; (8000bb8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b94:	4c09      	ldr	r4, [pc, #36]	; (8000bbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b98:	e001      	b.n	8000b9e <LoopFillZerobss>

08000b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b9c:	3204      	adds	r2, #4

08000b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba0:	d3fb      	bcc.n	8000b9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ba2:	f002 f9ad 	bl	8002f00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ba6:	f7ff fc91 	bl	80004cc <main>
  bx lr
 8000baa:	4770      	bx	lr
  ldr r0, =_sdata
 8000bac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb0:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8000bb4:	08003f14 	.word	0x08003f14
  ldr r2, =_sbss
 8000bb8:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8000bbc:	200001cc 	.word	0x200001cc

08000bc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bc0:	e7fe      	b.n	8000bc0 <ADC1_2_IRQHandler>
	...

08000bc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc8:	4b08      	ldr	r3, [pc, #32]	; (8000bec <HAL_Init+0x28>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a07      	ldr	r2, [pc, #28]	; (8000bec <HAL_Init+0x28>)
 8000bce:	f043 0310 	orr.w	r3, r3, #16
 8000bd2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd4:	2003      	movs	r0, #3
 8000bd6:	f000 f923 	bl	8000e20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bda:	200f      	movs	r0, #15
 8000bdc:	f000 f808 	bl	8000bf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000be0:	f7ff fe48 	bl	8000874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000be4:	2300      	movs	r3, #0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40022000 	.word	0x40022000

08000bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <HAL_InitTick+0x54>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <HAL_InitTick+0x58>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	4619      	mov	r1, r3
 8000c02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 f93b 	bl	8000e8a <HAL_SYSTICK_Config>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e00e      	b.n	8000c3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2b0f      	cmp	r3, #15
 8000c22:	d80a      	bhi.n	8000c3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c24:	2200      	movs	r2, #0
 8000c26:	6879      	ldr	r1, [r7, #4]
 8000c28:	f04f 30ff 	mov.w	r0, #4294967295
 8000c2c:	f000 f903 	bl	8000e36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c30:	4a06      	ldr	r2, [pc, #24]	; (8000c4c <HAL_InitTick+0x5c>)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c36:	2300      	movs	r3, #0
 8000c38:	e000      	b.n	8000c3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	2000003c 	.word	0x2000003c
 8000c48:	20000044 	.word	0x20000044
 8000c4c:	20000040 	.word	0x20000040

08000c50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c54:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <HAL_IncTick+0x1c>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <HAL_IncTick+0x20>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4413      	add	r3, r2
 8000c60:	4a03      	ldr	r2, [pc, #12]	; (8000c70 <HAL_IncTick+0x20>)
 8000c62:	6013      	str	r3, [r2, #0]
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr
 8000c6c:	20000044 	.word	0x20000044
 8000c70:	200001b8 	.word	0x200001b8

08000c74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  return uwTick;
 8000c78:	4b02      	ldr	r3, [pc, #8]	; (8000c84 <HAL_GetTick+0x10>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr
 8000c84:	200001b8 	.word	0x200001b8

08000c88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <__NVIC_SetPriorityGrouping+0x44>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9e:	68ba      	ldr	r2, [r7, #8]
 8000ca0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cba:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <__NVIC_SetPriorityGrouping+0x44>)
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	60d3      	str	r3, [r2, #12]
}
 8000cc0:	bf00      	nop
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bc80      	pop	{r7}
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd4:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	0a1b      	lsrs	r3, r3, #8
 8000cda:	f003 0307 	and.w	r3, r3, #7
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bc80      	pop	{r7}
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	db0b      	blt.n	8000d16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	f003 021f 	and.w	r2, r3, #31
 8000d04:	4906      	ldr	r1, [pc, #24]	; (8000d20 <__NVIC_EnableIRQ+0x34>)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	095b      	lsrs	r3, r3, #5
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr
 8000d20:	e000e100 	.word	0xe000e100

08000d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	6039      	str	r1, [r7, #0]
 8000d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	db0a      	blt.n	8000d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	490c      	ldr	r1, [pc, #48]	; (8000d70 <__NVIC_SetPriority+0x4c>)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	0112      	lsls	r2, r2, #4
 8000d44:	b2d2      	uxtb	r2, r2
 8000d46:	440b      	add	r3, r1
 8000d48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d4c:	e00a      	b.n	8000d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4908      	ldr	r1, [pc, #32]	; (8000d74 <__NVIC_SetPriority+0x50>)
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	f003 030f 	and.w	r3, r3, #15
 8000d5a:	3b04      	subs	r3, #4
 8000d5c:	0112      	lsls	r2, r2, #4
 8000d5e:	b2d2      	uxtb	r2, r2
 8000d60:	440b      	add	r3, r1
 8000d62:	761a      	strb	r2, [r3, #24]
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	e000e100 	.word	0xe000e100
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b089      	sub	sp, #36	; 0x24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	f1c3 0307 	rsb	r3, r3, #7
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	bf28      	it	cs
 8000d96:	2304      	movcs	r3, #4
 8000d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	3304      	adds	r3, #4
 8000d9e:	2b06      	cmp	r3, #6
 8000da0:	d902      	bls.n	8000da8 <NVIC_EncodePriority+0x30>
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3b03      	subs	r3, #3
 8000da6:	e000      	b.n	8000daa <NVIC_EncodePriority+0x32>
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	f04f 32ff 	mov.w	r2, #4294967295
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43da      	mvns	r2, r3
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	401a      	ands	r2, r3
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dca:	43d9      	mvns	r1, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	4313      	orrs	r3, r2
         );
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3724      	adds	r7, #36	; 0x24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr

08000ddc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dec:	d301      	bcc.n	8000df2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dee:	2301      	movs	r3, #1
 8000df0:	e00f      	b.n	8000e12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000df2:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <SysTick_Config+0x40>)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dfa:	210f      	movs	r1, #15
 8000dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000e00:	f7ff ff90 	bl	8000d24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <SysTick_Config+0x40>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e0a:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <SysTick_Config+0x40>)
 8000e0c:	2207      	movs	r2, #7
 8000e0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	e000e010 	.word	0xe000e010

08000e20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f7ff ff2d 	bl	8000c88 <__NVIC_SetPriorityGrouping>
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b086      	sub	sp, #24
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	60b9      	str	r1, [r7, #8]
 8000e40:	607a      	str	r2, [r7, #4]
 8000e42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e48:	f7ff ff42 	bl	8000cd0 <__NVIC_GetPriorityGrouping>
 8000e4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	68b9      	ldr	r1, [r7, #8]
 8000e52:	6978      	ldr	r0, [r7, #20]
 8000e54:	f7ff ff90 	bl	8000d78 <NVIC_EncodePriority>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e5e:	4611      	mov	r1, r2
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ff5f 	bl	8000d24 <__NVIC_SetPriority>
}
 8000e66:	bf00      	nop
 8000e68:	3718      	adds	r7, #24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b082      	sub	sp, #8
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	4603      	mov	r3, r0
 8000e76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff ff35 	bl	8000cec <__NVIC_EnableIRQ>
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f7ff ffa2 	bl	8000ddc <SysTick_Config>
 8000e98:	4603      	mov	r3, r0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	b085      	sub	sp, #20
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d008      	beq.n	8000ecc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2204      	movs	r2, #4
 8000ebe:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e020      	b.n	8000f0e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f022 020e 	bic.w	r2, r2, #14
 8000eda:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f022 0201 	bic.w	r2, r2, #1
 8000eea:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8000efa:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2201      	movs	r2, #1
 8000f00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3714      	adds	r7, #20
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr

08000f18 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f20:	2300      	movs	r3, #0
 8000f22:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d005      	beq.n	8000f3c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2204      	movs	r2, #4
 8000f34:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	73fb      	strb	r3, [r7, #15]
 8000f3a:	e051      	b.n	8000fe0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f022 020e 	bic.w	r2, r2, #14
 8000f4a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f022 0201 	bic.w	r2, r2, #1
 8000f5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a22      	ldr	r2, [pc, #136]	; (8000fec <HAL_DMA_Abort_IT+0xd4>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d029      	beq.n	8000fba <HAL_DMA_Abort_IT+0xa2>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a21      	ldr	r2, [pc, #132]	; (8000ff0 <HAL_DMA_Abort_IT+0xd8>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d022      	beq.n	8000fb6 <HAL_DMA_Abort_IT+0x9e>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a1f      	ldr	r2, [pc, #124]	; (8000ff4 <HAL_DMA_Abort_IT+0xdc>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d01a      	beq.n	8000fb0 <HAL_DMA_Abort_IT+0x98>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a1e      	ldr	r2, [pc, #120]	; (8000ff8 <HAL_DMA_Abort_IT+0xe0>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d012      	beq.n	8000faa <HAL_DMA_Abort_IT+0x92>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a1c      	ldr	r2, [pc, #112]	; (8000ffc <HAL_DMA_Abort_IT+0xe4>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d00a      	beq.n	8000fa4 <HAL_DMA_Abort_IT+0x8c>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a1b      	ldr	r2, [pc, #108]	; (8001000 <HAL_DMA_Abort_IT+0xe8>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d102      	bne.n	8000f9e <HAL_DMA_Abort_IT+0x86>
 8000f98:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f9c:	e00e      	b.n	8000fbc <HAL_DMA_Abort_IT+0xa4>
 8000f9e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fa2:	e00b      	b.n	8000fbc <HAL_DMA_Abort_IT+0xa4>
 8000fa4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fa8:	e008      	b.n	8000fbc <HAL_DMA_Abort_IT+0xa4>
 8000faa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fae:	e005      	b.n	8000fbc <HAL_DMA_Abort_IT+0xa4>
 8000fb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fb4:	e002      	b.n	8000fbc <HAL_DMA_Abort_IT+0xa4>
 8000fb6:	2310      	movs	r3, #16
 8000fb8:	e000      	b.n	8000fbc <HAL_DMA_Abort_IT+0xa4>
 8000fba:	2301      	movs	r3, #1
 8000fbc:	4a11      	ldr	r2, [pc, #68]	; (8001004 <HAL_DMA_Abort_IT+0xec>)
 8000fbe:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d003      	beq.n	8000fe0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	4798      	blx	r3
    } 
  }
  return status;
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40020008 	.word	0x40020008
 8000ff0:	4002001c 	.word	0x4002001c
 8000ff4:	40020030 	.word	0x40020030
 8000ff8:	40020044 	.word	0x40020044
 8000ffc:	40020058 	.word	0x40020058
 8001000:	4002006c 	.word	0x4002006c
 8001004:	40020000 	.word	0x40020000

08001008 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001008:	b480      	push	{r7}
 800100a:	b08b      	sub	sp, #44	; 0x2c
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001012:	2300      	movs	r3, #0
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001016:	2300      	movs	r3, #0
 8001018:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800101a:	e148      	b.n	80012ae <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800101c:	2201      	movs	r2, #1
 800101e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	69fa      	ldr	r2, [r7, #28]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	429a      	cmp	r2, r3
 8001036:	f040 8137 	bne.w	80012a8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	4aa3      	ldr	r2, [pc, #652]	; (80012cc <HAL_GPIO_Init+0x2c4>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d05e      	beq.n	8001102 <HAL_GPIO_Init+0xfa>
 8001044:	4aa1      	ldr	r2, [pc, #644]	; (80012cc <HAL_GPIO_Init+0x2c4>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d875      	bhi.n	8001136 <HAL_GPIO_Init+0x12e>
 800104a:	4aa1      	ldr	r2, [pc, #644]	; (80012d0 <HAL_GPIO_Init+0x2c8>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d058      	beq.n	8001102 <HAL_GPIO_Init+0xfa>
 8001050:	4a9f      	ldr	r2, [pc, #636]	; (80012d0 <HAL_GPIO_Init+0x2c8>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d86f      	bhi.n	8001136 <HAL_GPIO_Init+0x12e>
 8001056:	4a9f      	ldr	r2, [pc, #636]	; (80012d4 <HAL_GPIO_Init+0x2cc>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d052      	beq.n	8001102 <HAL_GPIO_Init+0xfa>
 800105c:	4a9d      	ldr	r2, [pc, #628]	; (80012d4 <HAL_GPIO_Init+0x2cc>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d869      	bhi.n	8001136 <HAL_GPIO_Init+0x12e>
 8001062:	4a9d      	ldr	r2, [pc, #628]	; (80012d8 <HAL_GPIO_Init+0x2d0>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d04c      	beq.n	8001102 <HAL_GPIO_Init+0xfa>
 8001068:	4a9b      	ldr	r2, [pc, #620]	; (80012d8 <HAL_GPIO_Init+0x2d0>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d863      	bhi.n	8001136 <HAL_GPIO_Init+0x12e>
 800106e:	4a9b      	ldr	r2, [pc, #620]	; (80012dc <HAL_GPIO_Init+0x2d4>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d046      	beq.n	8001102 <HAL_GPIO_Init+0xfa>
 8001074:	4a99      	ldr	r2, [pc, #612]	; (80012dc <HAL_GPIO_Init+0x2d4>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d85d      	bhi.n	8001136 <HAL_GPIO_Init+0x12e>
 800107a:	2b12      	cmp	r3, #18
 800107c:	d82a      	bhi.n	80010d4 <HAL_GPIO_Init+0xcc>
 800107e:	2b12      	cmp	r3, #18
 8001080:	d859      	bhi.n	8001136 <HAL_GPIO_Init+0x12e>
 8001082:	a201      	add	r2, pc, #4	; (adr r2, 8001088 <HAL_GPIO_Init+0x80>)
 8001084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001088:	08001103 	.word	0x08001103
 800108c:	080010dd 	.word	0x080010dd
 8001090:	080010ef 	.word	0x080010ef
 8001094:	08001131 	.word	0x08001131
 8001098:	08001137 	.word	0x08001137
 800109c:	08001137 	.word	0x08001137
 80010a0:	08001137 	.word	0x08001137
 80010a4:	08001137 	.word	0x08001137
 80010a8:	08001137 	.word	0x08001137
 80010ac:	08001137 	.word	0x08001137
 80010b0:	08001137 	.word	0x08001137
 80010b4:	08001137 	.word	0x08001137
 80010b8:	08001137 	.word	0x08001137
 80010bc:	08001137 	.word	0x08001137
 80010c0:	08001137 	.word	0x08001137
 80010c4:	08001137 	.word	0x08001137
 80010c8:	08001137 	.word	0x08001137
 80010cc:	080010e5 	.word	0x080010e5
 80010d0:	080010f9 	.word	0x080010f9
 80010d4:	4a82      	ldr	r2, [pc, #520]	; (80012e0 <HAL_GPIO_Init+0x2d8>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d013      	beq.n	8001102 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010da:	e02c      	b.n	8001136 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	623b      	str	r3, [r7, #32]
          break;
 80010e2:	e029      	b.n	8001138 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	3304      	adds	r3, #4
 80010ea:	623b      	str	r3, [r7, #32]
          break;
 80010ec:	e024      	b.n	8001138 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	3308      	adds	r3, #8
 80010f4:	623b      	str	r3, [r7, #32]
          break;
 80010f6:	e01f      	b.n	8001138 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	330c      	adds	r3, #12
 80010fe:	623b      	str	r3, [r7, #32]
          break;
 8001100:	e01a      	b.n	8001138 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d102      	bne.n	8001110 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800110a:	2304      	movs	r3, #4
 800110c:	623b      	str	r3, [r7, #32]
          break;
 800110e:	e013      	b.n	8001138 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d105      	bne.n	8001124 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001118:	2308      	movs	r3, #8
 800111a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	69fa      	ldr	r2, [r7, #28]
 8001120:	611a      	str	r2, [r3, #16]
          break;
 8001122:	e009      	b.n	8001138 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001124:	2308      	movs	r3, #8
 8001126:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	69fa      	ldr	r2, [r7, #28]
 800112c:	615a      	str	r2, [r3, #20]
          break;
 800112e:	e003      	b.n	8001138 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001130:	2300      	movs	r3, #0
 8001132:	623b      	str	r3, [r7, #32]
          break;
 8001134:	e000      	b.n	8001138 <HAL_GPIO_Init+0x130>
          break;
 8001136:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	2bff      	cmp	r3, #255	; 0xff
 800113c:	d801      	bhi.n	8001142 <HAL_GPIO_Init+0x13a>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	e001      	b.n	8001146 <HAL_GPIO_Init+0x13e>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	3304      	adds	r3, #4
 8001146:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	2bff      	cmp	r3, #255	; 0xff
 800114c:	d802      	bhi.n	8001154 <HAL_GPIO_Init+0x14c>
 800114e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	e002      	b.n	800115a <HAL_GPIO_Init+0x152>
 8001154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001156:	3b08      	subs	r3, #8
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	210f      	movs	r1, #15
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	fa01 f303 	lsl.w	r3, r1, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	401a      	ands	r2, r3
 800116c:	6a39      	ldr	r1, [r7, #32]
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	fa01 f303 	lsl.w	r3, r1, r3
 8001174:	431a      	orrs	r2, r3
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001182:	2b00      	cmp	r3, #0
 8001184:	f000 8090 	beq.w	80012a8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001188:	4b56      	ldr	r3, [pc, #344]	; (80012e4 <HAL_GPIO_Init+0x2dc>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	4a55      	ldr	r2, [pc, #340]	; (80012e4 <HAL_GPIO_Init+0x2dc>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	6193      	str	r3, [r2, #24]
 8001194:	4b53      	ldr	r3, [pc, #332]	; (80012e4 <HAL_GPIO_Init+0x2dc>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011a0:	4a51      	ldr	r2, [pc, #324]	; (80012e8 <HAL_GPIO_Init+0x2e0>)
 80011a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a4:	089b      	lsrs	r3, r3, #2
 80011a6:	3302      	adds	r3, #2
 80011a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	220f      	movs	r2, #15
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	4013      	ands	r3, r2
 80011c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a49      	ldr	r2, [pc, #292]	; (80012ec <HAL_GPIO_Init+0x2e4>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d00d      	beq.n	80011e8 <HAL_GPIO_Init+0x1e0>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a48      	ldr	r2, [pc, #288]	; (80012f0 <HAL_GPIO_Init+0x2e8>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d007      	beq.n	80011e4 <HAL_GPIO_Init+0x1dc>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a47      	ldr	r2, [pc, #284]	; (80012f4 <HAL_GPIO_Init+0x2ec>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d101      	bne.n	80011e0 <HAL_GPIO_Init+0x1d8>
 80011dc:	2302      	movs	r3, #2
 80011de:	e004      	b.n	80011ea <HAL_GPIO_Init+0x1e2>
 80011e0:	2303      	movs	r3, #3
 80011e2:	e002      	b.n	80011ea <HAL_GPIO_Init+0x1e2>
 80011e4:	2301      	movs	r3, #1
 80011e6:	e000      	b.n	80011ea <HAL_GPIO_Init+0x1e2>
 80011e8:	2300      	movs	r3, #0
 80011ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011ec:	f002 0203 	and.w	r2, r2, #3
 80011f0:	0092      	lsls	r2, r2, #2
 80011f2:	4093      	lsls	r3, r2
 80011f4:	68fa      	ldr	r2, [r7, #12]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011fa:	493b      	ldr	r1, [pc, #236]	; (80012e8 <HAL_GPIO_Init+0x2e0>)
 80011fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fe:	089b      	lsrs	r3, r3, #2
 8001200:	3302      	adds	r3, #2
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d006      	beq.n	8001222 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001214:	4b38      	ldr	r3, [pc, #224]	; (80012f8 <HAL_GPIO_Init+0x2f0>)
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	4937      	ldr	r1, [pc, #220]	; (80012f8 <HAL_GPIO_Init+0x2f0>)
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	4313      	orrs	r3, r2
 800121e:	608b      	str	r3, [r1, #8]
 8001220:	e006      	b.n	8001230 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001222:	4b35      	ldr	r3, [pc, #212]	; (80012f8 <HAL_GPIO_Init+0x2f0>)
 8001224:	689a      	ldr	r2, [r3, #8]
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	43db      	mvns	r3, r3
 800122a:	4933      	ldr	r1, [pc, #204]	; (80012f8 <HAL_GPIO_Init+0x2f0>)
 800122c:	4013      	ands	r3, r2
 800122e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d006      	beq.n	800124a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800123c:	4b2e      	ldr	r3, [pc, #184]	; (80012f8 <HAL_GPIO_Init+0x2f0>)
 800123e:	68da      	ldr	r2, [r3, #12]
 8001240:	492d      	ldr	r1, [pc, #180]	; (80012f8 <HAL_GPIO_Init+0x2f0>)
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	4313      	orrs	r3, r2
 8001246:	60cb      	str	r3, [r1, #12]
 8001248:	e006      	b.n	8001258 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800124a:	4b2b      	ldr	r3, [pc, #172]	; (80012f8 <HAL_GPIO_Init+0x2f0>)
 800124c:	68da      	ldr	r2, [r3, #12]
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	43db      	mvns	r3, r3
 8001252:	4929      	ldr	r1, [pc, #164]	; (80012f8 <HAL_GPIO_Init+0x2f0>)
 8001254:	4013      	ands	r3, r2
 8001256:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d006      	beq.n	8001272 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001264:	4b24      	ldr	r3, [pc, #144]	; (80012f8 <HAL_GPIO_Init+0x2f0>)
 8001266:	685a      	ldr	r2, [r3, #4]
 8001268:	4923      	ldr	r1, [pc, #140]	; (80012f8 <HAL_GPIO_Init+0x2f0>)
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	4313      	orrs	r3, r2
 800126e:	604b      	str	r3, [r1, #4]
 8001270:	e006      	b.n	8001280 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001272:	4b21      	ldr	r3, [pc, #132]	; (80012f8 <HAL_GPIO_Init+0x2f0>)
 8001274:	685a      	ldr	r2, [r3, #4]
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	43db      	mvns	r3, r3
 800127a:	491f      	ldr	r1, [pc, #124]	; (80012f8 <HAL_GPIO_Init+0x2f0>)
 800127c:	4013      	ands	r3, r2
 800127e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d006      	beq.n	800129a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800128c:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <HAL_GPIO_Init+0x2f0>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4919      	ldr	r1, [pc, #100]	; (80012f8 <HAL_GPIO_Init+0x2f0>)
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	4313      	orrs	r3, r2
 8001296:	600b      	str	r3, [r1, #0]
 8001298:	e006      	b.n	80012a8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800129a:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <HAL_GPIO_Init+0x2f0>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	43db      	mvns	r3, r3
 80012a2:	4915      	ldr	r1, [pc, #84]	; (80012f8 <HAL_GPIO_Init+0x2f0>)
 80012a4:	4013      	ands	r3, r2
 80012a6:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80012a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012aa:	3301      	adds	r3, #1
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b4:	fa22 f303 	lsr.w	r3, r2, r3
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f47f aeaf 	bne.w	800101c <HAL_GPIO_Init+0x14>
  }
}
 80012be:	bf00      	nop
 80012c0:	bf00      	nop
 80012c2:	372c      	adds	r7, #44	; 0x2c
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	10320000 	.word	0x10320000
 80012d0:	10310000 	.word	0x10310000
 80012d4:	10220000 	.word	0x10220000
 80012d8:	10210000 	.word	0x10210000
 80012dc:	10120000 	.word	0x10120000
 80012e0:	10110000 	.word	0x10110000
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40010000 	.word	0x40010000
 80012ec:	40010800 	.word	0x40010800
 80012f0:	40010c00 	.word	0x40010c00
 80012f4:	40011000 	.word	0x40011000
 80012f8:	40010400 	.word	0x40010400

080012fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	460b      	mov	r3, r1
 8001306:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689a      	ldr	r2, [r3, #8]
 800130c:	887b      	ldrh	r3, [r7, #2]
 800130e:	4013      	ands	r3, r2
 8001310:	2b00      	cmp	r3, #0
 8001312:	d002      	beq.n	800131a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001314:	2301      	movs	r3, #1
 8001316:	73fb      	strb	r3, [r7, #15]
 8001318:	e001      	b.n	800131e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800131a:	2300      	movs	r3, #0
 800131c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800131e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr

0800132a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
 8001332:	460b      	mov	r3, r1
 8001334:	807b      	strh	r3, [r7, #2]
 8001336:	4613      	mov	r3, r2
 8001338:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800133a:	787b      	ldrb	r3, [r7, #1]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001340:	887a      	ldrh	r2, [r7, #2]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001346:	e003      	b.n	8001350 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001348:	887b      	ldrh	r3, [r7, #2]
 800134a:	041a      	lsls	r2, r3, #16
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	611a      	str	r2, [r3, #16]
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	bc80      	pop	{r7}
 8001358:	4770      	bx	lr
	...

0800135c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d101      	bne.n	800136e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e26c      	b.n	8001848 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b00      	cmp	r3, #0
 8001378:	f000 8087 	beq.w	800148a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800137c:	4b92      	ldr	r3, [pc, #584]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f003 030c 	and.w	r3, r3, #12
 8001384:	2b04      	cmp	r3, #4
 8001386:	d00c      	beq.n	80013a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001388:	4b8f      	ldr	r3, [pc, #572]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f003 030c 	and.w	r3, r3, #12
 8001390:	2b08      	cmp	r3, #8
 8001392:	d112      	bne.n	80013ba <HAL_RCC_OscConfig+0x5e>
 8001394:	4b8c      	ldr	r3, [pc, #560]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800139c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a0:	d10b      	bne.n	80013ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a2:	4b89      	ldr	r3, [pc, #548]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d06c      	beq.n	8001488 <HAL_RCC_OscConfig+0x12c>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d168      	bne.n	8001488 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e246      	b.n	8001848 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c2:	d106      	bne.n	80013d2 <HAL_RCC_OscConfig+0x76>
 80013c4:	4b80      	ldr	r3, [pc, #512]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a7f      	ldr	r2, [pc, #508]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 80013ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ce:	6013      	str	r3, [r2, #0]
 80013d0:	e02e      	b.n	8001430 <HAL_RCC_OscConfig+0xd4>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d10c      	bne.n	80013f4 <HAL_RCC_OscConfig+0x98>
 80013da:	4b7b      	ldr	r3, [pc, #492]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a7a      	ldr	r2, [pc, #488]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 80013e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013e4:	6013      	str	r3, [r2, #0]
 80013e6:	4b78      	ldr	r3, [pc, #480]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a77      	ldr	r2, [pc, #476]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 80013ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	e01d      	b.n	8001430 <HAL_RCC_OscConfig+0xd4>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013fc:	d10c      	bne.n	8001418 <HAL_RCC_OscConfig+0xbc>
 80013fe:	4b72      	ldr	r3, [pc, #456]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a71      	ldr	r2, [pc, #452]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 8001404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	4b6f      	ldr	r3, [pc, #444]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a6e      	ldr	r2, [pc, #440]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 8001410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	e00b      	b.n	8001430 <HAL_RCC_OscConfig+0xd4>
 8001418:	4b6b      	ldr	r3, [pc, #428]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a6a      	ldr	r2, [pc, #424]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 800141e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	4b68      	ldr	r3, [pc, #416]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a67      	ldr	r2, [pc, #412]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 800142a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800142e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d013      	beq.n	8001460 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001438:	f7ff fc1c 	bl	8000c74 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001440:	f7ff fc18 	bl	8000c74 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b64      	cmp	r3, #100	; 0x64
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e1fa      	b.n	8001848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001452:	4b5d      	ldr	r3, [pc, #372]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0f0      	beq.n	8001440 <HAL_RCC_OscConfig+0xe4>
 800145e:	e014      	b.n	800148a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001460:	f7ff fc08 	bl	8000c74 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001468:	f7ff fc04 	bl	8000c74 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b64      	cmp	r3, #100	; 0x64
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e1e6      	b.n	8001848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800147a:	4b53      	ldr	r3, [pc, #332]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1f0      	bne.n	8001468 <HAL_RCC_OscConfig+0x10c>
 8001486:	e000      	b.n	800148a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d063      	beq.n	800155e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001496:	4b4c      	ldr	r3, [pc, #304]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f003 030c 	and.w	r3, r3, #12
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d00b      	beq.n	80014ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014a2:	4b49      	ldr	r3, [pc, #292]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f003 030c 	and.w	r3, r3, #12
 80014aa:	2b08      	cmp	r3, #8
 80014ac:	d11c      	bne.n	80014e8 <HAL_RCC_OscConfig+0x18c>
 80014ae:	4b46      	ldr	r3, [pc, #280]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d116      	bne.n	80014e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ba:	4b43      	ldr	r3, [pc, #268]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d005      	beq.n	80014d2 <HAL_RCC_OscConfig+0x176>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d001      	beq.n	80014d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e1ba      	b.n	8001848 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d2:	4b3d      	ldr	r3, [pc, #244]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	4939      	ldr	r1, [pc, #228]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014e6:	e03a      	b.n	800155e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	691b      	ldr	r3, [r3, #16]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d020      	beq.n	8001532 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014f0:	4b36      	ldr	r3, [pc, #216]	; (80015cc <HAL_RCC_OscConfig+0x270>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f6:	f7ff fbbd 	bl	8000c74 <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014fc:	e008      	b.n	8001510 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014fe:	f7ff fbb9 	bl	8000c74 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e19b      	b.n	8001848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001510:	4b2d      	ldr	r3, [pc, #180]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d0f0      	beq.n	80014fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800151c:	4b2a      	ldr	r3, [pc, #168]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	695b      	ldr	r3, [r3, #20]
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	4927      	ldr	r1, [pc, #156]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 800152c:	4313      	orrs	r3, r2
 800152e:	600b      	str	r3, [r1, #0]
 8001530:	e015      	b.n	800155e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001532:	4b26      	ldr	r3, [pc, #152]	; (80015cc <HAL_RCC_OscConfig+0x270>)
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001538:	f7ff fb9c 	bl	8000c74 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001540:	f7ff fb98 	bl	8000c74 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e17a      	b.n	8001848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001552:	4b1d      	ldr	r3, [pc, #116]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1f0      	bne.n	8001540 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0308 	and.w	r3, r3, #8
 8001566:	2b00      	cmp	r3, #0
 8001568:	d03a      	beq.n	80015e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d019      	beq.n	80015a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001572:	4b17      	ldr	r3, [pc, #92]	; (80015d0 <HAL_RCC_OscConfig+0x274>)
 8001574:	2201      	movs	r2, #1
 8001576:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001578:	f7ff fb7c 	bl	8000c74 <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001580:	f7ff fb78 	bl	8000c74 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e15a      	b.n	8001848 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001592:	4b0d      	ldr	r3, [pc, #52]	; (80015c8 <HAL_RCC_OscConfig+0x26c>)
 8001594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0f0      	beq.n	8001580 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800159e:	2001      	movs	r0, #1
 80015a0:	f000 facc 	bl	8001b3c <RCC_Delay>
 80015a4:	e01c      	b.n	80015e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015a6:	4b0a      	ldr	r3, [pc, #40]	; (80015d0 <HAL_RCC_OscConfig+0x274>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ac:	f7ff fb62 	bl	8000c74 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b2:	e00f      	b.n	80015d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015b4:	f7ff fb5e 	bl	8000c74 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d908      	bls.n	80015d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e140      	b.n	8001848 <HAL_RCC_OscConfig+0x4ec>
 80015c6:	bf00      	nop
 80015c8:	40021000 	.word	0x40021000
 80015cc:	42420000 	.word	0x42420000
 80015d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d4:	4b9e      	ldr	r3, [pc, #632]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 80015d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1e9      	bne.n	80015b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f000 80a6 	beq.w	800173a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ee:	2300      	movs	r3, #0
 80015f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015f2:	4b97      	ldr	r3, [pc, #604]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d10d      	bne.n	800161a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015fe:	4b94      	ldr	r3, [pc, #592]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	4a93      	ldr	r2, [pc, #588]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 8001604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001608:	61d3      	str	r3, [r2, #28]
 800160a:	4b91      	ldr	r3, [pc, #580]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001612:	60bb      	str	r3, [r7, #8]
 8001614:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001616:	2301      	movs	r3, #1
 8001618:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800161a:	4b8e      	ldr	r3, [pc, #568]	; (8001854 <HAL_RCC_OscConfig+0x4f8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001622:	2b00      	cmp	r3, #0
 8001624:	d118      	bne.n	8001658 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001626:	4b8b      	ldr	r3, [pc, #556]	; (8001854 <HAL_RCC_OscConfig+0x4f8>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a8a      	ldr	r2, [pc, #552]	; (8001854 <HAL_RCC_OscConfig+0x4f8>)
 800162c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001630:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001632:	f7ff fb1f 	bl	8000c74 <HAL_GetTick>
 8001636:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001638:	e008      	b.n	800164c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800163a:	f7ff fb1b 	bl	8000c74 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b64      	cmp	r3, #100	; 0x64
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e0fd      	b.n	8001848 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800164c:	4b81      	ldr	r3, [pc, #516]	; (8001854 <HAL_RCC_OscConfig+0x4f8>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001654:	2b00      	cmp	r3, #0
 8001656:	d0f0      	beq.n	800163a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d106      	bne.n	800166e <HAL_RCC_OscConfig+0x312>
 8001660:	4b7b      	ldr	r3, [pc, #492]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 8001662:	6a1b      	ldr	r3, [r3, #32]
 8001664:	4a7a      	ldr	r2, [pc, #488]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	6213      	str	r3, [r2, #32]
 800166c:	e02d      	b.n	80016ca <HAL_RCC_OscConfig+0x36e>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d10c      	bne.n	8001690 <HAL_RCC_OscConfig+0x334>
 8001676:	4b76      	ldr	r3, [pc, #472]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 8001678:	6a1b      	ldr	r3, [r3, #32]
 800167a:	4a75      	ldr	r2, [pc, #468]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 800167c:	f023 0301 	bic.w	r3, r3, #1
 8001680:	6213      	str	r3, [r2, #32]
 8001682:	4b73      	ldr	r3, [pc, #460]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 8001684:	6a1b      	ldr	r3, [r3, #32]
 8001686:	4a72      	ldr	r2, [pc, #456]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 8001688:	f023 0304 	bic.w	r3, r3, #4
 800168c:	6213      	str	r3, [r2, #32]
 800168e:	e01c      	b.n	80016ca <HAL_RCC_OscConfig+0x36e>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	2b05      	cmp	r3, #5
 8001696:	d10c      	bne.n	80016b2 <HAL_RCC_OscConfig+0x356>
 8001698:	4b6d      	ldr	r3, [pc, #436]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	4a6c      	ldr	r2, [pc, #432]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 800169e:	f043 0304 	orr.w	r3, r3, #4
 80016a2:	6213      	str	r3, [r2, #32]
 80016a4:	4b6a      	ldr	r3, [pc, #424]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	4a69      	ldr	r2, [pc, #420]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 80016aa:	f043 0301 	orr.w	r3, r3, #1
 80016ae:	6213      	str	r3, [r2, #32]
 80016b0:	e00b      	b.n	80016ca <HAL_RCC_OscConfig+0x36e>
 80016b2:	4b67      	ldr	r3, [pc, #412]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 80016b4:	6a1b      	ldr	r3, [r3, #32]
 80016b6:	4a66      	ldr	r2, [pc, #408]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 80016b8:	f023 0301 	bic.w	r3, r3, #1
 80016bc:	6213      	str	r3, [r2, #32]
 80016be:	4b64      	ldr	r3, [pc, #400]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 80016c0:	6a1b      	ldr	r3, [r3, #32]
 80016c2:	4a63      	ldr	r2, [pc, #396]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 80016c4:	f023 0304 	bic.w	r3, r3, #4
 80016c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d015      	beq.n	80016fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d2:	f7ff facf 	bl	8000c74 <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d8:	e00a      	b.n	80016f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016da:	f7ff facb 	bl	8000c74 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e0ab      	b.n	8001848 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f0:	4b57      	ldr	r3, [pc, #348]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0ee      	beq.n	80016da <HAL_RCC_OscConfig+0x37e>
 80016fc:	e014      	b.n	8001728 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fe:	f7ff fab9 	bl	8000c74 <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001704:	e00a      	b.n	800171c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001706:	f7ff fab5 	bl	8000c74 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	f241 3288 	movw	r2, #5000	; 0x1388
 8001714:	4293      	cmp	r3, r2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e095      	b.n	8001848 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800171c:	4b4c      	ldr	r3, [pc, #304]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 800171e:	6a1b      	ldr	r3, [r3, #32]
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1ee      	bne.n	8001706 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001728:	7dfb      	ldrb	r3, [r7, #23]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d105      	bne.n	800173a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800172e:	4b48      	ldr	r3, [pc, #288]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	4a47      	ldr	r2, [pc, #284]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 8001734:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001738:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	2b00      	cmp	r3, #0
 8001740:	f000 8081 	beq.w	8001846 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001744:	4b42      	ldr	r3, [pc, #264]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 030c 	and.w	r3, r3, #12
 800174c:	2b08      	cmp	r3, #8
 800174e:	d061      	beq.n	8001814 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	69db      	ldr	r3, [r3, #28]
 8001754:	2b02      	cmp	r3, #2
 8001756:	d146      	bne.n	80017e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001758:	4b3f      	ldr	r3, [pc, #252]	; (8001858 <HAL_RCC_OscConfig+0x4fc>)
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175e:	f7ff fa89 	bl	8000c74 <HAL_GetTick>
 8001762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001764:	e008      	b.n	8001778 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001766:	f7ff fa85 	bl	8000c74 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e067      	b.n	8001848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001778:	4b35      	ldr	r3, [pc, #212]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1f0      	bne.n	8001766 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a1b      	ldr	r3, [r3, #32]
 8001788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800178c:	d108      	bne.n	80017a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800178e:	4b30      	ldr	r3, [pc, #192]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	492d      	ldr	r1, [pc, #180]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 800179c:	4313      	orrs	r3, r2
 800179e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017a0:	4b2b      	ldr	r3, [pc, #172]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a19      	ldr	r1, [r3, #32]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b0:	430b      	orrs	r3, r1
 80017b2:	4927      	ldr	r1, [pc, #156]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 80017b4:	4313      	orrs	r3, r2
 80017b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017b8:	4b27      	ldr	r3, [pc, #156]	; (8001858 <HAL_RCC_OscConfig+0x4fc>)
 80017ba:	2201      	movs	r2, #1
 80017bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017be:	f7ff fa59 	bl	8000c74 <HAL_GetTick>
 80017c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017c4:	e008      	b.n	80017d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c6:	f7ff fa55 	bl	8000c74 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e037      	b.n	8001848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017d8:	4b1d      	ldr	r3, [pc, #116]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0f0      	beq.n	80017c6 <HAL_RCC_OscConfig+0x46a>
 80017e4:	e02f      	b.n	8001846 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e6:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <HAL_RCC_OscConfig+0x4fc>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ec:	f7ff fa42 	bl	8000c74 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f4:	f7ff fa3e 	bl	8000c74 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e020      	b.n	8001848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001806:	4b12      	ldr	r3, [pc, #72]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0x498>
 8001812:	e018      	b.n	8001846 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	69db      	ldr	r3, [r3, #28]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d101      	bne.n	8001820 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e013      	b.n	8001848 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001820:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <HAL_RCC_OscConfig+0x4f4>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	429a      	cmp	r2, r3
 8001832:	d106      	bne.n	8001842 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800183e:	429a      	cmp	r2, r3
 8001840:	d001      	beq.n	8001846 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e000      	b.n	8001848 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40021000 	.word	0x40021000
 8001854:	40007000 	.word	0x40007000
 8001858:	42420060 	.word	0x42420060

0800185c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d101      	bne.n	8001870 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e0d0      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001870:	4b6a      	ldr	r3, [pc, #424]	; (8001a1c <HAL_RCC_ClockConfig+0x1c0>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0307 	and.w	r3, r3, #7
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	429a      	cmp	r2, r3
 800187c:	d910      	bls.n	80018a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187e:	4b67      	ldr	r3, [pc, #412]	; (8001a1c <HAL_RCC_ClockConfig+0x1c0>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f023 0207 	bic.w	r2, r3, #7
 8001886:	4965      	ldr	r1, [pc, #404]	; (8001a1c <HAL_RCC_ClockConfig+0x1c0>)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	4313      	orrs	r3, r2
 800188c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800188e:	4b63      	ldr	r3, [pc, #396]	; (8001a1c <HAL_RCC_ClockConfig+0x1c0>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	429a      	cmp	r2, r3
 800189a:	d001      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e0b8      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d020      	beq.n	80018ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d005      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018b8:	4b59      	ldr	r3, [pc, #356]	; (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	4a58      	ldr	r2, [pc, #352]	; (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 80018be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0308 	and.w	r3, r3, #8
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d005      	beq.n	80018dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018d0:	4b53      	ldr	r3, [pc, #332]	; (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	4a52      	ldr	r2, [pc, #328]	; (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 80018d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018dc:	4b50      	ldr	r3, [pc, #320]	; (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	494d      	ldr	r1, [pc, #308]	; (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d040      	beq.n	800197c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d107      	bne.n	8001912 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001902:	4b47      	ldr	r3, [pc, #284]	; (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d115      	bne.n	800193a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e07f      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b02      	cmp	r3, #2
 8001918:	d107      	bne.n	800192a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800191a:	4b41      	ldr	r3, [pc, #260]	; (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d109      	bne.n	800193a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e073      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800192a:	4b3d      	ldr	r3, [pc, #244]	; (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e06b      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800193a:	4b39      	ldr	r3, [pc, #228]	; (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f023 0203 	bic.w	r2, r3, #3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	4936      	ldr	r1, [pc, #216]	; (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 8001948:	4313      	orrs	r3, r2
 800194a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800194c:	f7ff f992 	bl	8000c74 <HAL_GetTick>
 8001950:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001952:	e00a      	b.n	800196a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001954:	f7ff f98e 	bl	8000c74 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001962:	4293      	cmp	r3, r2
 8001964:	d901      	bls.n	800196a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e053      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800196a:	4b2d      	ldr	r3, [pc, #180]	; (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f003 020c 	and.w	r2, r3, #12
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	429a      	cmp	r2, r3
 800197a:	d1eb      	bne.n	8001954 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800197c:	4b27      	ldr	r3, [pc, #156]	; (8001a1c <HAL_RCC_ClockConfig+0x1c0>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	429a      	cmp	r2, r3
 8001988:	d210      	bcs.n	80019ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198a:	4b24      	ldr	r3, [pc, #144]	; (8001a1c <HAL_RCC_ClockConfig+0x1c0>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f023 0207 	bic.w	r2, r3, #7
 8001992:	4922      	ldr	r1, [pc, #136]	; (8001a1c <HAL_RCC_ClockConfig+0x1c0>)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	4313      	orrs	r3, r2
 8001998:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800199a:	4b20      	ldr	r3, [pc, #128]	; (8001a1c <HAL_RCC_ClockConfig+0x1c0>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d001      	beq.n	80019ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e032      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0304 	and.w	r3, r3, #4
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d008      	beq.n	80019ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019b8:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	4916      	ldr	r1, [pc, #88]	; (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0308 	and.w	r3, r3, #8
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d009      	beq.n	80019ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019d6:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	490e      	ldr	r1, [pc, #56]	; (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019ea:	f000 f821 	bl	8001a30 <HAL_RCC_GetSysClockFreq>
 80019ee:	4602      	mov	r2, r0
 80019f0:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	091b      	lsrs	r3, r3, #4
 80019f6:	f003 030f 	and.w	r3, r3, #15
 80019fa:	490a      	ldr	r1, [pc, #40]	; (8001a24 <HAL_RCC_ClockConfig+0x1c8>)
 80019fc:	5ccb      	ldrb	r3, [r1, r3]
 80019fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001a02:	4a09      	ldr	r2, [pc, #36]	; (8001a28 <HAL_RCC_ClockConfig+0x1cc>)
 8001a04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a06:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <HAL_RCC_ClockConfig+0x1d0>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff f8f0 	bl	8000bf0 <HAL_InitTick>

  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40022000 	.word	0x40022000
 8001a20:	40021000 	.word	0x40021000
 8001a24:	08003e48 	.word	0x08003e48
 8001a28:	2000003c 	.word	0x2000003c
 8001a2c:	20000040 	.word	0x20000040

08001a30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b087      	sub	sp, #28
 8001a34:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
 8001a42:	2300      	movs	r3, #0
 8001a44:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a4a:	4b1e      	ldr	r3, [pc, #120]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f003 030c 	and.w	r3, r3, #12
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	d002      	beq.n	8001a60 <HAL_RCC_GetSysClockFreq+0x30>
 8001a5a:	2b08      	cmp	r3, #8
 8001a5c:	d003      	beq.n	8001a66 <HAL_RCC_GetSysClockFreq+0x36>
 8001a5e:	e027      	b.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a60:	4b19      	ldr	r3, [pc, #100]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a62:	613b      	str	r3, [r7, #16]
      break;
 8001a64:	e027      	b.n	8001ab6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	0c9b      	lsrs	r3, r3, #18
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	4a17      	ldr	r2, [pc, #92]	; (8001acc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a70:	5cd3      	ldrb	r3, [r2, r3]
 8001a72:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d010      	beq.n	8001aa0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a7e:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	0c5b      	lsrs	r3, r3, #17
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	4a11      	ldr	r2, [pc, #68]	; (8001ad0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a8a:	5cd3      	ldrb	r3, [r2, r3]
 8001a8c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a0d      	ldr	r2, [pc, #52]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a92:	fb02 f203 	mul.w	r2, r2, r3
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9c:	617b      	str	r3, [r7, #20]
 8001a9e:	e004      	b.n	8001aaa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4a0c      	ldr	r2, [pc, #48]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001aa4:	fb02 f303 	mul.w	r3, r2, r3
 8001aa8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	613b      	str	r3, [r7, #16]
      break;
 8001aae:	e002      	b.n	8001ab6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ab0:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ab2:	613b      	str	r3, [r7, #16]
      break;
 8001ab4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ab6:	693b      	ldr	r3, [r7, #16]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	371c      	adds	r7, #28
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	007a1200 	.word	0x007a1200
 8001acc:	08003e60 	.word	0x08003e60
 8001ad0:	08003e70 	.word	0x08003e70
 8001ad4:	003d0900 	.word	0x003d0900

08001ad8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001adc:	4b02      	ldr	r3, [pc, #8]	; (8001ae8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ade:	681b      	ldr	r3, [r3, #0]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr
 8001ae8:	2000003c 	.word	0x2000003c

08001aec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001af0:	f7ff fff2 	bl	8001ad8 <HAL_RCC_GetHCLKFreq>
 8001af4:	4602      	mov	r2, r0
 8001af6:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	0a1b      	lsrs	r3, r3, #8
 8001afc:	f003 0307 	and.w	r3, r3, #7
 8001b00:	4903      	ldr	r1, [pc, #12]	; (8001b10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b02:	5ccb      	ldrb	r3, [r1, r3]
 8001b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	08003e58 	.word	0x08003e58

08001b14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b18:	f7ff ffde 	bl	8001ad8 <HAL_RCC_GetHCLKFreq>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	0adb      	lsrs	r3, r3, #11
 8001b24:	f003 0307 	and.w	r3, r3, #7
 8001b28:	4903      	ldr	r1, [pc, #12]	; (8001b38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b2a:	5ccb      	ldrb	r3, [r1, r3]
 8001b2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40021000 	.word	0x40021000
 8001b38:	08003e58 	.word	0x08003e58

08001b3c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b44:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <RCC_Delay+0x34>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a0a      	ldr	r2, [pc, #40]	; (8001b74 <RCC_Delay+0x38>)
 8001b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4e:	0a5b      	lsrs	r3, r3, #9
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	fb02 f303 	mul.w	r3, r2, r3
 8001b56:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b58:	bf00      	nop
  }
  while (Delay --);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	1e5a      	subs	r2, r3, #1
 8001b5e:	60fa      	str	r2, [r7, #12]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1f9      	bne.n	8001b58 <RCC_Delay+0x1c>
}
 8001b64:	bf00      	nop
 8001b66:	bf00      	nop
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bc80      	pop	{r7}
 8001b6e:	4770      	bx	lr
 8001b70:	2000003c 	.word	0x2000003c
 8001b74:	10624dd3 	.word	0x10624dd3

08001b78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e041      	b.n	8001c0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d106      	bne.n	8001ba4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7fe fe9a 	bl	80008d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3304      	adds	r3, #4
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4610      	mov	r0, r2
 8001bb8:	f000 fa20 	bl	8001ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d122      	bne.n	8001c72 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d11b      	bne.n	8001c72 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f06f 0202 	mvn.w	r2, #2
 8001c42:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 f9b4 	bl	8001fc6 <HAL_TIM_IC_CaptureCallback>
 8001c5e:	e005      	b.n	8001c6c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f9a7 	bl	8001fb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 f9b6 	bl	8001fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	2b04      	cmp	r3, #4
 8001c7e:	d122      	bne.n	8001cc6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	f003 0304 	and.w	r3, r3, #4
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	d11b      	bne.n	8001cc6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f06f 0204 	mvn.w	r2, #4
 8001c96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d003      	beq.n	8001cb4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 f98a 	bl	8001fc6 <HAL_TIM_IC_CaptureCallback>
 8001cb2:	e005      	b.n	8001cc0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 f97d 	bl	8001fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 f98c 	bl	8001fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	f003 0308 	and.w	r3, r3, #8
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	d122      	bne.n	8001d1a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	2b08      	cmp	r3, #8
 8001ce0:	d11b      	bne.n	8001d1a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f06f 0208 	mvn.w	r2, #8
 8001cea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2204      	movs	r2, #4
 8001cf0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	69db      	ldr	r3, [r3, #28]
 8001cf8:	f003 0303 	and.w	r3, r3, #3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d003      	beq.n	8001d08 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 f960 	bl	8001fc6 <HAL_TIM_IC_CaptureCallback>
 8001d06:	e005      	b.n	8001d14 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f953 	bl	8001fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f962 	bl	8001fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	f003 0310 	and.w	r3, r3, #16
 8001d24:	2b10      	cmp	r3, #16
 8001d26:	d122      	bne.n	8001d6e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	f003 0310 	and.w	r3, r3, #16
 8001d32:	2b10      	cmp	r3, #16
 8001d34:	d11b      	bne.n	8001d6e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f06f 0210 	mvn.w	r2, #16
 8001d3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2208      	movs	r2, #8
 8001d44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d003      	beq.n	8001d5c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 f936 	bl	8001fc6 <HAL_TIM_IC_CaptureCallback>
 8001d5a:	e005      	b.n	8001d68 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f929 	bl	8001fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f938 	bl	8001fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d10e      	bne.n	8001d9a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d107      	bne.n	8001d9a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f06f 0201 	mvn.w	r2, #1
 8001d92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7fe fedb 	bl	8000b50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da4:	2b80      	cmp	r3, #128	; 0x80
 8001da6:	d10e      	bne.n	8001dc6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db2:	2b80      	cmp	r3, #128	; 0x80
 8001db4:	d107      	bne.n	8001dc6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001dbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 fa6a 	bl	800229a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dd0:	2b40      	cmp	r3, #64	; 0x40
 8001dd2:	d10e      	bne.n	8001df2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dde:	2b40      	cmp	r3, #64	; 0x40
 8001de0:	d107      	bne.n	8001df2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001dea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 f8fc 	bl	8001fea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	f003 0320 	and.w	r3, r3, #32
 8001dfc:	2b20      	cmp	r3, #32
 8001dfe:	d10e      	bne.n	8001e1e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	f003 0320 	and.w	r3, r3, #32
 8001e0a:	2b20      	cmp	r3, #32
 8001e0c:	d107      	bne.n	8001e1e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f06f 0220 	mvn.w	r2, #32
 8001e16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 fa35 	bl	8002288 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b084      	sub	sp, #16
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
 8001e2e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e30:	2300      	movs	r3, #0
 8001e32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d101      	bne.n	8001e42 <HAL_TIM_ConfigClockSource+0x1c>
 8001e3e:	2302      	movs	r3, #2
 8001e40:	e0b4      	b.n	8001fac <HAL_TIM_ConfigClockSource+0x186>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001e60:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e68:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68ba      	ldr	r2, [r7, #8]
 8001e70:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e7a:	d03e      	beq.n	8001efa <HAL_TIM_ConfigClockSource+0xd4>
 8001e7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e80:	f200 8087 	bhi.w	8001f92 <HAL_TIM_ConfigClockSource+0x16c>
 8001e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e88:	f000 8086 	beq.w	8001f98 <HAL_TIM_ConfigClockSource+0x172>
 8001e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e90:	d87f      	bhi.n	8001f92 <HAL_TIM_ConfigClockSource+0x16c>
 8001e92:	2b70      	cmp	r3, #112	; 0x70
 8001e94:	d01a      	beq.n	8001ecc <HAL_TIM_ConfigClockSource+0xa6>
 8001e96:	2b70      	cmp	r3, #112	; 0x70
 8001e98:	d87b      	bhi.n	8001f92 <HAL_TIM_ConfigClockSource+0x16c>
 8001e9a:	2b60      	cmp	r3, #96	; 0x60
 8001e9c:	d050      	beq.n	8001f40 <HAL_TIM_ConfigClockSource+0x11a>
 8001e9e:	2b60      	cmp	r3, #96	; 0x60
 8001ea0:	d877      	bhi.n	8001f92 <HAL_TIM_ConfigClockSource+0x16c>
 8001ea2:	2b50      	cmp	r3, #80	; 0x50
 8001ea4:	d03c      	beq.n	8001f20 <HAL_TIM_ConfigClockSource+0xfa>
 8001ea6:	2b50      	cmp	r3, #80	; 0x50
 8001ea8:	d873      	bhi.n	8001f92 <HAL_TIM_ConfigClockSource+0x16c>
 8001eaa:	2b40      	cmp	r3, #64	; 0x40
 8001eac:	d058      	beq.n	8001f60 <HAL_TIM_ConfigClockSource+0x13a>
 8001eae:	2b40      	cmp	r3, #64	; 0x40
 8001eb0:	d86f      	bhi.n	8001f92 <HAL_TIM_ConfigClockSource+0x16c>
 8001eb2:	2b30      	cmp	r3, #48	; 0x30
 8001eb4:	d064      	beq.n	8001f80 <HAL_TIM_ConfigClockSource+0x15a>
 8001eb6:	2b30      	cmp	r3, #48	; 0x30
 8001eb8:	d86b      	bhi.n	8001f92 <HAL_TIM_ConfigClockSource+0x16c>
 8001eba:	2b20      	cmp	r3, #32
 8001ebc:	d060      	beq.n	8001f80 <HAL_TIM_ConfigClockSource+0x15a>
 8001ebe:	2b20      	cmp	r3, #32
 8001ec0:	d867      	bhi.n	8001f92 <HAL_TIM_ConfigClockSource+0x16c>
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d05c      	beq.n	8001f80 <HAL_TIM_ConfigClockSource+0x15a>
 8001ec6:	2b10      	cmp	r3, #16
 8001ec8:	d05a      	beq.n	8001f80 <HAL_TIM_ConfigClockSource+0x15a>
 8001eca:	e062      	b.n	8001f92 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6818      	ldr	r0, [r3, #0]
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	6899      	ldr	r1, [r3, #8]
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	f000 f95d 	bl	800219a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001eee:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68ba      	ldr	r2, [r7, #8]
 8001ef6:	609a      	str	r2, [r3, #8]
      break;
 8001ef8:	e04f      	b.n	8001f9a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6818      	ldr	r0, [r3, #0]
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	6899      	ldr	r1, [r3, #8]
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	f000 f946 	bl	800219a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f1c:	609a      	str	r2, [r3, #8]
      break;
 8001f1e:	e03c      	b.n	8001f9a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6818      	ldr	r0, [r3, #0]
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	6859      	ldr	r1, [r3, #4]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	f000 f8bd 	bl	80020ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2150      	movs	r1, #80	; 0x50
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f000 f914 	bl	8002166 <TIM_ITRx_SetConfig>
      break;
 8001f3e:	e02c      	b.n	8001f9a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6818      	ldr	r0, [r3, #0]
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	6859      	ldr	r1, [r3, #4]
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	f000 f8db 	bl	8002108 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2160      	movs	r1, #96	; 0x60
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f000 f904 	bl	8002166 <TIM_ITRx_SetConfig>
      break;
 8001f5e:	e01c      	b.n	8001f9a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6818      	ldr	r0, [r3, #0]
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	6859      	ldr	r1, [r3, #4]
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	f000 f89d 	bl	80020ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2140      	movs	r1, #64	; 0x40
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f000 f8f4 	bl	8002166 <TIM_ITRx_SetConfig>
      break;
 8001f7e:	e00c      	b.n	8001f9a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4610      	mov	r0, r2
 8001f8c:	f000 f8eb 	bl	8002166 <TIM_ITRx_SetConfig>
      break;
 8001f90:	e003      	b.n	8001f9a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	73fb      	strb	r3, [r7, #15]
      break;
 8001f96:	e000      	b.n	8001f9a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001f98:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bc80      	pop	{r7}
 8001fc4:	4770      	bx	lr

08001fc6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr

08001fea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr

08001ffc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a25      	ldr	r2, [pc, #148]	; (80020a4 <TIM_Base_SetConfig+0xa8>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d007      	beq.n	8002024 <TIM_Base_SetConfig+0x28>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800201a:	d003      	beq.n	8002024 <TIM_Base_SetConfig+0x28>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a22      	ldr	r2, [pc, #136]	; (80020a8 <TIM_Base_SetConfig+0xac>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d108      	bne.n	8002036 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800202a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	4313      	orrs	r3, r2
 8002034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a1a      	ldr	r2, [pc, #104]	; (80020a4 <TIM_Base_SetConfig+0xa8>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d007      	beq.n	800204e <TIM_Base_SetConfig+0x52>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002044:	d003      	beq.n	800204e <TIM_Base_SetConfig+0x52>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a17      	ldr	r2, [pc, #92]	; (80020a8 <TIM_Base_SetConfig+0xac>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d108      	bne.n	8002060 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002054:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	4313      	orrs	r3, r2
 800205e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	4313      	orrs	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a07      	ldr	r2, [pc, #28]	; (80020a4 <TIM_Base_SetConfig+0xa8>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d103      	bne.n	8002094 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	691a      	ldr	r2, [r3, #16]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	615a      	str	r2, [r3, #20]
}
 800209a:	bf00      	nop
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr
 80020a4:	40012c00 	.word	0x40012c00
 80020a8:	40000400 	.word	0x40000400

080020ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b087      	sub	sp, #28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	f023 0201 	bic.w	r2, r3, #1
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	011b      	lsls	r3, r3, #4
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	4313      	orrs	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f023 030a 	bic.w	r3, r3, #10
 80020e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	621a      	str	r2, [r3, #32]
}
 80020fe:	bf00      	nop
 8002100:	371c      	adds	r7, #28
 8002102:	46bd      	mov	sp, r7
 8002104:	bc80      	pop	{r7}
 8002106:	4770      	bx	lr

08002108 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002108:	b480      	push	{r7}
 800210a:	b087      	sub	sp, #28
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	f023 0210 	bic.w	r2, r3, #16
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002132:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	031b      	lsls	r3, r3, #12
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	4313      	orrs	r3, r2
 800213c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002144:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	011b      	lsls	r3, r3, #4
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	4313      	orrs	r3, r2
 800214e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	697a      	ldr	r2, [r7, #20]
 800215a:	621a      	str	r2, [r3, #32]
}
 800215c:	bf00      	nop
 800215e:	371c      	adds	r7, #28
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr

08002166 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002166:	b480      	push	{r7}
 8002168:	b085      	sub	sp, #20
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800217c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4313      	orrs	r3, r2
 8002184:	f043 0307 	orr.w	r3, r3, #7
 8002188:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	609a      	str	r2, [r3, #8]
}
 8002190:	bf00      	nop
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr

0800219a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800219a:	b480      	push	{r7}
 800219c:	b087      	sub	sp, #28
 800219e:	af00      	add	r7, sp, #0
 80021a0:	60f8      	str	r0, [r7, #12]
 80021a2:	60b9      	str	r1, [r7, #8]
 80021a4:	607a      	str	r2, [r7, #4]
 80021a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021b4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	021a      	lsls	r2, r3, #8
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	431a      	orrs	r2, r3
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	609a      	str	r2, [r3, #8]
}
 80021ce:	bf00      	nop
 80021d0:	371c      	adds	r7, #28
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr

080021d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d101      	bne.n	80021f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80021ec:	2302      	movs	r3, #2
 80021ee:	e041      	b.n	8002274 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2202      	movs	r2, #2
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002216:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	4313      	orrs	r3, r2
 8002220:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a14      	ldr	r2, [pc, #80]	; (8002280 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d009      	beq.n	8002248 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800223c:	d004      	beq.n	8002248 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a10      	ldr	r2, [pc, #64]	; (8002284 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d10c      	bne.n	8002262 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800224e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	68ba      	ldr	r2, [r7, #8]
 8002256:	4313      	orrs	r3, r2
 8002258:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	bc80      	pop	{r7}
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	40012c00 	.word	0x40012c00
 8002284:	40000400 	.word	0x40000400

08002288 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	bc80      	pop	{r7}
 8002298:	4770      	bx	lr

0800229a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800229a:	b480      	push	{r7}
 800229c:	b083      	sub	sp, #12
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr

080022ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e042      	b.n	8002344 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d106      	bne.n	80022d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7fe fb24 	bl	8000920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2224      	movs	r2, #36	; 0x24
 80022dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68da      	ldr	r2, [r3, #12]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 fd71 	bl	8002dd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	691a      	ldr	r2, [r3, #16]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002304:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	695a      	ldr	r2, [r3, #20]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002314:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68da      	ldr	r2, [r3, #12]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002324:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2220      	movs	r2, #32
 8002330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2220      	movs	r2, #32
 8002338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b08a      	sub	sp, #40	; 0x28
 8002350:	af02      	add	r7, sp, #8
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	603b      	str	r3, [r7, #0]
 8002358:	4613      	mov	r3, r2
 800235a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800235c:	2300      	movs	r3, #0
 800235e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b20      	cmp	r3, #32
 800236a:	d16d      	bne.n	8002448 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d002      	beq.n	8002378 <HAL_UART_Transmit+0x2c>
 8002372:	88fb      	ldrh	r3, [r7, #6]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e066      	b.n	800244a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2221      	movs	r2, #33	; 0x21
 8002386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800238a:	f7fe fc73 	bl	8000c74 <HAL_GetTick>
 800238e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	88fa      	ldrh	r2, [r7, #6]
 8002394:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	88fa      	ldrh	r2, [r7, #6]
 800239a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023a4:	d108      	bne.n	80023b8 <HAL_UART_Transmit+0x6c>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d104      	bne.n	80023b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	61bb      	str	r3, [r7, #24]
 80023b6:	e003      	b.n	80023c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80023c0:	e02a      	b.n	8002418 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	2200      	movs	r2, #0
 80023ca:	2180      	movs	r1, #128	; 0x80
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f000 faf9 	bl	80029c4 <UART_WaitOnFlagUntilTimeout>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e036      	b.n	800244a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10b      	bne.n	80023fa <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	881b      	ldrh	r3, [r3, #0]
 80023e6:	461a      	mov	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	3302      	adds	r3, #2
 80023f6:	61bb      	str	r3, [r7, #24]
 80023f8:	e007      	b.n	800240a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	781a      	ldrb	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	3301      	adds	r3, #1
 8002408:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800240e:	b29b      	uxth	r3, r3
 8002410:	3b01      	subs	r3, #1
 8002412:	b29a      	uxth	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800241c:	b29b      	uxth	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1cf      	bne.n	80023c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	9300      	str	r3, [sp, #0]
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	2200      	movs	r2, #0
 800242a:	2140      	movs	r1, #64	; 0x40
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f000 fac9 	bl	80029c4 <UART_WaitOnFlagUntilTimeout>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e006      	b.n	800244a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2220      	movs	r2, #32
 8002440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002444:	2300      	movs	r3, #0
 8002446:	e000      	b.n	800244a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002448:	2302      	movs	r3, #2
  }
}
 800244a:	4618      	mov	r0, r3
 800244c:	3720      	adds	r7, #32
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
	...

08002454 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b0ba      	sub	sp, #232	; 0xe8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800247a:	2300      	movs	r3, #0
 800247c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002480:	2300      	movs	r3, #0
 8002482:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002492:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10f      	bne.n	80024ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800249a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800249e:	f003 0320 	and.w	r3, r3, #32
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d009      	beq.n	80024ba <HAL_UART_IRQHandler+0x66>
 80024a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024aa:	f003 0320 	and.w	r3, r3, #32
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 fbd1 	bl	8002c5a <UART_Receive_IT>
      return;
 80024b8:	e25b      	b.n	8002972 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80024ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f000 80de 	beq.w	8002680 <HAL_UART_IRQHandler+0x22c>
 80024c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d106      	bne.n	80024de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80024d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 80d1 	beq.w	8002680 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80024de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00b      	beq.n	8002502 <HAL_UART_IRQHandler+0xae>
 80024ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d005      	beq.n	8002502 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fa:	f043 0201 	orr.w	r2, r3, #1
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002506:	f003 0304 	and.w	r3, r3, #4
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00b      	beq.n	8002526 <HAL_UART_IRQHandler+0xd2>
 800250e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d005      	beq.n	8002526 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251e:	f043 0202 	orr.w	r2, r3, #2
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00b      	beq.n	800254a <HAL_UART_IRQHandler+0xf6>
 8002532:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d005      	beq.n	800254a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002542:	f043 0204 	orr.w	r2, r3, #4
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800254a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	2b00      	cmp	r3, #0
 8002554:	d011      	beq.n	800257a <HAL_UART_IRQHandler+0x126>
 8002556:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800255a:	f003 0320 	and.w	r3, r3, #32
 800255e:	2b00      	cmp	r3, #0
 8002560:	d105      	bne.n	800256e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002562:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d005      	beq.n	800257a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002572:	f043 0208 	orr.w	r2, r3, #8
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 81f2 	beq.w	8002968 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002588:	f003 0320 	and.w	r3, r3, #32
 800258c:	2b00      	cmp	r3, #0
 800258e:	d008      	beq.n	80025a2 <HAL_UART_IRQHandler+0x14e>
 8002590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002594:	f003 0320 	and.w	r3, r3, #32
 8002598:	2b00      	cmp	r3, #0
 800259a:	d002      	beq.n	80025a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f000 fb5c 	bl	8002c5a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	bf14      	ite	ne
 80025b0:	2301      	movne	r3, #1
 80025b2:	2300      	moveq	r3, #0
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d103      	bne.n	80025ce <HAL_UART_IRQHandler+0x17a>
 80025c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d04f      	beq.n	800266e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 fa66 	bl	8002aa0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d041      	beq.n	8002666 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	3314      	adds	r3, #20
 80025e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025f0:	e853 3f00 	ldrex	r3, [r3]
 80025f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80025f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002600:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	3314      	adds	r3, #20
 800260a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800260e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002612:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002616:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800261a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800261e:	e841 2300 	strex	r3, r2, [r1]
 8002622:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002626:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1d9      	bne.n	80025e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002632:	2b00      	cmp	r3, #0
 8002634:	d013      	beq.n	800265e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800263a:	4a7e      	ldr	r2, [pc, #504]	; (8002834 <HAL_UART_IRQHandler+0x3e0>)
 800263c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002642:	4618      	mov	r0, r3
 8002644:	f7fe fc68 	bl	8000f18 <HAL_DMA_Abort_IT>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d016      	beq.n	800267c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002658:	4610      	mov	r0, r2
 800265a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800265c:	e00e      	b.n	800267c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f99c 	bl	800299c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002664:	e00a      	b.n	800267c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f998 	bl	800299c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800266c:	e006      	b.n	800267c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f994 	bl	800299c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800267a:	e175      	b.n	8002968 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800267c:	bf00      	nop
    return;
 800267e:	e173      	b.n	8002968 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002684:	2b01      	cmp	r3, #1
 8002686:	f040 814f 	bne.w	8002928 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800268a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800268e:	f003 0310 	and.w	r3, r3, #16
 8002692:	2b00      	cmp	r3, #0
 8002694:	f000 8148 	beq.w	8002928 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800269c:	f003 0310 	and.w	r3, r3, #16
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 8141 	beq.w	8002928 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80026a6:	2300      	movs	r3, #0
 80026a8:	60bb      	str	r3, [r7, #8]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	60bb      	str	r3, [r7, #8]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f000 80b6 	beq.w	8002838 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80026d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f000 8145 	beq.w	800296c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80026e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80026ea:	429a      	cmp	r2, r3
 80026ec:	f080 813e 	bcs.w	800296c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80026f6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	2b20      	cmp	r3, #32
 8002700:	f000 8088 	beq.w	8002814 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	330c      	adds	r3, #12
 800270a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800270e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002712:	e853 3f00 	ldrex	r3, [r3]
 8002716:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800271a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800271e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002722:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	330c      	adds	r3, #12
 800272c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002730:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002734:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002738:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800273c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002740:	e841 2300 	strex	r3, r2, [r1]
 8002744:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002748:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1d9      	bne.n	8002704 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	3314      	adds	r3, #20
 8002756:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002758:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800275a:	e853 3f00 	ldrex	r3, [r3]
 800275e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002760:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002762:	f023 0301 	bic.w	r3, r3, #1
 8002766:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	3314      	adds	r3, #20
 8002770:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002774:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002778:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800277a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800277c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002780:	e841 2300 	strex	r3, r2, [r1]
 8002784:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002786:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1e1      	bne.n	8002750 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	3314      	adds	r3, #20
 8002792:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002794:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002796:	e853 3f00 	ldrex	r3, [r3]
 800279a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800279c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800279e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	3314      	adds	r3, #20
 80027ac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80027b0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80027b2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027b4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80027b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80027b8:	e841 2300 	strex	r3, r2, [r1]
 80027bc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80027be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1e3      	bne.n	800278c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2220      	movs	r2, #32
 80027c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	330c      	adds	r3, #12
 80027d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027dc:	e853 3f00 	ldrex	r3, [r3]
 80027e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80027e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027e4:	f023 0310 	bic.w	r3, r3, #16
 80027e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	330c      	adds	r3, #12
 80027f2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80027f6:	65ba      	str	r2, [r7, #88]	; 0x58
 80027f8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80027fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027fe:	e841 2300 	strex	r3, r2, [r1]
 8002802:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1e3      	bne.n	80027d2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280e:	4618      	mov	r0, r3
 8002810:	f7fe fb47 	bl	8000ea2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2202      	movs	r2, #2
 8002818:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002822:	b29b      	uxth	r3, r3
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	b29b      	uxth	r3, r3
 8002828:	4619      	mov	r1, r3
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 f8bf 	bl	80029ae <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002830:	e09c      	b.n	800296c <HAL_UART_IRQHandler+0x518>
 8002832:	bf00      	nop
 8002834:	08002b65 	.word	0x08002b65
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002840:	b29b      	uxth	r3, r3
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800284c:	b29b      	uxth	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 808e 	beq.w	8002970 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002854:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 8089 	beq.w	8002970 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	330c      	adds	r3, #12
 8002864:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002868:	e853 3f00 	ldrex	r3, [r3]
 800286c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800286e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002870:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002874:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	330c      	adds	r3, #12
 800287e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002882:	647a      	str	r2, [r7, #68]	; 0x44
 8002884:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002886:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002888:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800288a:	e841 2300 	strex	r3, r2, [r1]
 800288e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1e3      	bne.n	800285e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	3314      	adds	r3, #20
 800289c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	e853 3f00 	ldrex	r3, [r3]
 80028a4:	623b      	str	r3, [r7, #32]
   return(result);
 80028a6:	6a3b      	ldr	r3, [r7, #32]
 80028a8:	f023 0301 	bic.w	r3, r3, #1
 80028ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	3314      	adds	r3, #20
 80028b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80028ba:	633a      	str	r2, [r7, #48]	; 0x30
 80028bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80028c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028c2:	e841 2300 	strex	r3, r2, [r1]
 80028c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80028c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1e3      	bne.n	8002896 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2220      	movs	r2, #32
 80028d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	330c      	adds	r3, #12
 80028e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	e853 3f00 	ldrex	r3, [r3]
 80028ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f023 0310 	bic.w	r3, r3, #16
 80028f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	330c      	adds	r3, #12
 80028fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002900:	61fa      	str	r2, [r7, #28]
 8002902:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002904:	69b9      	ldr	r1, [r7, #24]
 8002906:	69fa      	ldr	r2, [r7, #28]
 8002908:	e841 2300 	strex	r3, r2, [r1]
 800290c:	617b      	str	r3, [r7, #20]
   return(result);
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1e3      	bne.n	80028dc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2202      	movs	r2, #2
 8002918:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800291a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800291e:	4619      	mov	r1, r3
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 f844 	bl	80029ae <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002926:	e023      	b.n	8002970 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002928:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800292c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002930:	2b00      	cmp	r3, #0
 8002932:	d009      	beq.n	8002948 <HAL_UART_IRQHandler+0x4f4>
 8002934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800293c:	2b00      	cmp	r3, #0
 800293e:	d003      	beq.n	8002948 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 f923 	bl	8002b8c <UART_Transmit_IT>
    return;
 8002946:	e014      	b.n	8002972 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800294c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00e      	beq.n	8002972 <HAL_UART_IRQHandler+0x51e>
 8002954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800295c:	2b00      	cmp	r3, #0
 800295e:	d008      	beq.n	8002972 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 f962 	bl	8002c2a <UART_EndTransmit_IT>
    return;
 8002966:	e004      	b.n	8002972 <HAL_UART_IRQHandler+0x51e>
    return;
 8002968:	bf00      	nop
 800296a:	e002      	b.n	8002972 <HAL_UART_IRQHandler+0x51e>
      return;
 800296c:	bf00      	nop
 800296e:	e000      	b.n	8002972 <HAL_UART_IRQHandler+0x51e>
      return;
 8002970:	bf00      	nop
  }
}
 8002972:	37e8      	adds	r7, #232	; 0xe8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr

0800298a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr

0800299c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr

080029ae <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
 80029b6:	460b      	mov	r3, r1
 80029b8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr

080029c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b090      	sub	sp, #64	; 0x40
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	603b      	str	r3, [r7, #0]
 80029d0:	4613      	mov	r3, r2
 80029d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029d4:	e050      	b.n	8002a78 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029dc:	d04c      	beq.n	8002a78 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80029de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d007      	beq.n	80029f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80029e4:	f7fe f946 	bl	8000c74 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d241      	bcs.n	8002a78 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	330c      	adds	r3, #12
 80029fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fe:	e853 3f00 	ldrex	r3, [r3]
 8002a02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	330c      	adds	r3, #12
 8002a12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a14:	637a      	str	r2, [r7, #52]	; 0x34
 8002a16:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a1c:	e841 2300 	strex	r3, r2, [r1]
 8002a20:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1e5      	bne.n	80029f4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	3314      	adds	r3, #20
 8002a2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	e853 3f00 	ldrex	r3, [r3]
 8002a36:	613b      	str	r3, [r7, #16]
   return(result);
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	f023 0301 	bic.w	r3, r3, #1
 8002a3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	3314      	adds	r3, #20
 8002a46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a48:	623a      	str	r2, [r7, #32]
 8002a4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a4c:	69f9      	ldr	r1, [r7, #28]
 8002a4e:	6a3a      	ldr	r2, [r7, #32]
 8002a50:	e841 2300 	strex	r3, r2, [r1]
 8002a54:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1e5      	bne.n	8002a28 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2220      	movs	r2, #32
 8002a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e00f      	b.n	8002a98 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	4013      	ands	r3, r2
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	bf0c      	ite	eq
 8002a88:	2301      	moveq	r3, #1
 8002a8a:	2300      	movne	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	461a      	mov	r2, r3
 8002a90:	79fb      	ldrb	r3, [r7, #7]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d09f      	beq.n	80029d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3740      	adds	r7, #64	; 0x40
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b095      	sub	sp, #84	; 0x54
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	330c      	adds	r3, #12
 8002aae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ab2:	e853 3f00 	ldrex	r3, [r3]
 8002ab6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002abe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	330c      	adds	r3, #12
 8002ac6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ac8:	643a      	str	r2, [r7, #64]	; 0x40
 8002aca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002acc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002ace:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ad0:	e841 2300 	strex	r3, r2, [r1]
 8002ad4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1e5      	bne.n	8002aa8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	3314      	adds	r3, #20
 8002ae2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae4:	6a3b      	ldr	r3, [r7, #32]
 8002ae6:	e853 3f00 	ldrex	r3, [r3]
 8002aea:	61fb      	str	r3, [r7, #28]
   return(result);
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	f023 0301 	bic.w	r3, r3, #1
 8002af2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	3314      	adds	r3, #20
 8002afa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002afc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002afe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b04:	e841 2300 	strex	r3, r2, [r1]
 8002b08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1e5      	bne.n	8002adc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d119      	bne.n	8002b4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	330c      	adds	r3, #12
 8002b1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	e853 3f00 	ldrex	r3, [r3]
 8002b26:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	f023 0310 	bic.w	r3, r3, #16
 8002b2e:	647b      	str	r3, [r7, #68]	; 0x44
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	330c      	adds	r3, #12
 8002b36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b38:	61ba      	str	r2, [r7, #24]
 8002b3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b3c:	6979      	ldr	r1, [r7, #20]
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	e841 2300 	strex	r3, r2, [r1]
 8002b44:	613b      	str	r3, [r7, #16]
   return(result);
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1e5      	bne.n	8002b18 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2220      	movs	r2, #32
 8002b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002b5a:	bf00      	nop
 8002b5c:	3754      	adds	r7, #84	; 0x54
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr

08002b64 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b70:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f7ff ff0c 	bl	800299c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b84:	bf00      	nop
 8002b86:	3710      	adds	r7, #16
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b21      	cmp	r3, #33	; 0x21
 8002b9e:	d13e      	bne.n	8002c1e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ba8:	d114      	bne.n	8002bd4 <UART_Transmit_IT+0x48>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d110      	bne.n	8002bd4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	881b      	ldrh	r3, [r3, #0]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bc6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	1c9a      	adds	r2, r3, #2
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	621a      	str	r2, [r3, #32]
 8002bd2:	e008      	b.n	8002be6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	1c59      	adds	r1, r3, #1
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	6211      	str	r1, [r2, #32]
 8002bde:	781a      	ldrb	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	3b01      	subs	r3, #1
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10f      	bne.n	8002c1a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68da      	ldr	r2, [r3, #12]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c08:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68da      	ldr	r2, [r3, #12]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c18:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	e000      	b.n	8002c20 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002c1e:	2302      	movs	r3, #2
  }
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3714      	adds	r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bc80      	pop	{r7}
 8002c28:	4770      	bx	lr

08002c2a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b082      	sub	sp, #8
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68da      	ldr	r2, [r3, #12]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c40:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2220      	movs	r2, #32
 8002c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f7ff fe94 	bl	8002978 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b08c      	sub	sp, #48	; 0x30
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b22      	cmp	r3, #34	; 0x22
 8002c6c:	f040 80ae 	bne.w	8002dcc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c78:	d117      	bne.n	8002caa <UART_Receive_IT+0x50>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d113      	bne.n	8002caa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002c82:	2300      	movs	r3, #0
 8002c84:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca2:	1c9a      	adds	r2, r3, #2
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	629a      	str	r2, [r3, #40]	; 0x28
 8002ca8:	e026      	b.n	8002cf8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cbc:	d007      	beq.n	8002cce <UART_Receive_IT+0x74>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10a      	bne.n	8002cdc <UART_Receive_IT+0x82>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d106      	bne.n	8002cdc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd8:	701a      	strb	r2, [r3, #0]
 8002cda:	e008      	b.n	8002cee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf2:	1c5a      	adds	r2, r3, #1
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	4619      	mov	r1, r3
 8002d06:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d15d      	bne.n	8002dc8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68da      	ldr	r2, [r3, #12]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 0220 	bic.w	r2, r2, #32
 8002d1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68da      	ldr	r2, [r3, #12]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	695a      	ldr	r2, [r3, #20]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f022 0201 	bic.w	r2, r2, #1
 8002d3a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2220      	movs	r2, #32
 8002d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d135      	bne.n	8002dbe <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	330c      	adds	r3, #12
 8002d5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	e853 3f00 	ldrex	r3, [r3]
 8002d66:	613b      	str	r3, [r7, #16]
   return(result);
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	f023 0310 	bic.w	r3, r3, #16
 8002d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	330c      	adds	r3, #12
 8002d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d78:	623a      	str	r2, [r7, #32]
 8002d7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d7c:	69f9      	ldr	r1, [r7, #28]
 8002d7e:	6a3a      	ldr	r2, [r7, #32]
 8002d80:	e841 2300 	strex	r3, r2, [r1]
 8002d84:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1e5      	bne.n	8002d58 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0310 	and.w	r3, r3, #16
 8002d96:	2b10      	cmp	r3, #16
 8002d98:	d10a      	bne.n	8002db0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002db4:	4619      	mov	r1, r3
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7ff fdf9 	bl	80029ae <HAL_UARTEx_RxEventCallback>
 8002dbc:	e002      	b.n	8002dc4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7ff fde3 	bl	800298a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	e002      	b.n	8002dce <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	e000      	b.n	8002dce <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002dcc:	2302      	movs	r3, #2
  }
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3730      	adds	r7, #48	; 0x30
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
	...

08002dd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68da      	ldr	r2, [r3, #12]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002e12:	f023 030c 	bic.w	r3, r3, #12
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	6812      	ldr	r2, [r2, #0]
 8002e1a:	68b9      	ldr	r1, [r7, #8]
 8002e1c:	430b      	orrs	r3, r1
 8002e1e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	699a      	ldr	r2, [r3, #24]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a2c      	ldr	r2, [pc, #176]	; (8002eec <UART_SetConfig+0x114>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d103      	bne.n	8002e48 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002e40:	f7fe fe68 	bl	8001b14 <HAL_RCC_GetPCLK2Freq>
 8002e44:	60f8      	str	r0, [r7, #12]
 8002e46:	e002      	b.n	8002e4e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002e48:	f7fe fe50 	bl	8001aec <HAL_RCC_GetPCLK1Freq>
 8002e4c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	4613      	mov	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4413      	add	r3, r2
 8002e56:	009a      	lsls	r2, r3, #2
 8002e58:	441a      	add	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e64:	4a22      	ldr	r2, [pc, #136]	; (8002ef0 <UART_SetConfig+0x118>)
 8002e66:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6a:	095b      	lsrs	r3, r3, #5
 8002e6c:	0119      	lsls	r1, r3, #4
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	4613      	mov	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4413      	add	r3, r2
 8002e76:	009a      	lsls	r2, r3, #2
 8002e78:	441a      	add	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e84:	4b1a      	ldr	r3, [pc, #104]	; (8002ef0 <UART_SetConfig+0x118>)
 8002e86:	fba3 0302 	umull	r0, r3, r3, r2
 8002e8a:	095b      	lsrs	r3, r3, #5
 8002e8c:	2064      	movs	r0, #100	; 0x64
 8002e8e:	fb00 f303 	mul.w	r3, r0, r3
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	011b      	lsls	r3, r3, #4
 8002e96:	3332      	adds	r3, #50	; 0x32
 8002e98:	4a15      	ldr	r2, [pc, #84]	; (8002ef0 <UART_SetConfig+0x118>)
 8002e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9e:	095b      	lsrs	r3, r3, #5
 8002ea0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ea4:	4419      	add	r1, r3
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	009a      	lsls	r2, r3, #2
 8002eb0:	441a      	add	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ebc:	4b0c      	ldr	r3, [pc, #48]	; (8002ef0 <UART_SetConfig+0x118>)
 8002ebe:	fba3 0302 	umull	r0, r3, r3, r2
 8002ec2:	095b      	lsrs	r3, r3, #5
 8002ec4:	2064      	movs	r0, #100	; 0x64
 8002ec6:	fb00 f303 	mul.w	r3, r0, r3
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	011b      	lsls	r3, r3, #4
 8002ece:	3332      	adds	r3, #50	; 0x32
 8002ed0:	4a07      	ldr	r2, [pc, #28]	; (8002ef0 <UART_SetConfig+0x118>)
 8002ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed6:	095b      	lsrs	r3, r3, #5
 8002ed8:	f003 020f 	and.w	r2, r3, #15
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	440a      	add	r2, r1
 8002ee2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002ee4:	bf00      	nop
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40013800 	.word	0x40013800
 8002ef0:	51eb851f 	.word	0x51eb851f

08002ef4 <__errno>:
 8002ef4:	4b01      	ldr	r3, [pc, #4]	; (8002efc <__errno+0x8>)
 8002ef6:	6818      	ldr	r0, [r3, #0]
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	20000048 	.word	0x20000048

08002f00 <__libc_init_array>:
 8002f00:	b570      	push	{r4, r5, r6, lr}
 8002f02:	2600      	movs	r6, #0
 8002f04:	4d0c      	ldr	r5, [pc, #48]	; (8002f38 <__libc_init_array+0x38>)
 8002f06:	4c0d      	ldr	r4, [pc, #52]	; (8002f3c <__libc_init_array+0x3c>)
 8002f08:	1b64      	subs	r4, r4, r5
 8002f0a:	10a4      	asrs	r4, r4, #2
 8002f0c:	42a6      	cmp	r6, r4
 8002f0e:	d109      	bne.n	8002f24 <__libc_init_array+0x24>
 8002f10:	f000 ff82 	bl	8003e18 <_init>
 8002f14:	2600      	movs	r6, #0
 8002f16:	4d0a      	ldr	r5, [pc, #40]	; (8002f40 <__libc_init_array+0x40>)
 8002f18:	4c0a      	ldr	r4, [pc, #40]	; (8002f44 <__libc_init_array+0x44>)
 8002f1a:	1b64      	subs	r4, r4, r5
 8002f1c:	10a4      	asrs	r4, r4, #2
 8002f1e:	42a6      	cmp	r6, r4
 8002f20:	d105      	bne.n	8002f2e <__libc_init_array+0x2e>
 8002f22:	bd70      	pop	{r4, r5, r6, pc}
 8002f24:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f28:	4798      	blx	r3
 8002f2a:	3601      	adds	r6, #1
 8002f2c:	e7ee      	b.n	8002f0c <__libc_init_array+0xc>
 8002f2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f32:	4798      	blx	r3
 8002f34:	3601      	adds	r6, #1
 8002f36:	e7f2      	b.n	8002f1e <__libc_init_array+0x1e>
 8002f38:	08003f0c 	.word	0x08003f0c
 8002f3c:	08003f0c 	.word	0x08003f0c
 8002f40:	08003f0c 	.word	0x08003f0c
 8002f44:	08003f10 	.word	0x08003f10

08002f48 <memset>:
 8002f48:	4603      	mov	r3, r0
 8002f4a:	4402      	add	r2, r0
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d100      	bne.n	8002f52 <memset+0xa>
 8002f50:	4770      	bx	lr
 8002f52:	f803 1b01 	strb.w	r1, [r3], #1
 8002f56:	e7f9      	b.n	8002f4c <memset+0x4>

08002f58 <iprintf>:
 8002f58:	b40f      	push	{r0, r1, r2, r3}
 8002f5a:	4b0a      	ldr	r3, [pc, #40]	; (8002f84 <iprintf+0x2c>)
 8002f5c:	b513      	push	{r0, r1, r4, lr}
 8002f5e:	681c      	ldr	r4, [r3, #0]
 8002f60:	b124      	cbz	r4, 8002f6c <iprintf+0x14>
 8002f62:	69a3      	ldr	r3, [r4, #24]
 8002f64:	b913      	cbnz	r3, 8002f6c <iprintf+0x14>
 8002f66:	4620      	mov	r0, r4
 8002f68:	f000 f866 	bl	8003038 <__sinit>
 8002f6c:	ab05      	add	r3, sp, #20
 8002f6e:	4620      	mov	r0, r4
 8002f70:	9a04      	ldr	r2, [sp, #16]
 8002f72:	68a1      	ldr	r1, [r4, #8]
 8002f74:	9301      	str	r3, [sp, #4]
 8002f76:	f000 f981 	bl	800327c <_vfiprintf_r>
 8002f7a:	b002      	add	sp, #8
 8002f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f80:	b004      	add	sp, #16
 8002f82:	4770      	bx	lr
 8002f84:	20000048 	.word	0x20000048

08002f88 <std>:
 8002f88:	2300      	movs	r3, #0
 8002f8a:	b510      	push	{r4, lr}
 8002f8c:	4604      	mov	r4, r0
 8002f8e:	e9c0 3300 	strd	r3, r3, [r0]
 8002f92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002f96:	6083      	str	r3, [r0, #8]
 8002f98:	8181      	strh	r1, [r0, #12]
 8002f9a:	6643      	str	r3, [r0, #100]	; 0x64
 8002f9c:	81c2      	strh	r2, [r0, #14]
 8002f9e:	6183      	str	r3, [r0, #24]
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	2208      	movs	r2, #8
 8002fa4:	305c      	adds	r0, #92	; 0x5c
 8002fa6:	f7ff ffcf 	bl	8002f48 <memset>
 8002faa:	4b05      	ldr	r3, [pc, #20]	; (8002fc0 <std+0x38>)
 8002fac:	6224      	str	r4, [r4, #32]
 8002fae:	6263      	str	r3, [r4, #36]	; 0x24
 8002fb0:	4b04      	ldr	r3, [pc, #16]	; (8002fc4 <std+0x3c>)
 8002fb2:	62a3      	str	r3, [r4, #40]	; 0x28
 8002fb4:	4b04      	ldr	r3, [pc, #16]	; (8002fc8 <std+0x40>)
 8002fb6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002fb8:	4b04      	ldr	r3, [pc, #16]	; (8002fcc <std+0x44>)
 8002fba:	6323      	str	r3, [r4, #48]	; 0x30
 8002fbc:	bd10      	pop	{r4, pc}
 8002fbe:	bf00      	nop
 8002fc0:	08003829 	.word	0x08003829
 8002fc4:	0800384b 	.word	0x0800384b
 8002fc8:	08003883 	.word	0x08003883
 8002fcc:	080038a7 	.word	0x080038a7

08002fd0 <_cleanup_r>:
 8002fd0:	4901      	ldr	r1, [pc, #4]	; (8002fd8 <_cleanup_r+0x8>)
 8002fd2:	f000 b8af 	b.w	8003134 <_fwalk_reent>
 8002fd6:	bf00      	nop
 8002fd8:	08003b81 	.word	0x08003b81

08002fdc <__sfmoreglue>:
 8002fdc:	b570      	push	{r4, r5, r6, lr}
 8002fde:	2568      	movs	r5, #104	; 0x68
 8002fe0:	1e4a      	subs	r2, r1, #1
 8002fe2:	4355      	muls	r5, r2
 8002fe4:	460e      	mov	r6, r1
 8002fe6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002fea:	f000 f8c5 	bl	8003178 <_malloc_r>
 8002fee:	4604      	mov	r4, r0
 8002ff0:	b140      	cbz	r0, 8003004 <__sfmoreglue+0x28>
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	e9c0 1600 	strd	r1, r6, [r0]
 8002ff8:	300c      	adds	r0, #12
 8002ffa:	60a0      	str	r0, [r4, #8]
 8002ffc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003000:	f7ff ffa2 	bl	8002f48 <memset>
 8003004:	4620      	mov	r0, r4
 8003006:	bd70      	pop	{r4, r5, r6, pc}

08003008 <__sfp_lock_acquire>:
 8003008:	4801      	ldr	r0, [pc, #4]	; (8003010 <__sfp_lock_acquire+0x8>)
 800300a:	f000 b8b3 	b.w	8003174 <__retarget_lock_acquire_recursive>
 800300e:	bf00      	nop
 8003010:	200001c4 	.word	0x200001c4

08003014 <__sfp_lock_release>:
 8003014:	4801      	ldr	r0, [pc, #4]	; (800301c <__sfp_lock_release+0x8>)
 8003016:	f000 b8ae 	b.w	8003176 <__retarget_lock_release_recursive>
 800301a:	bf00      	nop
 800301c:	200001c4 	.word	0x200001c4

08003020 <__sinit_lock_acquire>:
 8003020:	4801      	ldr	r0, [pc, #4]	; (8003028 <__sinit_lock_acquire+0x8>)
 8003022:	f000 b8a7 	b.w	8003174 <__retarget_lock_acquire_recursive>
 8003026:	bf00      	nop
 8003028:	200001bf 	.word	0x200001bf

0800302c <__sinit_lock_release>:
 800302c:	4801      	ldr	r0, [pc, #4]	; (8003034 <__sinit_lock_release+0x8>)
 800302e:	f000 b8a2 	b.w	8003176 <__retarget_lock_release_recursive>
 8003032:	bf00      	nop
 8003034:	200001bf 	.word	0x200001bf

08003038 <__sinit>:
 8003038:	b510      	push	{r4, lr}
 800303a:	4604      	mov	r4, r0
 800303c:	f7ff fff0 	bl	8003020 <__sinit_lock_acquire>
 8003040:	69a3      	ldr	r3, [r4, #24]
 8003042:	b11b      	cbz	r3, 800304c <__sinit+0x14>
 8003044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003048:	f7ff bff0 	b.w	800302c <__sinit_lock_release>
 800304c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003050:	6523      	str	r3, [r4, #80]	; 0x50
 8003052:	4b13      	ldr	r3, [pc, #76]	; (80030a0 <__sinit+0x68>)
 8003054:	4a13      	ldr	r2, [pc, #76]	; (80030a4 <__sinit+0x6c>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	62a2      	str	r2, [r4, #40]	; 0x28
 800305a:	42a3      	cmp	r3, r4
 800305c:	bf08      	it	eq
 800305e:	2301      	moveq	r3, #1
 8003060:	4620      	mov	r0, r4
 8003062:	bf08      	it	eq
 8003064:	61a3      	streq	r3, [r4, #24]
 8003066:	f000 f81f 	bl	80030a8 <__sfp>
 800306a:	6060      	str	r0, [r4, #4]
 800306c:	4620      	mov	r0, r4
 800306e:	f000 f81b 	bl	80030a8 <__sfp>
 8003072:	60a0      	str	r0, [r4, #8]
 8003074:	4620      	mov	r0, r4
 8003076:	f000 f817 	bl	80030a8 <__sfp>
 800307a:	2200      	movs	r2, #0
 800307c:	2104      	movs	r1, #4
 800307e:	60e0      	str	r0, [r4, #12]
 8003080:	6860      	ldr	r0, [r4, #4]
 8003082:	f7ff ff81 	bl	8002f88 <std>
 8003086:	2201      	movs	r2, #1
 8003088:	2109      	movs	r1, #9
 800308a:	68a0      	ldr	r0, [r4, #8]
 800308c:	f7ff ff7c 	bl	8002f88 <std>
 8003090:	2202      	movs	r2, #2
 8003092:	2112      	movs	r1, #18
 8003094:	68e0      	ldr	r0, [r4, #12]
 8003096:	f7ff ff77 	bl	8002f88 <std>
 800309a:	2301      	movs	r3, #1
 800309c:	61a3      	str	r3, [r4, #24]
 800309e:	e7d1      	b.n	8003044 <__sinit+0xc>
 80030a0:	08003e74 	.word	0x08003e74
 80030a4:	08002fd1 	.word	0x08002fd1

080030a8 <__sfp>:
 80030a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030aa:	4607      	mov	r7, r0
 80030ac:	f7ff ffac 	bl	8003008 <__sfp_lock_acquire>
 80030b0:	4b1e      	ldr	r3, [pc, #120]	; (800312c <__sfp+0x84>)
 80030b2:	681e      	ldr	r6, [r3, #0]
 80030b4:	69b3      	ldr	r3, [r6, #24]
 80030b6:	b913      	cbnz	r3, 80030be <__sfp+0x16>
 80030b8:	4630      	mov	r0, r6
 80030ba:	f7ff ffbd 	bl	8003038 <__sinit>
 80030be:	3648      	adds	r6, #72	; 0x48
 80030c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80030c4:	3b01      	subs	r3, #1
 80030c6:	d503      	bpl.n	80030d0 <__sfp+0x28>
 80030c8:	6833      	ldr	r3, [r6, #0]
 80030ca:	b30b      	cbz	r3, 8003110 <__sfp+0x68>
 80030cc:	6836      	ldr	r6, [r6, #0]
 80030ce:	e7f7      	b.n	80030c0 <__sfp+0x18>
 80030d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80030d4:	b9d5      	cbnz	r5, 800310c <__sfp+0x64>
 80030d6:	4b16      	ldr	r3, [pc, #88]	; (8003130 <__sfp+0x88>)
 80030d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80030dc:	60e3      	str	r3, [r4, #12]
 80030de:	6665      	str	r5, [r4, #100]	; 0x64
 80030e0:	f000 f847 	bl	8003172 <__retarget_lock_init_recursive>
 80030e4:	f7ff ff96 	bl	8003014 <__sfp_lock_release>
 80030e8:	2208      	movs	r2, #8
 80030ea:	4629      	mov	r1, r5
 80030ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80030f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80030f4:	6025      	str	r5, [r4, #0]
 80030f6:	61a5      	str	r5, [r4, #24]
 80030f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80030fc:	f7ff ff24 	bl	8002f48 <memset>
 8003100:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003104:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003108:	4620      	mov	r0, r4
 800310a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800310c:	3468      	adds	r4, #104	; 0x68
 800310e:	e7d9      	b.n	80030c4 <__sfp+0x1c>
 8003110:	2104      	movs	r1, #4
 8003112:	4638      	mov	r0, r7
 8003114:	f7ff ff62 	bl	8002fdc <__sfmoreglue>
 8003118:	4604      	mov	r4, r0
 800311a:	6030      	str	r0, [r6, #0]
 800311c:	2800      	cmp	r0, #0
 800311e:	d1d5      	bne.n	80030cc <__sfp+0x24>
 8003120:	f7ff ff78 	bl	8003014 <__sfp_lock_release>
 8003124:	230c      	movs	r3, #12
 8003126:	603b      	str	r3, [r7, #0]
 8003128:	e7ee      	b.n	8003108 <__sfp+0x60>
 800312a:	bf00      	nop
 800312c:	08003e74 	.word	0x08003e74
 8003130:	ffff0001 	.word	0xffff0001

08003134 <_fwalk_reent>:
 8003134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003138:	4606      	mov	r6, r0
 800313a:	4688      	mov	r8, r1
 800313c:	2700      	movs	r7, #0
 800313e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003142:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003146:	f1b9 0901 	subs.w	r9, r9, #1
 800314a:	d505      	bpl.n	8003158 <_fwalk_reent+0x24>
 800314c:	6824      	ldr	r4, [r4, #0]
 800314e:	2c00      	cmp	r4, #0
 8003150:	d1f7      	bne.n	8003142 <_fwalk_reent+0xe>
 8003152:	4638      	mov	r0, r7
 8003154:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003158:	89ab      	ldrh	r3, [r5, #12]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d907      	bls.n	800316e <_fwalk_reent+0x3a>
 800315e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003162:	3301      	adds	r3, #1
 8003164:	d003      	beq.n	800316e <_fwalk_reent+0x3a>
 8003166:	4629      	mov	r1, r5
 8003168:	4630      	mov	r0, r6
 800316a:	47c0      	blx	r8
 800316c:	4307      	orrs	r7, r0
 800316e:	3568      	adds	r5, #104	; 0x68
 8003170:	e7e9      	b.n	8003146 <_fwalk_reent+0x12>

08003172 <__retarget_lock_init_recursive>:
 8003172:	4770      	bx	lr

08003174 <__retarget_lock_acquire_recursive>:
 8003174:	4770      	bx	lr

08003176 <__retarget_lock_release_recursive>:
 8003176:	4770      	bx	lr

08003178 <_malloc_r>:
 8003178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800317a:	1ccd      	adds	r5, r1, #3
 800317c:	f025 0503 	bic.w	r5, r5, #3
 8003180:	3508      	adds	r5, #8
 8003182:	2d0c      	cmp	r5, #12
 8003184:	bf38      	it	cc
 8003186:	250c      	movcc	r5, #12
 8003188:	2d00      	cmp	r5, #0
 800318a:	4606      	mov	r6, r0
 800318c:	db01      	blt.n	8003192 <_malloc_r+0x1a>
 800318e:	42a9      	cmp	r1, r5
 8003190:	d903      	bls.n	800319a <_malloc_r+0x22>
 8003192:	230c      	movs	r3, #12
 8003194:	6033      	str	r3, [r6, #0]
 8003196:	2000      	movs	r0, #0
 8003198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800319a:	f000 fdb1 	bl	8003d00 <__malloc_lock>
 800319e:	4921      	ldr	r1, [pc, #132]	; (8003224 <_malloc_r+0xac>)
 80031a0:	680a      	ldr	r2, [r1, #0]
 80031a2:	4614      	mov	r4, r2
 80031a4:	b99c      	cbnz	r4, 80031ce <_malloc_r+0x56>
 80031a6:	4f20      	ldr	r7, [pc, #128]	; (8003228 <_malloc_r+0xb0>)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	b923      	cbnz	r3, 80031b6 <_malloc_r+0x3e>
 80031ac:	4621      	mov	r1, r4
 80031ae:	4630      	mov	r0, r6
 80031b0:	f000 fb2a 	bl	8003808 <_sbrk_r>
 80031b4:	6038      	str	r0, [r7, #0]
 80031b6:	4629      	mov	r1, r5
 80031b8:	4630      	mov	r0, r6
 80031ba:	f000 fb25 	bl	8003808 <_sbrk_r>
 80031be:	1c43      	adds	r3, r0, #1
 80031c0:	d123      	bne.n	800320a <_malloc_r+0x92>
 80031c2:	230c      	movs	r3, #12
 80031c4:	4630      	mov	r0, r6
 80031c6:	6033      	str	r3, [r6, #0]
 80031c8:	f000 fda0 	bl	8003d0c <__malloc_unlock>
 80031cc:	e7e3      	b.n	8003196 <_malloc_r+0x1e>
 80031ce:	6823      	ldr	r3, [r4, #0]
 80031d0:	1b5b      	subs	r3, r3, r5
 80031d2:	d417      	bmi.n	8003204 <_malloc_r+0x8c>
 80031d4:	2b0b      	cmp	r3, #11
 80031d6:	d903      	bls.n	80031e0 <_malloc_r+0x68>
 80031d8:	6023      	str	r3, [r4, #0]
 80031da:	441c      	add	r4, r3
 80031dc:	6025      	str	r5, [r4, #0]
 80031de:	e004      	b.n	80031ea <_malloc_r+0x72>
 80031e0:	6863      	ldr	r3, [r4, #4]
 80031e2:	42a2      	cmp	r2, r4
 80031e4:	bf0c      	ite	eq
 80031e6:	600b      	streq	r3, [r1, #0]
 80031e8:	6053      	strne	r3, [r2, #4]
 80031ea:	4630      	mov	r0, r6
 80031ec:	f000 fd8e 	bl	8003d0c <__malloc_unlock>
 80031f0:	f104 000b 	add.w	r0, r4, #11
 80031f4:	1d23      	adds	r3, r4, #4
 80031f6:	f020 0007 	bic.w	r0, r0, #7
 80031fa:	1ac2      	subs	r2, r0, r3
 80031fc:	d0cc      	beq.n	8003198 <_malloc_r+0x20>
 80031fe:	1a1b      	subs	r3, r3, r0
 8003200:	50a3      	str	r3, [r4, r2]
 8003202:	e7c9      	b.n	8003198 <_malloc_r+0x20>
 8003204:	4622      	mov	r2, r4
 8003206:	6864      	ldr	r4, [r4, #4]
 8003208:	e7cc      	b.n	80031a4 <_malloc_r+0x2c>
 800320a:	1cc4      	adds	r4, r0, #3
 800320c:	f024 0403 	bic.w	r4, r4, #3
 8003210:	42a0      	cmp	r0, r4
 8003212:	d0e3      	beq.n	80031dc <_malloc_r+0x64>
 8003214:	1a21      	subs	r1, r4, r0
 8003216:	4630      	mov	r0, r6
 8003218:	f000 faf6 	bl	8003808 <_sbrk_r>
 800321c:	3001      	adds	r0, #1
 800321e:	d1dd      	bne.n	80031dc <_malloc_r+0x64>
 8003220:	e7cf      	b.n	80031c2 <_malloc_r+0x4a>
 8003222:	bf00      	nop
 8003224:	20000120 	.word	0x20000120
 8003228:	20000124 	.word	0x20000124

0800322c <__sfputc_r>:
 800322c:	6893      	ldr	r3, [r2, #8]
 800322e:	b410      	push	{r4}
 8003230:	3b01      	subs	r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	6093      	str	r3, [r2, #8]
 8003236:	da07      	bge.n	8003248 <__sfputc_r+0x1c>
 8003238:	6994      	ldr	r4, [r2, #24]
 800323a:	42a3      	cmp	r3, r4
 800323c:	db01      	blt.n	8003242 <__sfputc_r+0x16>
 800323e:	290a      	cmp	r1, #10
 8003240:	d102      	bne.n	8003248 <__sfputc_r+0x1c>
 8003242:	bc10      	pop	{r4}
 8003244:	f000 bb34 	b.w	80038b0 <__swbuf_r>
 8003248:	6813      	ldr	r3, [r2, #0]
 800324a:	1c58      	adds	r0, r3, #1
 800324c:	6010      	str	r0, [r2, #0]
 800324e:	7019      	strb	r1, [r3, #0]
 8003250:	4608      	mov	r0, r1
 8003252:	bc10      	pop	{r4}
 8003254:	4770      	bx	lr

08003256 <__sfputs_r>:
 8003256:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003258:	4606      	mov	r6, r0
 800325a:	460f      	mov	r7, r1
 800325c:	4614      	mov	r4, r2
 800325e:	18d5      	adds	r5, r2, r3
 8003260:	42ac      	cmp	r4, r5
 8003262:	d101      	bne.n	8003268 <__sfputs_r+0x12>
 8003264:	2000      	movs	r0, #0
 8003266:	e007      	b.n	8003278 <__sfputs_r+0x22>
 8003268:	463a      	mov	r2, r7
 800326a:	4630      	mov	r0, r6
 800326c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003270:	f7ff ffdc 	bl	800322c <__sfputc_r>
 8003274:	1c43      	adds	r3, r0, #1
 8003276:	d1f3      	bne.n	8003260 <__sfputs_r+0xa>
 8003278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800327c <_vfiprintf_r>:
 800327c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003280:	460d      	mov	r5, r1
 8003282:	4614      	mov	r4, r2
 8003284:	4698      	mov	r8, r3
 8003286:	4606      	mov	r6, r0
 8003288:	b09d      	sub	sp, #116	; 0x74
 800328a:	b118      	cbz	r0, 8003294 <_vfiprintf_r+0x18>
 800328c:	6983      	ldr	r3, [r0, #24]
 800328e:	b90b      	cbnz	r3, 8003294 <_vfiprintf_r+0x18>
 8003290:	f7ff fed2 	bl	8003038 <__sinit>
 8003294:	4b89      	ldr	r3, [pc, #548]	; (80034bc <_vfiprintf_r+0x240>)
 8003296:	429d      	cmp	r5, r3
 8003298:	d11b      	bne.n	80032d2 <_vfiprintf_r+0x56>
 800329a:	6875      	ldr	r5, [r6, #4]
 800329c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800329e:	07d9      	lsls	r1, r3, #31
 80032a0:	d405      	bmi.n	80032ae <_vfiprintf_r+0x32>
 80032a2:	89ab      	ldrh	r3, [r5, #12]
 80032a4:	059a      	lsls	r2, r3, #22
 80032a6:	d402      	bmi.n	80032ae <_vfiprintf_r+0x32>
 80032a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80032aa:	f7ff ff63 	bl	8003174 <__retarget_lock_acquire_recursive>
 80032ae:	89ab      	ldrh	r3, [r5, #12]
 80032b0:	071b      	lsls	r3, r3, #28
 80032b2:	d501      	bpl.n	80032b8 <_vfiprintf_r+0x3c>
 80032b4:	692b      	ldr	r3, [r5, #16]
 80032b6:	b9eb      	cbnz	r3, 80032f4 <_vfiprintf_r+0x78>
 80032b8:	4629      	mov	r1, r5
 80032ba:	4630      	mov	r0, r6
 80032bc:	f000 fb5c 	bl	8003978 <__swsetup_r>
 80032c0:	b1c0      	cbz	r0, 80032f4 <_vfiprintf_r+0x78>
 80032c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80032c4:	07dc      	lsls	r4, r3, #31
 80032c6:	d50e      	bpl.n	80032e6 <_vfiprintf_r+0x6a>
 80032c8:	f04f 30ff 	mov.w	r0, #4294967295
 80032cc:	b01d      	add	sp, #116	; 0x74
 80032ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032d2:	4b7b      	ldr	r3, [pc, #492]	; (80034c0 <_vfiprintf_r+0x244>)
 80032d4:	429d      	cmp	r5, r3
 80032d6:	d101      	bne.n	80032dc <_vfiprintf_r+0x60>
 80032d8:	68b5      	ldr	r5, [r6, #8]
 80032da:	e7df      	b.n	800329c <_vfiprintf_r+0x20>
 80032dc:	4b79      	ldr	r3, [pc, #484]	; (80034c4 <_vfiprintf_r+0x248>)
 80032de:	429d      	cmp	r5, r3
 80032e0:	bf08      	it	eq
 80032e2:	68f5      	ldreq	r5, [r6, #12]
 80032e4:	e7da      	b.n	800329c <_vfiprintf_r+0x20>
 80032e6:	89ab      	ldrh	r3, [r5, #12]
 80032e8:	0598      	lsls	r0, r3, #22
 80032ea:	d4ed      	bmi.n	80032c8 <_vfiprintf_r+0x4c>
 80032ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80032ee:	f7ff ff42 	bl	8003176 <__retarget_lock_release_recursive>
 80032f2:	e7e9      	b.n	80032c8 <_vfiprintf_r+0x4c>
 80032f4:	2300      	movs	r3, #0
 80032f6:	9309      	str	r3, [sp, #36]	; 0x24
 80032f8:	2320      	movs	r3, #32
 80032fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80032fe:	2330      	movs	r3, #48	; 0x30
 8003300:	f04f 0901 	mov.w	r9, #1
 8003304:	f8cd 800c 	str.w	r8, [sp, #12]
 8003308:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80034c8 <_vfiprintf_r+0x24c>
 800330c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003310:	4623      	mov	r3, r4
 8003312:	469a      	mov	sl, r3
 8003314:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003318:	b10a      	cbz	r2, 800331e <_vfiprintf_r+0xa2>
 800331a:	2a25      	cmp	r2, #37	; 0x25
 800331c:	d1f9      	bne.n	8003312 <_vfiprintf_r+0x96>
 800331e:	ebba 0b04 	subs.w	fp, sl, r4
 8003322:	d00b      	beq.n	800333c <_vfiprintf_r+0xc0>
 8003324:	465b      	mov	r3, fp
 8003326:	4622      	mov	r2, r4
 8003328:	4629      	mov	r1, r5
 800332a:	4630      	mov	r0, r6
 800332c:	f7ff ff93 	bl	8003256 <__sfputs_r>
 8003330:	3001      	adds	r0, #1
 8003332:	f000 80aa 	beq.w	800348a <_vfiprintf_r+0x20e>
 8003336:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003338:	445a      	add	r2, fp
 800333a:	9209      	str	r2, [sp, #36]	; 0x24
 800333c:	f89a 3000 	ldrb.w	r3, [sl]
 8003340:	2b00      	cmp	r3, #0
 8003342:	f000 80a2 	beq.w	800348a <_vfiprintf_r+0x20e>
 8003346:	2300      	movs	r3, #0
 8003348:	f04f 32ff 	mov.w	r2, #4294967295
 800334c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003350:	f10a 0a01 	add.w	sl, sl, #1
 8003354:	9304      	str	r3, [sp, #16]
 8003356:	9307      	str	r3, [sp, #28]
 8003358:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800335c:	931a      	str	r3, [sp, #104]	; 0x68
 800335e:	4654      	mov	r4, sl
 8003360:	2205      	movs	r2, #5
 8003362:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003366:	4858      	ldr	r0, [pc, #352]	; (80034c8 <_vfiprintf_r+0x24c>)
 8003368:	f000 fcbc 	bl	8003ce4 <memchr>
 800336c:	9a04      	ldr	r2, [sp, #16]
 800336e:	b9d8      	cbnz	r0, 80033a8 <_vfiprintf_r+0x12c>
 8003370:	06d1      	lsls	r1, r2, #27
 8003372:	bf44      	itt	mi
 8003374:	2320      	movmi	r3, #32
 8003376:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800337a:	0713      	lsls	r3, r2, #28
 800337c:	bf44      	itt	mi
 800337e:	232b      	movmi	r3, #43	; 0x2b
 8003380:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003384:	f89a 3000 	ldrb.w	r3, [sl]
 8003388:	2b2a      	cmp	r3, #42	; 0x2a
 800338a:	d015      	beq.n	80033b8 <_vfiprintf_r+0x13c>
 800338c:	4654      	mov	r4, sl
 800338e:	2000      	movs	r0, #0
 8003390:	f04f 0c0a 	mov.w	ip, #10
 8003394:	9a07      	ldr	r2, [sp, #28]
 8003396:	4621      	mov	r1, r4
 8003398:	f811 3b01 	ldrb.w	r3, [r1], #1
 800339c:	3b30      	subs	r3, #48	; 0x30
 800339e:	2b09      	cmp	r3, #9
 80033a0:	d94e      	bls.n	8003440 <_vfiprintf_r+0x1c4>
 80033a2:	b1b0      	cbz	r0, 80033d2 <_vfiprintf_r+0x156>
 80033a4:	9207      	str	r2, [sp, #28]
 80033a6:	e014      	b.n	80033d2 <_vfiprintf_r+0x156>
 80033a8:	eba0 0308 	sub.w	r3, r0, r8
 80033ac:	fa09 f303 	lsl.w	r3, r9, r3
 80033b0:	4313      	orrs	r3, r2
 80033b2:	46a2      	mov	sl, r4
 80033b4:	9304      	str	r3, [sp, #16]
 80033b6:	e7d2      	b.n	800335e <_vfiprintf_r+0xe2>
 80033b8:	9b03      	ldr	r3, [sp, #12]
 80033ba:	1d19      	adds	r1, r3, #4
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	9103      	str	r1, [sp, #12]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	bfbb      	ittet	lt
 80033c4:	425b      	neglt	r3, r3
 80033c6:	f042 0202 	orrlt.w	r2, r2, #2
 80033ca:	9307      	strge	r3, [sp, #28]
 80033cc:	9307      	strlt	r3, [sp, #28]
 80033ce:	bfb8      	it	lt
 80033d0:	9204      	strlt	r2, [sp, #16]
 80033d2:	7823      	ldrb	r3, [r4, #0]
 80033d4:	2b2e      	cmp	r3, #46	; 0x2e
 80033d6:	d10c      	bne.n	80033f2 <_vfiprintf_r+0x176>
 80033d8:	7863      	ldrb	r3, [r4, #1]
 80033da:	2b2a      	cmp	r3, #42	; 0x2a
 80033dc:	d135      	bne.n	800344a <_vfiprintf_r+0x1ce>
 80033de:	9b03      	ldr	r3, [sp, #12]
 80033e0:	3402      	adds	r4, #2
 80033e2:	1d1a      	adds	r2, r3, #4
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	9203      	str	r2, [sp, #12]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	bfb8      	it	lt
 80033ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80033f0:	9305      	str	r3, [sp, #20]
 80033f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80034d8 <_vfiprintf_r+0x25c>
 80033f6:	2203      	movs	r2, #3
 80033f8:	4650      	mov	r0, sl
 80033fa:	7821      	ldrb	r1, [r4, #0]
 80033fc:	f000 fc72 	bl	8003ce4 <memchr>
 8003400:	b140      	cbz	r0, 8003414 <_vfiprintf_r+0x198>
 8003402:	2340      	movs	r3, #64	; 0x40
 8003404:	eba0 000a 	sub.w	r0, r0, sl
 8003408:	fa03 f000 	lsl.w	r0, r3, r0
 800340c:	9b04      	ldr	r3, [sp, #16]
 800340e:	3401      	adds	r4, #1
 8003410:	4303      	orrs	r3, r0
 8003412:	9304      	str	r3, [sp, #16]
 8003414:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003418:	2206      	movs	r2, #6
 800341a:	482c      	ldr	r0, [pc, #176]	; (80034cc <_vfiprintf_r+0x250>)
 800341c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003420:	f000 fc60 	bl	8003ce4 <memchr>
 8003424:	2800      	cmp	r0, #0
 8003426:	d03f      	beq.n	80034a8 <_vfiprintf_r+0x22c>
 8003428:	4b29      	ldr	r3, [pc, #164]	; (80034d0 <_vfiprintf_r+0x254>)
 800342a:	bb1b      	cbnz	r3, 8003474 <_vfiprintf_r+0x1f8>
 800342c:	9b03      	ldr	r3, [sp, #12]
 800342e:	3307      	adds	r3, #7
 8003430:	f023 0307 	bic.w	r3, r3, #7
 8003434:	3308      	adds	r3, #8
 8003436:	9303      	str	r3, [sp, #12]
 8003438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800343a:	443b      	add	r3, r7
 800343c:	9309      	str	r3, [sp, #36]	; 0x24
 800343e:	e767      	b.n	8003310 <_vfiprintf_r+0x94>
 8003440:	460c      	mov	r4, r1
 8003442:	2001      	movs	r0, #1
 8003444:	fb0c 3202 	mla	r2, ip, r2, r3
 8003448:	e7a5      	b.n	8003396 <_vfiprintf_r+0x11a>
 800344a:	2300      	movs	r3, #0
 800344c:	f04f 0c0a 	mov.w	ip, #10
 8003450:	4619      	mov	r1, r3
 8003452:	3401      	adds	r4, #1
 8003454:	9305      	str	r3, [sp, #20]
 8003456:	4620      	mov	r0, r4
 8003458:	f810 2b01 	ldrb.w	r2, [r0], #1
 800345c:	3a30      	subs	r2, #48	; 0x30
 800345e:	2a09      	cmp	r2, #9
 8003460:	d903      	bls.n	800346a <_vfiprintf_r+0x1ee>
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0c5      	beq.n	80033f2 <_vfiprintf_r+0x176>
 8003466:	9105      	str	r1, [sp, #20]
 8003468:	e7c3      	b.n	80033f2 <_vfiprintf_r+0x176>
 800346a:	4604      	mov	r4, r0
 800346c:	2301      	movs	r3, #1
 800346e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003472:	e7f0      	b.n	8003456 <_vfiprintf_r+0x1da>
 8003474:	ab03      	add	r3, sp, #12
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	462a      	mov	r2, r5
 800347a:	4630      	mov	r0, r6
 800347c:	4b15      	ldr	r3, [pc, #84]	; (80034d4 <_vfiprintf_r+0x258>)
 800347e:	a904      	add	r1, sp, #16
 8003480:	f3af 8000 	nop.w
 8003484:	4607      	mov	r7, r0
 8003486:	1c78      	adds	r0, r7, #1
 8003488:	d1d6      	bne.n	8003438 <_vfiprintf_r+0x1bc>
 800348a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800348c:	07d9      	lsls	r1, r3, #31
 800348e:	d405      	bmi.n	800349c <_vfiprintf_r+0x220>
 8003490:	89ab      	ldrh	r3, [r5, #12]
 8003492:	059a      	lsls	r2, r3, #22
 8003494:	d402      	bmi.n	800349c <_vfiprintf_r+0x220>
 8003496:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003498:	f7ff fe6d 	bl	8003176 <__retarget_lock_release_recursive>
 800349c:	89ab      	ldrh	r3, [r5, #12]
 800349e:	065b      	lsls	r3, r3, #25
 80034a0:	f53f af12 	bmi.w	80032c8 <_vfiprintf_r+0x4c>
 80034a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80034a6:	e711      	b.n	80032cc <_vfiprintf_r+0x50>
 80034a8:	ab03      	add	r3, sp, #12
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	462a      	mov	r2, r5
 80034ae:	4630      	mov	r0, r6
 80034b0:	4b08      	ldr	r3, [pc, #32]	; (80034d4 <_vfiprintf_r+0x258>)
 80034b2:	a904      	add	r1, sp, #16
 80034b4:	f000 f882 	bl	80035bc <_printf_i>
 80034b8:	e7e4      	b.n	8003484 <_vfiprintf_r+0x208>
 80034ba:	bf00      	nop
 80034bc:	08003e98 	.word	0x08003e98
 80034c0:	08003eb8 	.word	0x08003eb8
 80034c4:	08003e78 	.word	0x08003e78
 80034c8:	08003ed8 	.word	0x08003ed8
 80034cc:	08003ee2 	.word	0x08003ee2
 80034d0:	00000000 	.word	0x00000000
 80034d4:	08003257 	.word	0x08003257
 80034d8:	08003ede 	.word	0x08003ede

080034dc <_printf_common>:
 80034dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034e0:	4616      	mov	r6, r2
 80034e2:	4699      	mov	r9, r3
 80034e4:	688a      	ldr	r2, [r1, #8]
 80034e6:	690b      	ldr	r3, [r1, #16]
 80034e8:	4607      	mov	r7, r0
 80034ea:	4293      	cmp	r3, r2
 80034ec:	bfb8      	it	lt
 80034ee:	4613      	movlt	r3, r2
 80034f0:	6033      	str	r3, [r6, #0]
 80034f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80034f6:	460c      	mov	r4, r1
 80034f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80034fc:	b10a      	cbz	r2, 8003502 <_printf_common+0x26>
 80034fe:	3301      	adds	r3, #1
 8003500:	6033      	str	r3, [r6, #0]
 8003502:	6823      	ldr	r3, [r4, #0]
 8003504:	0699      	lsls	r1, r3, #26
 8003506:	bf42      	ittt	mi
 8003508:	6833      	ldrmi	r3, [r6, #0]
 800350a:	3302      	addmi	r3, #2
 800350c:	6033      	strmi	r3, [r6, #0]
 800350e:	6825      	ldr	r5, [r4, #0]
 8003510:	f015 0506 	ands.w	r5, r5, #6
 8003514:	d106      	bne.n	8003524 <_printf_common+0x48>
 8003516:	f104 0a19 	add.w	sl, r4, #25
 800351a:	68e3      	ldr	r3, [r4, #12]
 800351c:	6832      	ldr	r2, [r6, #0]
 800351e:	1a9b      	subs	r3, r3, r2
 8003520:	42ab      	cmp	r3, r5
 8003522:	dc28      	bgt.n	8003576 <_printf_common+0x9a>
 8003524:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003528:	1e13      	subs	r3, r2, #0
 800352a:	6822      	ldr	r2, [r4, #0]
 800352c:	bf18      	it	ne
 800352e:	2301      	movne	r3, #1
 8003530:	0692      	lsls	r2, r2, #26
 8003532:	d42d      	bmi.n	8003590 <_printf_common+0xb4>
 8003534:	4649      	mov	r1, r9
 8003536:	4638      	mov	r0, r7
 8003538:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800353c:	47c0      	blx	r8
 800353e:	3001      	adds	r0, #1
 8003540:	d020      	beq.n	8003584 <_printf_common+0xa8>
 8003542:	6823      	ldr	r3, [r4, #0]
 8003544:	68e5      	ldr	r5, [r4, #12]
 8003546:	f003 0306 	and.w	r3, r3, #6
 800354a:	2b04      	cmp	r3, #4
 800354c:	bf18      	it	ne
 800354e:	2500      	movne	r5, #0
 8003550:	6832      	ldr	r2, [r6, #0]
 8003552:	f04f 0600 	mov.w	r6, #0
 8003556:	68a3      	ldr	r3, [r4, #8]
 8003558:	bf08      	it	eq
 800355a:	1aad      	subeq	r5, r5, r2
 800355c:	6922      	ldr	r2, [r4, #16]
 800355e:	bf08      	it	eq
 8003560:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003564:	4293      	cmp	r3, r2
 8003566:	bfc4      	itt	gt
 8003568:	1a9b      	subgt	r3, r3, r2
 800356a:	18ed      	addgt	r5, r5, r3
 800356c:	341a      	adds	r4, #26
 800356e:	42b5      	cmp	r5, r6
 8003570:	d11a      	bne.n	80035a8 <_printf_common+0xcc>
 8003572:	2000      	movs	r0, #0
 8003574:	e008      	b.n	8003588 <_printf_common+0xac>
 8003576:	2301      	movs	r3, #1
 8003578:	4652      	mov	r2, sl
 800357a:	4649      	mov	r1, r9
 800357c:	4638      	mov	r0, r7
 800357e:	47c0      	blx	r8
 8003580:	3001      	adds	r0, #1
 8003582:	d103      	bne.n	800358c <_printf_common+0xb0>
 8003584:	f04f 30ff 	mov.w	r0, #4294967295
 8003588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800358c:	3501      	adds	r5, #1
 800358e:	e7c4      	b.n	800351a <_printf_common+0x3e>
 8003590:	2030      	movs	r0, #48	; 0x30
 8003592:	18e1      	adds	r1, r4, r3
 8003594:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800359e:	4422      	add	r2, r4
 80035a0:	3302      	adds	r3, #2
 80035a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80035a6:	e7c5      	b.n	8003534 <_printf_common+0x58>
 80035a8:	2301      	movs	r3, #1
 80035aa:	4622      	mov	r2, r4
 80035ac:	4649      	mov	r1, r9
 80035ae:	4638      	mov	r0, r7
 80035b0:	47c0      	blx	r8
 80035b2:	3001      	adds	r0, #1
 80035b4:	d0e6      	beq.n	8003584 <_printf_common+0xa8>
 80035b6:	3601      	adds	r6, #1
 80035b8:	e7d9      	b.n	800356e <_printf_common+0x92>
	...

080035bc <_printf_i>:
 80035bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80035c0:	460c      	mov	r4, r1
 80035c2:	7e27      	ldrb	r7, [r4, #24]
 80035c4:	4691      	mov	r9, r2
 80035c6:	2f78      	cmp	r7, #120	; 0x78
 80035c8:	4680      	mov	r8, r0
 80035ca:	469a      	mov	sl, r3
 80035cc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80035ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035d2:	d807      	bhi.n	80035e4 <_printf_i+0x28>
 80035d4:	2f62      	cmp	r7, #98	; 0x62
 80035d6:	d80a      	bhi.n	80035ee <_printf_i+0x32>
 80035d8:	2f00      	cmp	r7, #0
 80035da:	f000 80d9 	beq.w	8003790 <_printf_i+0x1d4>
 80035de:	2f58      	cmp	r7, #88	; 0x58
 80035e0:	f000 80a4 	beq.w	800372c <_printf_i+0x170>
 80035e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80035e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80035ec:	e03a      	b.n	8003664 <_printf_i+0xa8>
 80035ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80035f2:	2b15      	cmp	r3, #21
 80035f4:	d8f6      	bhi.n	80035e4 <_printf_i+0x28>
 80035f6:	a001      	add	r0, pc, #4	; (adr r0, 80035fc <_printf_i+0x40>)
 80035f8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80035fc:	08003655 	.word	0x08003655
 8003600:	08003669 	.word	0x08003669
 8003604:	080035e5 	.word	0x080035e5
 8003608:	080035e5 	.word	0x080035e5
 800360c:	080035e5 	.word	0x080035e5
 8003610:	080035e5 	.word	0x080035e5
 8003614:	08003669 	.word	0x08003669
 8003618:	080035e5 	.word	0x080035e5
 800361c:	080035e5 	.word	0x080035e5
 8003620:	080035e5 	.word	0x080035e5
 8003624:	080035e5 	.word	0x080035e5
 8003628:	08003777 	.word	0x08003777
 800362c:	08003699 	.word	0x08003699
 8003630:	08003759 	.word	0x08003759
 8003634:	080035e5 	.word	0x080035e5
 8003638:	080035e5 	.word	0x080035e5
 800363c:	08003799 	.word	0x08003799
 8003640:	080035e5 	.word	0x080035e5
 8003644:	08003699 	.word	0x08003699
 8003648:	080035e5 	.word	0x080035e5
 800364c:	080035e5 	.word	0x080035e5
 8003650:	08003761 	.word	0x08003761
 8003654:	680b      	ldr	r3, [r1, #0]
 8003656:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800365a:	1d1a      	adds	r2, r3, #4
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	600a      	str	r2, [r1, #0]
 8003660:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003664:	2301      	movs	r3, #1
 8003666:	e0a4      	b.n	80037b2 <_printf_i+0x1f6>
 8003668:	6825      	ldr	r5, [r4, #0]
 800366a:	6808      	ldr	r0, [r1, #0]
 800366c:	062e      	lsls	r6, r5, #24
 800366e:	f100 0304 	add.w	r3, r0, #4
 8003672:	d50a      	bpl.n	800368a <_printf_i+0xce>
 8003674:	6805      	ldr	r5, [r0, #0]
 8003676:	600b      	str	r3, [r1, #0]
 8003678:	2d00      	cmp	r5, #0
 800367a:	da03      	bge.n	8003684 <_printf_i+0xc8>
 800367c:	232d      	movs	r3, #45	; 0x2d
 800367e:	426d      	negs	r5, r5
 8003680:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003684:	230a      	movs	r3, #10
 8003686:	485e      	ldr	r0, [pc, #376]	; (8003800 <_printf_i+0x244>)
 8003688:	e019      	b.n	80036be <_printf_i+0x102>
 800368a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800368e:	6805      	ldr	r5, [r0, #0]
 8003690:	600b      	str	r3, [r1, #0]
 8003692:	bf18      	it	ne
 8003694:	b22d      	sxthne	r5, r5
 8003696:	e7ef      	b.n	8003678 <_printf_i+0xbc>
 8003698:	680b      	ldr	r3, [r1, #0]
 800369a:	6825      	ldr	r5, [r4, #0]
 800369c:	1d18      	adds	r0, r3, #4
 800369e:	6008      	str	r0, [r1, #0]
 80036a0:	0628      	lsls	r0, r5, #24
 80036a2:	d501      	bpl.n	80036a8 <_printf_i+0xec>
 80036a4:	681d      	ldr	r5, [r3, #0]
 80036a6:	e002      	b.n	80036ae <_printf_i+0xf2>
 80036a8:	0669      	lsls	r1, r5, #25
 80036aa:	d5fb      	bpl.n	80036a4 <_printf_i+0xe8>
 80036ac:	881d      	ldrh	r5, [r3, #0]
 80036ae:	2f6f      	cmp	r7, #111	; 0x6f
 80036b0:	bf0c      	ite	eq
 80036b2:	2308      	moveq	r3, #8
 80036b4:	230a      	movne	r3, #10
 80036b6:	4852      	ldr	r0, [pc, #328]	; (8003800 <_printf_i+0x244>)
 80036b8:	2100      	movs	r1, #0
 80036ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80036be:	6866      	ldr	r6, [r4, #4]
 80036c0:	2e00      	cmp	r6, #0
 80036c2:	bfa8      	it	ge
 80036c4:	6821      	ldrge	r1, [r4, #0]
 80036c6:	60a6      	str	r6, [r4, #8]
 80036c8:	bfa4      	itt	ge
 80036ca:	f021 0104 	bicge.w	r1, r1, #4
 80036ce:	6021      	strge	r1, [r4, #0]
 80036d0:	b90d      	cbnz	r5, 80036d6 <_printf_i+0x11a>
 80036d2:	2e00      	cmp	r6, #0
 80036d4:	d04d      	beq.n	8003772 <_printf_i+0x1b6>
 80036d6:	4616      	mov	r6, r2
 80036d8:	fbb5 f1f3 	udiv	r1, r5, r3
 80036dc:	fb03 5711 	mls	r7, r3, r1, r5
 80036e0:	5dc7      	ldrb	r7, [r0, r7]
 80036e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80036e6:	462f      	mov	r7, r5
 80036e8:	42bb      	cmp	r3, r7
 80036ea:	460d      	mov	r5, r1
 80036ec:	d9f4      	bls.n	80036d8 <_printf_i+0x11c>
 80036ee:	2b08      	cmp	r3, #8
 80036f0:	d10b      	bne.n	800370a <_printf_i+0x14e>
 80036f2:	6823      	ldr	r3, [r4, #0]
 80036f4:	07df      	lsls	r7, r3, #31
 80036f6:	d508      	bpl.n	800370a <_printf_i+0x14e>
 80036f8:	6923      	ldr	r3, [r4, #16]
 80036fa:	6861      	ldr	r1, [r4, #4]
 80036fc:	4299      	cmp	r1, r3
 80036fe:	bfde      	ittt	le
 8003700:	2330      	movle	r3, #48	; 0x30
 8003702:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003706:	f106 36ff 	addle.w	r6, r6, #4294967295
 800370a:	1b92      	subs	r2, r2, r6
 800370c:	6122      	str	r2, [r4, #16]
 800370e:	464b      	mov	r3, r9
 8003710:	4621      	mov	r1, r4
 8003712:	4640      	mov	r0, r8
 8003714:	f8cd a000 	str.w	sl, [sp]
 8003718:	aa03      	add	r2, sp, #12
 800371a:	f7ff fedf 	bl	80034dc <_printf_common>
 800371e:	3001      	adds	r0, #1
 8003720:	d14c      	bne.n	80037bc <_printf_i+0x200>
 8003722:	f04f 30ff 	mov.w	r0, #4294967295
 8003726:	b004      	add	sp, #16
 8003728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800372c:	4834      	ldr	r0, [pc, #208]	; (8003800 <_printf_i+0x244>)
 800372e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003732:	680e      	ldr	r6, [r1, #0]
 8003734:	6823      	ldr	r3, [r4, #0]
 8003736:	f856 5b04 	ldr.w	r5, [r6], #4
 800373a:	061f      	lsls	r7, r3, #24
 800373c:	600e      	str	r6, [r1, #0]
 800373e:	d514      	bpl.n	800376a <_printf_i+0x1ae>
 8003740:	07d9      	lsls	r1, r3, #31
 8003742:	bf44      	itt	mi
 8003744:	f043 0320 	orrmi.w	r3, r3, #32
 8003748:	6023      	strmi	r3, [r4, #0]
 800374a:	b91d      	cbnz	r5, 8003754 <_printf_i+0x198>
 800374c:	6823      	ldr	r3, [r4, #0]
 800374e:	f023 0320 	bic.w	r3, r3, #32
 8003752:	6023      	str	r3, [r4, #0]
 8003754:	2310      	movs	r3, #16
 8003756:	e7af      	b.n	80036b8 <_printf_i+0xfc>
 8003758:	6823      	ldr	r3, [r4, #0]
 800375a:	f043 0320 	orr.w	r3, r3, #32
 800375e:	6023      	str	r3, [r4, #0]
 8003760:	2378      	movs	r3, #120	; 0x78
 8003762:	4828      	ldr	r0, [pc, #160]	; (8003804 <_printf_i+0x248>)
 8003764:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003768:	e7e3      	b.n	8003732 <_printf_i+0x176>
 800376a:	065e      	lsls	r6, r3, #25
 800376c:	bf48      	it	mi
 800376e:	b2ad      	uxthmi	r5, r5
 8003770:	e7e6      	b.n	8003740 <_printf_i+0x184>
 8003772:	4616      	mov	r6, r2
 8003774:	e7bb      	b.n	80036ee <_printf_i+0x132>
 8003776:	680b      	ldr	r3, [r1, #0]
 8003778:	6826      	ldr	r6, [r4, #0]
 800377a:	1d1d      	adds	r5, r3, #4
 800377c:	6960      	ldr	r0, [r4, #20]
 800377e:	600d      	str	r5, [r1, #0]
 8003780:	0635      	lsls	r5, r6, #24
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	d501      	bpl.n	800378a <_printf_i+0x1ce>
 8003786:	6018      	str	r0, [r3, #0]
 8003788:	e002      	b.n	8003790 <_printf_i+0x1d4>
 800378a:	0671      	lsls	r1, r6, #25
 800378c:	d5fb      	bpl.n	8003786 <_printf_i+0x1ca>
 800378e:	8018      	strh	r0, [r3, #0]
 8003790:	2300      	movs	r3, #0
 8003792:	4616      	mov	r6, r2
 8003794:	6123      	str	r3, [r4, #16]
 8003796:	e7ba      	b.n	800370e <_printf_i+0x152>
 8003798:	680b      	ldr	r3, [r1, #0]
 800379a:	1d1a      	adds	r2, r3, #4
 800379c:	600a      	str	r2, [r1, #0]
 800379e:	681e      	ldr	r6, [r3, #0]
 80037a0:	2100      	movs	r1, #0
 80037a2:	4630      	mov	r0, r6
 80037a4:	6862      	ldr	r2, [r4, #4]
 80037a6:	f000 fa9d 	bl	8003ce4 <memchr>
 80037aa:	b108      	cbz	r0, 80037b0 <_printf_i+0x1f4>
 80037ac:	1b80      	subs	r0, r0, r6
 80037ae:	6060      	str	r0, [r4, #4]
 80037b0:	6863      	ldr	r3, [r4, #4]
 80037b2:	6123      	str	r3, [r4, #16]
 80037b4:	2300      	movs	r3, #0
 80037b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037ba:	e7a8      	b.n	800370e <_printf_i+0x152>
 80037bc:	4632      	mov	r2, r6
 80037be:	4649      	mov	r1, r9
 80037c0:	4640      	mov	r0, r8
 80037c2:	6923      	ldr	r3, [r4, #16]
 80037c4:	47d0      	blx	sl
 80037c6:	3001      	adds	r0, #1
 80037c8:	d0ab      	beq.n	8003722 <_printf_i+0x166>
 80037ca:	6823      	ldr	r3, [r4, #0]
 80037cc:	079b      	lsls	r3, r3, #30
 80037ce:	d413      	bmi.n	80037f8 <_printf_i+0x23c>
 80037d0:	68e0      	ldr	r0, [r4, #12]
 80037d2:	9b03      	ldr	r3, [sp, #12]
 80037d4:	4298      	cmp	r0, r3
 80037d6:	bfb8      	it	lt
 80037d8:	4618      	movlt	r0, r3
 80037da:	e7a4      	b.n	8003726 <_printf_i+0x16a>
 80037dc:	2301      	movs	r3, #1
 80037de:	4632      	mov	r2, r6
 80037e0:	4649      	mov	r1, r9
 80037e2:	4640      	mov	r0, r8
 80037e4:	47d0      	blx	sl
 80037e6:	3001      	adds	r0, #1
 80037e8:	d09b      	beq.n	8003722 <_printf_i+0x166>
 80037ea:	3501      	adds	r5, #1
 80037ec:	68e3      	ldr	r3, [r4, #12]
 80037ee:	9903      	ldr	r1, [sp, #12]
 80037f0:	1a5b      	subs	r3, r3, r1
 80037f2:	42ab      	cmp	r3, r5
 80037f4:	dcf2      	bgt.n	80037dc <_printf_i+0x220>
 80037f6:	e7eb      	b.n	80037d0 <_printf_i+0x214>
 80037f8:	2500      	movs	r5, #0
 80037fa:	f104 0619 	add.w	r6, r4, #25
 80037fe:	e7f5      	b.n	80037ec <_printf_i+0x230>
 8003800:	08003ee9 	.word	0x08003ee9
 8003804:	08003efa 	.word	0x08003efa

08003808 <_sbrk_r>:
 8003808:	b538      	push	{r3, r4, r5, lr}
 800380a:	2300      	movs	r3, #0
 800380c:	4d05      	ldr	r5, [pc, #20]	; (8003824 <_sbrk_r+0x1c>)
 800380e:	4604      	mov	r4, r0
 8003810:	4608      	mov	r0, r1
 8003812:	602b      	str	r3, [r5, #0]
 8003814:	f7fd f960 	bl	8000ad8 <_sbrk>
 8003818:	1c43      	adds	r3, r0, #1
 800381a:	d102      	bne.n	8003822 <_sbrk_r+0x1a>
 800381c:	682b      	ldr	r3, [r5, #0]
 800381e:	b103      	cbz	r3, 8003822 <_sbrk_r+0x1a>
 8003820:	6023      	str	r3, [r4, #0]
 8003822:	bd38      	pop	{r3, r4, r5, pc}
 8003824:	200001c8 	.word	0x200001c8

08003828 <__sread>:
 8003828:	b510      	push	{r4, lr}
 800382a:	460c      	mov	r4, r1
 800382c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003830:	f000 fabe 	bl	8003db0 <_read_r>
 8003834:	2800      	cmp	r0, #0
 8003836:	bfab      	itete	ge
 8003838:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800383a:	89a3      	ldrhlt	r3, [r4, #12]
 800383c:	181b      	addge	r3, r3, r0
 800383e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003842:	bfac      	ite	ge
 8003844:	6563      	strge	r3, [r4, #84]	; 0x54
 8003846:	81a3      	strhlt	r3, [r4, #12]
 8003848:	bd10      	pop	{r4, pc}

0800384a <__swrite>:
 800384a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800384e:	461f      	mov	r7, r3
 8003850:	898b      	ldrh	r3, [r1, #12]
 8003852:	4605      	mov	r5, r0
 8003854:	05db      	lsls	r3, r3, #23
 8003856:	460c      	mov	r4, r1
 8003858:	4616      	mov	r6, r2
 800385a:	d505      	bpl.n	8003868 <__swrite+0x1e>
 800385c:	2302      	movs	r3, #2
 800385e:	2200      	movs	r2, #0
 8003860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003864:	f000 f9c8 	bl	8003bf8 <_lseek_r>
 8003868:	89a3      	ldrh	r3, [r4, #12]
 800386a:	4632      	mov	r2, r6
 800386c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003870:	81a3      	strh	r3, [r4, #12]
 8003872:	4628      	mov	r0, r5
 8003874:	463b      	mov	r3, r7
 8003876:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800387a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800387e:	f000 b869 	b.w	8003954 <_write_r>

08003882 <__sseek>:
 8003882:	b510      	push	{r4, lr}
 8003884:	460c      	mov	r4, r1
 8003886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800388a:	f000 f9b5 	bl	8003bf8 <_lseek_r>
 800388e:	1c43      	adds	r3, r0, #1
 8003890:	89a3      	ldrh	r3, [r4, #12]
 8003892:	bf15      	itete	ne
 8003894:	6560      	strne	r0, [r4, #84]	; 0x54
 8003896:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800389a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800389e:	81a3      	strheq	r3, [r4, #12]
 80038a0:	bf18      	it	ne
 80038a2:	81a3      	strhne	r3, [r4, #12]
 80038a4:	bd10      	pop	{r4, pc}

080038a6 <__sclose>:
 80038a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038aa:	f000 b8d3 	b.w	8003a54 <_close_r>
	...

080038b0 <__swbuf_r>:
 80038b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038b2:	460e      	mov	r6, r1
 80038b4:	4614      	mov	r4, r2
 80038b6:	4605      	mov	r5, r0
 80038b8:	b118      	cbz	r0, 80038c2 <__swbuf_r+0x12>
 80038ba:	6983      	ldr	r3, [r0, #24]
 80038bc:	b90b      	cbnz	r3, 80038c2 <__swbuf_r+0x12>
 80038be:	f7ff fbbb 	bl	8003038 <__sinit>
 80038c2:	4b21      	ldr	r3, [pc, #132]	; (8003948 <__swbuf_r+0x98>)
 80038c4:	429c      	cmp	r4, r3
 80038c6:	d12b      	bne.n	8003920 <__swbuf_r+0x70>
 80038c8:	686c      	ldr	r4, [r5, #4]
 80038ca:	69a3      	ldr	r3, [r4, #24]
 80038cc:	60a3      	str	r3, [r4, #8]
 80038ce:	89a3      	ldrh	r3, [r4, #12]
 80038d0:	071a      	lsls	r2, r3, #28
 80038d2:	d52f      	bpl.n	8003934 <__swbuf_r+0x84>
 80038d4:	6923      	ldr	r3, [r4, #16]
 80038d6:	b36b      	cbz	r3, 8003934 <__swbuf_r+0x84>
 80038d8:	6923      	ldr	r3, [r4, #16]
 80038da:	6820      	ldr	r0, [r4, #0]
 80038dc:	b2f6      	uxtb	r6, r6
 80038de:	1ac0      	subs	r0, r0, r3
 80038e0:	6963      	ldr	r3, [r4, #20]
 80038e2:	4637      	mov	r7, r6
 80038e4:	4283      	cmp	r3, r0
 80038e6:	dc04      	bgt.n	80038f2 <__swbuf_r+0x42>
 80038e8:	4621      	mov	r1, r4
 80038ea:	4628      	mov	r0, r5
 80038ec:	f000 f948 	bl	8003b80 <_fflush_r>
 80038f0:	bb30      	cbnz	r0, 8003940 <__swbuf_r+0x90>
 80038f2:	68a3      	ldr	r3, [r4, #8]
 80038f4:	3001      	adds	r0, #1
 80038f6:	3b01      	subs	r3, #1
 80038f8:	60a3      	str	r3, [r4, #8]
 80038fa:	6823      	ldr	r3, [r4, #0]
 80038fc:	1c5a      	adds	r2, r3, #1
 80038fe:	6022      	str	r2, [r4, #0]
 8003900:	701e      	strb	r6, [r3, #0]
 8003902:	6963      	ldr	r3, [r4, #20]
 8003904:	4283      	cmp	r3, r0
 8003906:	d004      	beq.n	8003912 <__swbuf_r+0x62>
 8003908:	89a3      	ldrh	r3, [r4, #12]
 800390a:	07db      	lsls	r3, r3, #31
 800390c:	d506      	bpl.n	800391c <__swbuf_r+0x6c>
 800390e:	2e0a      	cmp	r6, #10
 8003910:	d104      	bne.n	800391c <__swbuf_r+0x6c>
 8003912:	4621      	mov	r1, r4
 8003914:	4628      	mov	r0, r5
 8003916:	f000 f933 	bl	8003b80 <_fflush_r>
 800391a:	b988      	cbnz	r0, 8003940 <__swbuf_r+0x90>
 800391c:	4638      	mov	r0, r7
 800391e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003920:	4b0a      	ldr	r3, [pc, #40]	; (800394c <__swbuf_r+0x9c>)
 8003922:	429c      	cmp	r4, r3
 8003924:	d101      	bne.n	800392a <__swbuf_r+0x7a>
 8003926:	68ac      	ldr	r4, [r5, #8]
 8003928:	e7cf      	b.n	80038ca <__swbuf_r+0x1a>
 800392a:	4b09      	ldr	r3, [pc, #36]	; (8003950 <__swbuf_r+0xa0>)
 800392c:	429c      	cmp	r4, r3
 800392e:	bf08      	it	eq
 8003930:	68ec      	ldreq	r4, [r5, #12]
 8003932:	e7ca      	b.n	80038ca <__swbuf_r+0x1a>
 8003934:	4621      	mov	r1, r4
 8003936:	4628      	mov	r0, r5
 8003938:	f000 f81e 	bl	8003978 <__swsetup_r>
 800393c:	2800      	cmp	r0, #0
 800393e:	d0cb      	beq.n	80038d8 <__swbuf_r+0x28>
 8003940:	f04f 37ff 	mov.w	r7, #4294967295
 8003944:	e7ea      	b.n	800391c <__swbuf_r+0x6c>
 8003946:	bf00      	nop
 8003948:	08003e98 	.word	0x08003e98
 800394c:	08003eb8 	.word	0x08003eb8
 8003950:	08003e78 	.word	0x08003e78

08003954 <_write_r>:
 8003954:	b538      	push	{r3, r4, r5, lr}
 8003956:	4604      	mov	r4, r0
 8003958:	4608      	mov	r0, r1
 800395a:	4611      	mov	r1, r2
 800395c:	2200      	movs	r2, #0
 800395e:	4d05      	ldr	r5, [pc, #20]	; (8003974 <_write_r+0x20>)
 8003960:	602a      	str	r2, [r5, #0]
 8003962:	461a      	mov	r2, r3
 8003964:	f7fc fef2 	bl	800074c <_write>
 8003968:	1c43      	adds	r3, r0, #1
 800396a:	d102      	bne.n	8003972 <_write_r+0x1e>
 800396c:	682b      	ldr	r3, [r5, #0]
 800396e:	b103      	cbz	r3, 8003972 <_write_r+0x1e>
 8003970:	6023      	str	r3, [r4, #0]
 8003972:	bd38      	pop	{r3, r4, r5, pc}
 8003974:	200001c8 	.word	0x200001c8

08003978 <__swsetup_r>:
 8003978:	4b32      	ldr	r3, [pc, #200]	; (8003a44 <__swsetup_r+0xcc>)
 800397a:	b570      	push	{r4, r5, r6, lr}
 800397c:	681d      	ldr	r5, [r3, #0]
 800397e:	4606      	mov	r6, r0
 8003980:	460c      	mov	r4, r1
 8003982:	b125      	cbz	r5, 800398e <__swsetup_r+0x16>
 8003984:	69ab      	ldr	r3, [r5, #24]
 8003986:	b913      	cbnz	r3, 800398e <__swsetup_r+0x16>
 8003988:	4628      	mov	r0, r5
 800398a:	f7ff fb55 	bl	8003038 <__sinit>
 800398e:	4b2e      	ldr	r3, [pc, #184]	; (8003a48 <__swsetup_r+0xd0>)
 8003990:	429c      	cmp	r4, r3
 8003992:	d10f      	bne.n	80039b4 <__swsetup_r+0x3c>
 8003994:	686c      	ldr	r4, [r5, #4]
 8003996:	89a3      	ldrh	r3, [r4, #12]
 8003998:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800399c:	0719      	lsls	r1, r3, #28
 800399e:	d42c      	bmi.n	80039fa <__swsetup_r+0x82>
 80039a0:	06dd      	lsls	r5, r3, #27
 80039a2:	d411      	bmi.n	80039c8 <__swsetup_r+0x50>
 80039a4:	2309      	movs	r3, #9
 80039a6:	6033      	str	r3, [r6, #0]
 80039a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80039ac:	f04f 30ff 	mov.w	r0, #4294967295
 80039b0:	81a3      	strh	r3, [r4, #12]
 80039b2:	e03e      	b.n	8003a32 <__swsetup_r+0xba>
 80039b4:	4b25      	ldr	r3, [pc, #148]	; (8003a4c <__swsetup_r+0xd4>)
 80039b6:	429c      	cmp	r4, r3
 80039b8:	d101      	bne.n	80039be <__swsetup_r+0x46>
 80039ba:	68ac      	ldr	r4, [r5, #8]
 80039bc:	e7eb      	b.n	8003996 <__swsetup_r+0x1e>
 80039be:	4b24      	ldr	r3, [pc, #144]	; (8003a50 <__swsetup_r+0xd8>)
 80039c0:	429c      	cmp	r4, r3
 80039c2:	bf08      	it	eq
 80039c4:	68ec      	ldreq	r4, [r5, #12]
 80039c6:	e7e6      	b.n	8003996 <__swsetup_r+0x1e>
 80039c8:	0758      	lsls	r0, r3, #29
 80039ca:	d512      	bpl.n	80039f2 <__swsetup_r+0x7a>
 80039cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80039ce:	b141      	cbz	r1, 80039e2 <__swsetup_r+0x6a>
 80039d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80039d4:	4299      	cmp	r1, r3
 80039d6:	d002      	beq.n	80039de <__swsetup_r+0x66>
 80039d8:	4630      	mov	r0, r6
 80039da:	f000 f99d 	bl	8003d18 <_free_r>
 80039de:	2300      	movs	r3, #0
 80039e0:	6363      	str	r3, [r4, #52]	; 0x34
 80039e2:	89a3      	ldrh	r3, [r4, #12]
 80039e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80039e8:	81a3      	strh	r3, [r4, #12]
 80039ea:	2300      	movs	r3, #0
 80039ec:	6063      	str	r3, [r4, #4]
 80039ee:	6923      	ldr	r3, [r4, #16]
 80039f0:	6023      	str	r3, [r4, #0]
 80039f2:	89a3      	ldrh	r3, [r4, #12]
 80039f4:	f043 0308 	orr.w	r3, r3, #8
 80039f8:	81a3      	strh	r3, [r4, #12]
 80039fa:	6923      	ldr	r3, [r4, #16]
 80039fc:	b94b      	cbnz	r3, 8003a12 <__swsetup_r+0x9a>
 80039fe:	89a3      	ldrh	r3, [r4, #12]
 8003a00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003a04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a08:	d003      	beq.n	8003a12 <__swsetup_r+0x9a>
 8003a0a:	4621      	mov	r1, r4
 8003a0c:	4630      	mov	r0, r6
 8003a0e:	f000 f929 	bl	8003c64 <__smakebuf_r>
 8003a12:	89a0      	ldrh	r0, [r4, #12]
 8003a14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003a18:	f010 0301 	ands.w	r3, r0, #1
 8003a1c:	d00a      	beq.n	8003a34 <__swsetup_r+0xbc>
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60a3      	str	r3, [r4, #8]
 8003a22:	6963      	ldr	r3, [r4, #20]
 8003a24:	425b      	negs	r3, r3
 8003a26:	61a3      	str	r3, [r4, #24]
 8003a28:	6923      	ldr	r3, [r4, #16]
 8003a2a:	b943      	cbnz	r3, 8003a3e <__swsetup_r+0xc6>
 8003a2c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003a30:	d1ba      	bne.n	80039a8 <__swsetup_r+0x30>
 8003a32:	bd70      	pop	{r4, r5, r6, pc}
 8003a34:	0781      	lsls	r1, r0, #30
 8003a36:	bf58      	it	pl
 8003a38:	6963      	ldrpl	r3, [r4, #20]
 8003a3a:	60a3      	str	r3, [r4, #8]
 8003a3c:	e7f4      	b.n	8003a28 <__swsetup_r+0xb0>
 8003a3e:	2000      	movs	r0, #0
 8003a40:	e7f7      	b.n	8003a32 <__swsetup_r+0xba>
 8003a42:	bf00      	nop
 8003a44:	20000048 	.word	0x20000048
 8003a48:	08003e98 	.word	0x08003e98
 8003a4c:	08003eb8 	.word	0x08003eb8
 8003a50:	08003e78 	.word	0x08003e78

08003a54 <_close_r>:
 8003a54:	b538      	push	{r3, r4, r5, lr}
 8003a56:	2300      	movs	r3, #0
 8003a58:	4d05      	ldr	r5, [pc, #20]	; (8003a70 <_close_r+0x1c>)
 8003a5a:	4604      	mov	r4, r0
 8003a5c:	4608      	mov	r0, r1
 8003a5e:	602b      	str	r3, [r5, #0]
 8003a60:	f7fd f809 	bl	8000a76 <_close>
 8003a64:	1c43      	adds	r3, r0, #1
 8003a66:	d102      	bne.n	8003a6e <_close_r+0x1a>
 8003a68:	682b      	ldr	r3, [r5, #0]
 8003a6a:	b103      	cbz	r3, 8003a6e <_close_r+0x1a>
 8003a6c:	6023      	str	r3, [r4, #0]
 8003a6e:	bd38      	pop	{r3, r4, r5, pc}
 8003a70:	200001c8 	.word	0x200001c8

08003a74 <__sflush_r>:
 8003a74:	898a      	ldrh	r2, [r1, #12]
 8003a76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a7a:	4605      	mov	r5, r0
 8003a7c:	0710      	lsls	r0, r2, #28
 8003a7e:	460c      	mov	r4, r1
 8003a80:	d458      	bmi.n	8003b34 <__sflush_r+0xc0>
 8003a82:	684b      	ldr	r3, [r1, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	dc05      	bgt.n	8003a94 <__sflush_r+0x20>
 8003a88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	dc02      	bgt.n	8003a94 <__sflush_r+0x20>
 8003a8e:	2000      	movs	r0, #0
 8003a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a96:	2e00      	cmp	r6, #0
 8003a98:	d0f9      	beq.n	8003a8e <__sflush_r+0x1a>
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003aa0:	682f      	ldr	r7, [r5, #0]
 8003aa2:	602b      	str	r3, [r5, #0]
 8003aa4:	d032      	beq.n	8003b0c <__sflush_r+0x98>
 8003aa6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003aa8:	89a3      	ldrh	r3, [r4, #12]
 8003aaa:	075a      	lsls	r2, r3, #29
 8003aac:	d505      	bpl.n	8003aba <__sflush_r+0x46>
 8003aae:	6863      	ldr	r3, [r4, #4]
 8003ab0:	1ac0      	subs	r0, r0, r3
 8003ab2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ab4:	b10b      	cbz	r3, 8003aba <__sflush_r+0x46>
 8003ab6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ab8:	1ac0      	subs	r0, r0, r3
 8003aba:	2300      	movs	r3, #0
 8003abc:	4602      	mov	r2, r0
 8003abe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ac0:	4628      	mov	r0, r5
 8003ac2:	6a21      	ldr	r1, [r4, #32]
 8003ac4:	47b0      	blx	r6
 8003ac6:	1c43      	adds	r3, r0, #1
 8003ac8:	89a3      	ldrh	r3, [r4, #12]
 8003aca:	d106      	bne.n	8003ada <__sflush_r+0x66>
 8003acc:	6829      	ldr	r1, [r5, #0]
 8003ace:	291d      	cmp	r1, #29
 8003ad0:	d82c      	bhi.n	8003b2c <__sflush_r+0xb8>
 8003ad2:	4a2a      	ldr	r2, [pc, #168]	; (8003b7c <__sflush_r+0x108>)
 8003ad4:	40ca      	lsrs	r2, r1
 8003ad6:	07d6      	lsls	r6, r2, #31
 8003ad8:	d528      	bpl.n	8003b2c <__sflush_r+0xb8>
 8003ada:	2200      	movs	r2, #0
 8003adc:	6062      	str	r2, [r4, #4]
 8003ade:	6922      	ldr	r2, [r4, #16]
 8003ae0:	04d9      	lsls	r1, r3, #19
 8003ae2:	6022      	str	r2, [r4, #0]
 8003ae4:	d504      	bpl.n	8003af0 <__sflush_r+0x7c>
 8003ae6:	1c42      	adds	r2, r0, #1
 8003ae8:	d101      	bne.n	8003aee <__sflush_r+0x7a>
 8003aea:	682b      	ldr	r3, [r5, #0]
 8003aec:	b903      	cbnz	r3, 8003af0 <__sflush_r+0x7c>
 8003aee:	6560      	str	r0, [r4, #84]	; 0x54
 8003af0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003af2:	602f      	str	r7, [r5, #0]
 8003af4:	2900      	cmp	r1, #0
 8003af6:	d0ca      	beq.n	8003a8e <__sflush_r+0x1a>
 8003af8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003afc:	4299      	cmp	r1, r3
 8003afe:	d002      	beq.n	8003b06 <__sflush_r+0x92>
 8003b00:	4628      	mov	r0, r5
 8003b02:	f000 f909 	bl	8003d18 <_free_r>
 8003b06:	2000      	movs	r0, #0
 8003b08:	6360      	str	r0, [r4, #52]	; 0x34
 8003b0a:	e7c1      	b.n	8003a90 <__sflush_r+0x1c>
 8003b0c:	6a21      	ldr	r1, [r4, #32]
 8003b0e:	2301      	movs	r3, #1
 8003b10:	4628      	mov	r0, r5
 8003b12:	47b0      	blx	r6
 8003b14:	1c41      	adds	r1, r0, #1
 8003b16:	d1c7      	bne.n	8003aa8 <__sflush_r+0x34>
 8003b18:	682b      	ldr	r3, [r5, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d0c4      	beq.n	8003aa8 <__sflush_r+0x34>
 8003b1e:	2b1d      	cmp	r3, #29
 8003b20:	d001      	beq.n	8003b26 <__sflush_r+0xb2>
 8003b22:	2b16      	cmp	r3, #22
 8003b24:	d101      	bne.n	8003b2a <__sflush_r+0xb6>
 8003b26:	602f      	str	r7, [r5, #0]
 8003b28:	e7b1      	b.n	8003a8e <__sflush_r+0x1a>
 8003b2a:	89a3      	ldrh	r3, [r4, #12]
 8003b2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b30:	81a3      	strh	r3, [r4, #12]
 8003b32:	e7ad      	b.n	8003a90 <__sflush_r+0x1c>
 8003b34:	690f      	ldr	r7, [r1, #16]
 8003b36:	2f00      	cmp	r7, #0
 8003b38:	d0a9      	beq.n	8003a8e <__sflush_r+0x1a>
 8003b3a:	0793      	lsls	r3, r2, #30
 8003b3c:	bf18      	it	ne
 8003b3e:	2300      	movne	r3, #0
 8003b40:	680e      	ldr	r6, [r1, #0]
 8003b42:	bf08      	it	eq
 8003b44:	694b      	ldreq	r3, [r1, #20]
 8003b46:	eba6 0807 	sub.w	r8, r6, r7
 8003b4a:	600f      	str	r7, [r1, #0]
 8003b4c:	608b      	str	r3, [r1, #8]
 8003b4e:	f1b8 0f00 	cmp.w	r8, #0
 8003b52:	dd9c      	ble.n	8003a8e <__sflush_r+0x1a>
 8003b54:	4643      	mov	r3, r8
 8003b56:	463a      	mov	r2, r7
 8003b58:	4628      	mov	r0, r5
 8003b5a:	6a21      	ldr	r1, [r4, #32]
 8003b5c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003b5e:	47b0      	blx	r6
 8003b60:	2800      	cmp	r0, #0
 8003b62:	dc06      	bgt.n	8003b72 <__sflush_r+0xfe>
 8003b64:	89a3      	ldrh	r3, [r4, #12]
 8003b66:	f04f 30ff 	mov.w	r0, #4294967295
 8003b6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b6e:	81a3      	strh	r3, [r4, #12]
 8003b70:	e78e      	b.n	8003a90 <__sflush_r+0x1c>
 8003b72:	4407      	add	r7, r0
 8003b74:	eba8 0800 	sub.w	r8, r8, r0
 8003b78:	e7e9      	b.n	8003b4e <__sflush_r+0xda>
 8003b7a:	bf00      	nop
 8003b7c:	20400001 	.word	0x20400001

08003b80 <_fflush_r>:
 8003b80:	b538      	push	{r3, r4, r5, lr}
 8003b82:	690b      	ldr	r3, [r1, #16]
 8003b84:	4605      	mov	r5, r0
 8003b86:	460c      	mov	r4, r1
 8003b88:	b913      	cbnz	r3, 8003b90 <_fflush_r+0x10>
 8003b8a:	2500      	movs	r5, #0
 8003b8c:	4628      	mov	r0, r5
 8003b8e:	bd38      	pop	{r3, r4, r5, pc}
 8003b90:	b118      	cbz	r0, 8003b9a <_fflush_r+0x1a>
 8003b92:	6983      	ldr	r3, [r0, #24]
 8003b94:	b90b      	cbnz	r3, 8003b9a <_fflush_r+0x1a>
 8003b96:	f7ff fa4f 	bl	8003038 <__sinit>
 8003b9a:	4b14      	ldr	r3, [pc, #80]	; (8003bec <_fflush_r+0x6c>)
 8003b9c:	429c      	cmp	r4, r3
 8003b9e:	d11b      	bne.n	8003bd8 <_fflush_r+0x58>
 8003ba0:	686c      	ldr	r4, [r5, #4]
 8003ba2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d0ef      	beq.n	8003b8a <_fflush_r+0xa>
 8003baa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003bac:	07d0      	lsls	r0, r2, #31
 8003bae:	d404      	bmi.n	8003bba <_fflush_r+0x3a>
 8003bb0:	0599      	lsls	r1, r3, #22
 8003bb2:	d402      	bmi.n	8003bba <_fflush_r+0x3a>
 8003bb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bb6:	f7ff fadd 	bl	8003174 <__retarget_lock_acquire_recursive>
 8003bba:	4628      	mov	r0, r5
 8003bbc:	4621      	mov	r1, r4
 8003bbe:	f7ff ff59 	bl	8003a74 <__sflush_r>
 8003bc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003bc4:	4605      	mov	r5, r0
 8003bc6:	07da      	lsls	r2, r3, #31
 8003bc8:	d4e0      	bmi.n	8003b8c <_fflush_r+0xc>
 8003bca:	89a3      	ldrh	r3, [r4, #12]
 8003bcc:	059b      	lsls	r3, r3, #22
 8003bce:	d4dd      	bmi.n	8003b8c <_fflush_r+0xc>
 8003bd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bd2:	f7ff fad0 	bl	8003176 <__retarget_lock_release_recursive>
 8003bd6:	e7d9      	b.n	8003b8c <_fflush_r+0xc>
 8003bd8:	4b05      	ldr	r3, [pc, #20]	; (8003bf0 <_fflush_r+0x70>)
 8003bda:	429c      	cmp	r4, r3
 8003bdc:	d101      	bne.n	8003be2 <_fflush_r+0x62>
 8003bde:	68ac      	ldr	r4, [r5, #8]
 8003be0:	e7df      	b.n	8003ba2 <_fflush_r+0x22>
 8003be2:	4b04      	ldr	r3, [pc, #16]	; (8003bf4 <_fflush_r+0x74>)
 8003be4:	429c      	cmp	r4, r3
 8003be6:	bf08      	it	eq
 8003be8:	68ec      	ldreq	r4, [r5, #12]
 8003bea:	e7da      	b.n	8003ba2 <_fflush_r+0x22>
 8003bec:	08003e98 	.word	0x08003e98
 8003bf0:	08003eb8 	.word	0x08003eb8
 8003bf4:	08003e78 	.word	0x08003e78

08003bf8 <_lseek_r>:
 8003bf8:	b538      	push	{r3, r4, r5, lr}
 8003bfa:	4604      	mov	r4, r0
 8003bfc:	4608      	mov	r0, r1
 8003bfe:	4611      	mov	r1, r2
 8003c00:	2200      	movs	r2, #0
 8003c02:	4d05      	ldr	r5, [pc, #20]	; (8003c18 <_lseek_r+0x20>)
 8003c04:	602a      	str	r2, [r5, #0]
 8003c06:	461a      	mov	r2, r3
 8003c08:	f7fc ff59 	bl	8000abe <_lseek>
 8003c0c:	1c43      	adds	r3, r0, #1
 8003c0e:	d102      	bne.n	8003c16 <_lseek_r+0x1e>
 8003c10:	682b      	ldr	r3, [r5, #0]
 8003c12:	b103      	cbz	r3, 8003c16 <_lseek_r+0x1e>
 8003c14:	6023      	str	r3, [r4, #0]
 8003c16:	bd38      	pop	{r3, r4, r5, pc}
 8003c18:	200001c8 	.word	0x200001c8

08003c1c <__swhatbuf_r>:
 8003c1c:	b570      	push	{r4, r5, r6, lr}
 8003c1e:	460e      	mov	r6, r1
 8003c20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c24:	4614      	mov	r4, r2
 8003c26:	2900      	cmp	r1, #0
 8003c28:	461d      	mov	r5, r3
 8003c2a:	b096      	sub	sp, #88	; 0x58
 8003c2c:	da07      	bge.n	8003c3e <__swhatbuf_r+0x22>
 8003c2e:	2300      	movs	r3, #0
 8003c30:	602b      	str	r3, [r5, #0]
 8003c32:	89b3      	ldrh	r3, [r6, #12]
 8003c34:	061a      	lsls	r2, r3, #24
 8003c36:	d410      	bmi.n	8003c5a <__swhatbuf_r+0x3e>
 8003c38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c3c:	e00e      	b.n	8003c5c <__swhatbuf_r+0x40>
 8003c3e:	466a      	mov	r2, sp
 8003c40:	f000 f8c8 	bl	8003dd4 <_fstat_r>
 8003c44:	2800      	cmp	r0, #0
 8003c46:	dbf2      	blt.n	8003c2e <__swhatbuf_r+0x12>
 8003c48:	9a01      	ldr	r2, [sp, #4]
 8003c4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003c4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003c52:	425a      	negs	r2, r3
 8003c54:	415a      	adcs	r2, r3
 8003c56:	602a      	str	r2, [r5, #0]
 8003c58:	e7ee      	b.n	8003c38 <__swhatbuf_r+0x1c>
 8003c5a:	2340      	movs	r3, #64	; 0x40
 8003c5c:	2000      	movs	r0, #0
 8003c5e:	6023      	str	r3, [r4, #0]
 8003c60:	b016      	add	sp, #88	; 0x58
 8003c62:	bd70      	pop	{r4, r5, r6, pc}

08003c64 <__smakebuf_r>:
 8003c64:	898b      	ldrh	r3, [r1, #12]
 8003c66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003c68:	079d      	lsls	r5, r3, #30
 8003c6a:	4606      	mov	r6, r0
 8003c6c:	460c      	mov	r4, r1
 8003c6e:	d507      	bpl.n	8003c80 <__smakebuf_r+0x1c>
 8003c70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003c74:	6023      	str	r3, [r4, #0]
 8003c76:	6123      	str	r3, [r4, #16]
 8003c78:	2301      	movs	r3, #1
 8003c7a:	6163      	str	r3, [r4, #20]
 8003c7c:	b002      	add	sp, #8
 8003c7e:	bd70      	pop	{r4, r5, r6, pc}
 8003c80:	466a      	mov	r2, sp
 8003c82:	ab01      	add	r3, sp, #4
 8003c84:	f7ff ffca 	bl	8003c1c <__swhatbuf_r>
 8003c88:	9900      	ldr	r1, [sp, #0]
 8003c8a:	4605      	mov	r5, r0
 8003c8c:	4630      	mov	r0, r6
 8003c8e:	f7ff fa73 	bl	8003178 <_malloc_r>
 8003c92:	b948      	cbnz	r0, 8003ca8 <__smakebuf_r+0x44>
 8003c94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c98:	059a      	lsls	r2, r3, #22
 8003c9a:	d4ef      	bmi.n	8003c7c <__smakebuf_r+0x18>
 8003c9c:	f023 0303 	bic.w	r3, r3, #3
 8003ca0:	f043 0302 	orr.w	r3, r3, #2
 8003ca4:	81a3      	strh	r3, [r4, #12]
 8003ca6:	e7e3      	b.n	8003c70 <__smakebuf_r+0xc>
 8003ca8:	4b0d      	ldr	r3, [pc, #52]	; (8003ce0 <__smakebuf_r+0x7c>)
 8003caa:	62b3      	str	r3, [r6, #40]	; 0x28
 8003cac:	89a3      	ldrh	r3, [r4, #12]
 8003cae:	6020      	str	r0, [r4, #0]
 8003cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cb4:	81a3      	strh	r3, [r4, #12]
 8003cb6:	9b00      	ldr	r3, [sp, #0]
 8003cb8:	6120      	str	r0, [r4, #16]
 8003cba:	6163      	str	r3, [r4, #20]
 8003cbc:	9b01      	ldr	r3, [sp, #4]
 8003cbe:	b15b      	cbz	r3, 8003cd8 <__smakebuf_r+0x74>
 8003cc0:	4630      	mov	r0, r6
 8003cc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cc6:	f000 f897 	bl	8003df8 <_isatty_r>
 8003cca:	b128      	cbz	r0, 8003cd8 <__smakebuf_r+0x74>
 8003ccc:	89a3      	ldrh	r3, [r4, #12]
 8003cce:	f023 0303 	bic.w	r3, r3, #3
 8003cd2:	f043 0301 	orr.w	r3, r3, #1
 8003cd6:	81a3      	strh	r3, [r4, #12]
 8003cd8:	89a0      	ldrh	r0, [r4, #12]
 8003cda:	4305      	orrs	r5, r0
 8003cdc:	81a5      	strh	r5, [r4, #12]
 8003cde:	e7cd      	b.n	8003c7c <__smakebuf_r+0x18>
 8003ce0:	08002fd1 	.word	0x08002fd1

08003ce4 <memchr>:
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	b510      	push	{r4, lr}
 8003ce8:	b2c9      	uxtb	r1, r1
 8003cea:	4402      	add	r2, r0
 8003cec:	4293      	cmp	r3, r2
 8003cee:	4618      	mov	r0, r3
 8003cf0:	d101      	bne.n	8003cf6 <memchr+0x12>
 8003cf2:	2000      	movs	r0, #0
 8003cf4:	e003      	b.n	8003cfe <memchr+0x1a>
 8003cf6:	7804      	ldrb	r4, [r0, #0]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	428c      	cmp	r4, r1
 8003cfc:	d1f6      	bne.n	8003cec <memchr+0x8>
 8003cfe:	bd10      	pop	{r4, pc}

08003d00 <__malloc_lock>:
 8003d00:	4801      	ldr	r0, [pc, #4]	; (8003d08 <__malloc_lock+0x8>)
 8003d02:	f7ff ba37 	b.w	8003174 <__retarget_lock_acquire_recursive>
 8003d06:	bf00      	nop
 8003d08:	200001c0 	.word	0x200001c0

08003d0c <__malloc_unlock>:
 8003d0c:	4801      	ldr	r0, [pc, #4]	; (8003d14 <__malloc_unlock+0x8>)
 8003d0e:	f7ff ba32 	b.w	8003176 <__retarget_lock_release_recursive>
 8003d12:	bf00      	nop
 8003d14:	200001c0 	.word	0x200001c0

08003d18 <_free_r>:
 8003d18:	b538      	push	{r3, r4, r5, lr}
 8003d1a:	4605      	mov	r5, r0
 8003d1c:	2900      	cmp	r1, #0
 8003d1e:	d043      	beq.n	8003da8 <_free_r+0x90>
 8003d20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d24:	1f0c      	subs	r4, r1, #4
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	bfb8      	it	lt
 8003d2a:	18e4      	addlt	r4, r4, r3
 8003d2c:	f7ff ffe8 	bl	8003d00 <__malloc_lock>
 8003d30:	4a1e      	ldr	r2, [pc, #120]	; (8003dac <_free_r+0x94>)
 8003d32:	6813      	ldr	r3, [r2, #0]
 8003d34:	4610      	mov	r0, r2
 8003d36:	b933      	cbnz	r3, 8003d46 <_free_r+0x2e>
 8003d38:	6063      	str	r3, [r4, #4]
 8003d3a:	6014      	str	r4, [r2, #0]
 8003d3c:	4628      	mov	r0, r5
 8003d3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d42:	f7ff bfe3 	b.w	8003d0c <__malloc_unlock>
 8003d46:	42a3      	cmp	r3, r4
 8003d48:	d90a      	bls.n	8003d60 <_free_r+0x48>
 8003d4a:	6821      	ldr	r1, [r4, #0]
 8003d4c:	1862      	adds	r2, r4, r1
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	bf01      	itttt	eq
 8003d52:	681a      	ldreq	r2, [r3, #0]
 8003d54:	685b      	ldreq	r3, [r3, #4]
 8003d56:	1852      	addeq	r2, r2, r1
 8003d58:	6022      	streq	r2, [r4, #0]
 8003d5a:	6063      	str	r3, [r4, #4]
 8003d5c:	6004      	str	r4, [r0, #0]
 8003d5e:	e7ed      	b.n	8003d3c <_free_r+0x24>
 8003d60:	461a      	mov	r2, r3
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	b10b      	cbz	r3, 8003d6a <_free_r+0x52>
 8003d66:	42a3      	cmp	r3, r4
 8003d68:	d9fa      	bls.n	8003d60 <_free_r+0x48>
 8003d6a:	6811      	ldr	r1, [r2, #0]
 8003d6c:	1850      	adds	r0, r2, r1
 8003d6e:	42a0      	cmp	r0, r4
 8003d70:	d10b      	bne.n	8003d8a <_free_r+0x72>
 8003d72:	6820      	ldr	r0, [r4, #0]
 8003d74:	4401      	add	r1, r0
 8003d76:	1850      	adds	r0, r2, r1
 8003d78:	4283      	cmp	r3, r0
 8003d7a:	6011      	str	r1, [r2, #0]
 8003d7c:	d1de      	bne.n	8003d3c <_free_r+0x24>
 8003d7e:	6818      	ldr	r0, [r3, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	4401      	add	r1, r0
 8003d84:	6011      	str	r1, [r2, #0]
 8003d86:	6053      	str	r3, [r2, #4]
 8003d88:	e7d8      	b.n	8003d3c <_free_r+0x24>
 8003d8a:	d902      	bls.n	8003d92 <_free_r+0x7a>
 8003d8c:	230c      	movs	r3, #12
 8003d8e:	602b      	str	r3, [r5, #0]
 8003d90:	e7d4      	b.n	8003d3c <_free_r+0x24>
 8003d92:	6820      	ldr	r0, [r4, #0]
 8003d94:	1821      	adds	r1, r4, r0
 8003d96:	428b      	cmp	r3, r1
 8003d98:	bf01      	itttt	eq
 8003d9a:	6819      	ldreq	r1, [r3, #0]
 8003d9c:	685b      	ldreq	r3, [r3, #4]
 8003d9e:	1809      	addeq	r1, r1, r0
 8003da0:	6021      	streq	r1, [r4, #0]
 8003da2:	6063      	str	r3, [r4, #4]
 8003da4:	6054      	str	r4, [r2, #4]
 8003da6:	e7c9      	b.n	8003d3c <_free_r+0x24>
 8003da8:	bd38      	pop	{r3, r4, r5, pc}
 8003daa:	bf00      	nop
 8003dac:	20000120 	.word	0x20000120

08003db0 <_read_r>:
 8003db0:	b538      	push	{r3, r4, r5, lr}
 8003db2:	4604      	mov	r4, r0
 8003db4:	4608      	mov	r0, r1
 8003db6:	4611      	mov	r1, r2
 8003db8:	2200      	movs	r2, #0
 8003dba:	4d05      	ldr	r5, [pc, #20]	; (8003dd0 <_read_r+0x20>)
 8003dbc:	602a      	str	r2, [r5, #0]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	f7fc fe3c 	bl	8000a3c <_read>
 8003dc4:	1c43      	adds	r3, r0, #1
 8003dc6:	d102      	bne.n	8003dce <_read_r+0x1e>
 8003dc8:	682b      	ldr	r3, [r5, #0]
 8003dca:	b103      	cbz	r3, 8003dce <_read_r+0x1e>
 8003dcc:	6023      	str	r3, [r4, #0]
 8003dce:	bd38      	pop	{r3, r4, r5, pc}
 8003dd0:	200001c8 	.word	0x200001c8

08003dd4 <_fstat_r>:
 8003dd4:	b538      	push	{r3, r4, r5, lr}
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	4d06      	ldr	r5, [pc, #24]	; (8003df4 <_fstat_r+0x20>)
 8003dda:	4604      	mov	r4, r0
 8003ddc:	4608      	mov	r0, r1
 8003dde:	4611      	mov	r1, r2
 8003de0:	602b      	str	r3, [r5, #0]
 8003de2:	f7fc fe53 	bl	8000a8c <_fstat>
 8003de6:	1c43      	adds	r3, r0, #1
 8003de8:	d102      	bne.n	8003df0 <_fstat_r+0x1c>
 8003dea:	682b      	ldr	r3, [r5, #0]
 8003dec:	b103      	cbz	r3, 8003df0 <_fstat_r+0x1c>
 8003dee:	6023      	str	r3, [r4, #0]
 8003df0:	bd38      	pop	{r3, r4, r5, pc}
 8003df2:	bf00      	nop
 8003df4:	200001c8 	.word	0x200001c8

08003df8 <_isatty_r>:
 8003df8:	b538      	push	{r3, r4, r5, lr}
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	4d05      	ldr	r5, [pc, #20]	; (8003e14 <_isatty_r+0x1c>)
 8003dfe:	4604      	mov	r4, r0
 8003e00:	4608      	mov	r0, r1
 8003e02:	602b      	str	r3, [r5, #0]
 8003e04:	f7fc fe51 	bl	8000aaa <_isatty>
 8003e08:	1c43      	adds	r3, r0, #1
 8003e0a:	d102      	bne.n	8003e12 <_isatty_r+0x1a>
 8003e0c:	682b      	ldr	r3, [r5, #0]
 8003e0e:	b103      	cbz	r3, 8003e12 <_isatty_r+0x1a>
 8003e10:	6023      	str	r3, [r4, #0]
 8003e12:	bd38      	pop	{r3, r4, r5, pc}
 8003e14:	200001c8 	.word	0x200001c8

08003e18 <_init>:
 8003e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e1a:	bf00      	nop
 8003e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e1e:	bc08      	pop	{r3}
 8003e20:	469e      	mov	lr, r3
 8003e22:	4770      	bx	lr

08003e24 <_fini>:
 8003e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e26:	bf00      	nop
 8003e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e2a:	bc08      	pop	{r3}
 8003e2c:	469e      	mov	lr, r3
 8003e2e:	4770      	bx	lr
