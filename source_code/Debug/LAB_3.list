
LAB_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000405c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08004168  08004168  00014168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004244  08004244  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  08004244  08004244  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004244  08004244  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004244  08004244  00014244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004248  08004248  00014248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800424c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  2000009c  080042e8  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  080042e8  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001065b  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002740  00000000  00000000  00030720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  00032e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca0  00000000  00000000  00033c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191b5  00000000  00000000  000348e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001052e  00000000  00000000  0004da95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a4d8  00000000  00000000  0005dfc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e849b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f10  00000000  00000000  000e84f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000009c 	.word	0x2000009c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004150 	.word	0x08004150

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a0 	.word	0x200000a0
 8000148:	08004150 	.word	0x08004150

0800014c <subKeyProcess>:

int TimeOutForKeyPress =  100;
int status_LED1 = 0;
int button1_flag = 0;

void subKeyProcess(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	button1_flag = 1;
 8000150:	4b03      	ldr	r3, [pc, #12]	; (8000160 <subKeyProcess+0x14>)
 8000152:	2201      	movs	r2, #1
 8000154:	601a      	str	r2, [r3, #0]
}
 8000156:	bf00      	nop
 8000158:	46bd      	mov	sp, r7
 800015a:	bc80      	pop	{r7}
 800015c:	4770      	bx	lr
 800015e:	bf00      	nop
 8000160:	200000b8 	.word	0x200000b8

08000164 <getKeyInput>:
void getKeyInput(){
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
  KeyReg2 = KeyReg1;
 8000168:	4b1f      	ldr	r3, [pc, #124]	; (80001e8 <getKeyInput+0x84>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	4a1f      	ldr	r2, [pc, #124]	; (80001ec <getKeyInput+0x88>)
 800016e:	6013      	str	r3, [r2, #0]
  KeyReg1 = KeyReg0;
 8000170:	4b1f      	ldr	r3, [pc, #124]	; (80001f0 <getKeyInput+0x8c>)
 8000172:	681b      	ldr	r3, [r3, #0]
 8000174:	4a1c      	ldr	r2, [pc, #112]	; (80001e8 <getKeyInput+0x84>)
 8000176:	6013      	str	r3, [r2, #0]
  KeyReg0 = HAL_GPIO_ReadPin(GPIOA, MODE_Pin);
 8000178:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800017c:	481d      	ldr	r0, [pc, #116]	; (80001f4 <getKeyInput+0x90>)
 800017e:	f001 fa59 	bl	8001634 <HAL_GPIO_ReadPin>
 8000182:	4603      	mov	r3, r0
 8000184:	461a      	mov	r2, r3
 8000186:	4b1a      	ldr	r3, [pc, #104]	; (80001f0 <getKeyInput+0x8c>)
 8000188:	601a      	str	r2, [r3, #0]
  if ((KeyReg1 == KeyReg0) && (KeyReg1 == KeyReg2)){
 800018a:	4b17      	ldr	r3, [pc, #92]	; (80001e8 <getKeyInput+0x84>)
 800018c:	681a      	ldr	r2, [r3, #0]
 800018e:	4b18      	ldr	r3, [pc, #96]	; (80001f0 <getKeyInput+0x8c>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	429a      	cmp	r2, r3
 8000194:	d125      	bne.n	80001e2 <getKeyInput+0x7e>
 8000196:	4b14      	ldr	r3, [pc, #80]	; (80001e8 <getKeyInput+0x84>)
 8000198:	681a      	ldr	r2, [r3, #0]
 800019a:	4b14      	ldr	r3, [pc, #80]	; (80001ec <getKeyInput+0x88>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	429a      	cmp	r2, r3
 80001a0:	d11f      	bne.n	80001e2 <getKeyInput+0x7e>
    if (KeyReg2 != KeyReg3){
 80001a2:	4b12      	ldr	r3, [pc, #72]	; (80001ec <getKeyInput+0x88>)
 80001a4:	681a      	ldr	r2, [r3, #0]
 80001a6:	4b14      	ldr	r3, [pc, #80]	; (80001f8 <getKeyInput+0x94>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	429a      	cmp	r2, r3
 80001ac:	d00d      	beq.n	80001ca <getKeyInput+0x66>
      KeyReg3 = KeyReg2;
 80001ae:	4b0f      	ldr	r3, [pc, #60]	; (80001ec <getKeyInput+0x88>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	4a11      	ldr	r2, [pc, #68]	; (80001f8 <getKeyInput+0x94>)
 80001b4:	6013      	str	r3, [r2, #0]

      if (KeyReg3 == PRESSED_STATE){
 80001b6:	4b10      	ldr	r3, [pc, #64]	; (80001f8 <getKeyInput+0x94>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d111      	bne.n	80001e2 <getKeyInput+0x7e>
        TimeOutForKeyPress = 100;
 80001be:	4b0f      	ldr	r3, [pc, #60]	; (80001fc <getKeyInput+0x98>)
 80001c0:	2264      	movs	r2, #100	; 0x64
 80001c2:	601a      	str	r2, [r3, #0]
        subKeyProcess();
 80001c4:	f7ff ffc2 	bl	800014c <subKeyProcess>
        if (TimeOutForKeyPress == 0){
          KeyReg3 = NORMAL_STATE;
        }
    }
  }
}
 80001c8:	e00b      	b.n	80001e2 <getKeyInput+0x7e>
       TimeOutForKeyPress --;
 80001ca:	4b0c      	ldr	r3, [pc, #48]	; (80001fc <getKeyInput+0x98>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	3b01      	subs	r3, #1
 80001d0:	4a0a      	ldr	r2, [pc, #40]	; (80001fc <getKeyInput+0x98>)
 80001d2:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress == 0){
 80001d4:	4b09      	ldr	r3, [pc, #36]	; (80001fc <getKeyInput+0x98>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d102      	bne.n	80001e2 <getKeyInput+0x7e>
          KeyReg3 = NORMAL_STATE;
 80001dc:	4b06      	ldr	r3, [pc, #24]	; (80001f8 <getKeyInput+0x94>)
 80001de:	2201      	movs	r2, #1
 80001e0:	601a      	str	r2, [r3, #0]
}
 80001e2:	bf00      	nop
 80001e4:	bd80      	pop	{r7, pc}
 80001e6:	bf00      	nop
 80001e8:	20000004 	.word	0x20000004
 80001ec:	20000008 	.word	0x20000008
 80001f0:	20000000 	.word	0x20000000
 80001f4:	40010800 	.word	0x40010800
 80001f8:	2000000c 	.word	0x2000000c
 80001fc:	20000010 	.word	0x20000010

08000200 <WhichButtonIsPressed>:
};

enum ButtonState buttonState = BUTTON_RELEASED;


int WhichButtonIsPressed() {
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	if (is_button_pressed(0)) return button_mode_is_pressed;
 8000204:	2000      	movs	r0, #0
 8000206:	f000 f90f 	bl	8000428 <is_button_pressed>
 800020a:	4603      	mov	r3, r0
 800020c:	2b00      	cmp	r3, #0
 800020e:	d001      	beq.n	8000214 <WhichButtonIsPressed+0x14>
 8000210:	2302      	movs	r3, #2
 8000212:	e018      	b.n	8000246 <WhichButtonIsPressed+0x46>
	if (is_button_pressed(1)) return button_add_is_pressed;
 8000214:	2001      	movs	r0, #1
 8000216:	f000 f907 	bl	8000428 <is_button_pressed>
 800021a:	4603      	mov	r3, r0
 800021c:	2b00      	cmp	r3, #0
 800021e:	d001      	beq.n	8000224 <WhichButtonIsPressed+0x24>
 8000220:	2303      	movs	r3, #3
 8000222:	e010      	b.n	8000246 <WhichButtonIsPressed+0x46>
	if (is_button_pressed(2)) return button_confirm_is_pressed;
 8000224:	2002      	movs	r0, #2
 8000226:	f000 f8ff 	bl	8000428 <is_button_pressed>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	d001      	beq.n	8000234 <WhichButtonIsPressed+0x34>
 8000230:	2304      	movs	r3, #4
 8000232:	e008      	b.n	8000246 <WhichButtonIsPressed+0x46>
	if (is_button_pressed(3)) return button_reset_is_pressed;
 8000234:	2003      	movs	r0, #3
 8000236:	f000 f8f7 	bl	8000428 <is_button_pressed>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d001      	beq.n	8000244 <WhichButtonIsPressed+0x44>
 8000240:	2305      	movs	r3, #5
 8000242:	e000      	b.n	8000246 <WhichButtonIsPressed+0x46>

	return 0; // none of these button is pressed
 8000244:	2300      	movs	r3, #0
}
 8000246:	4618      	mov	r0, r3
 8000248:	bd80      	pop	{r7, pc}
	...

0800024c <fsm_for_input_processing>:

void fsm_for_input_processing() {
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	switch(buttonState) {
 8000250:	4b33      	ldr	r3, [pc, #204]	; (8000320 <fsm_for_input_processing+0xd4>)
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	2b02      	cmp	r3, #2
 8000256:	d051      	beq.n	80002fc <fsm_for_input_processing+0xb0>
 8000258:	2b02      	cmp	r3, #2
 800025a:	dc59      	bgt.n	8000310 <fsm_for_input_processing+0xc4>
 800025c:	2b00      	cmp	r3, #0
 800025e:	d002      	beq.n	8000266 <fsm_for_input_processing+0x1a>
 8000260:	2b01      	cmp	r3, #1
 8000262:	d037      	beq.n	80002d4 <fsm_for_input_processing+0x88>
				buttonState = BUTTON_RELEASED;
			}
			// TODO
			break;
		default:
			break;
 8000264:	e054      	b.n	8000310 <fsm_for_input_processing+0xc4>
			if (WhichButtonIsPressed()) {
 8000266:	f7ff ffcb 	bl	8000200 <WhichButtonIsPressed>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d02d      	beq.n	80002cc <fsm_for_input_processing+0x80>
				buttonState = BUTTON_PRESSED;
 8000270:	4b2b      	ldr	r3, [pc, #172]	; (8000320 <fsm_for_input_processing+0xd4>)
 8000272:	2201      	movs	r2, #1
 8000274:	701a      	strb	r2, [r3, #0]
				switch(WhichButtonIsPressed()) {
 8000276:	f7ff ffc3 	bl	8000200 <WhichButtonIsPressed>
 800027a:	4603      	mov	r3, r0
 800027c:	3b02      	subs	r3, #2
 800027e:	2b03      	cmp	r3, #3
 8000280:	d820      	bhi.n	80002c4 <fsm_for_input_processing+0x78>
 8000282:	a201      	add	r2, pc, #4	; (adr r2, 8000288 <fsm_for_input_processing+0x3c>)
 8000284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000288:	08000299 	.word	0x08000299
 800028c:	080002d1 	.word	0x080002d1
 8000290:	080002d1 	.word	0x080002d1
 8000294:	080002d1 	.word	0x080002d1
						if (status >= 3) status = -1;
 8000298:	4b22      	ldr	r3, [pc, #136]	; (8000324 <fsm_for_input_processing+0xd8>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	2b02      	cmp	r3, #2
 800029e:	dd03      	ble.n	80002a8 <fsm_for_input_processing+0x5c>
 80002a0:	4b20      	ldr	r3, [pc, #128]	; (8000324 <fsm_for_input_processing+0xd8>)
 80002a2:	f04f 32ff 	mov.w	r2, #4294967295
 80002a6:	601a      	str	r2, [r3, #0]
						display7SEG(++status);
 80002a8:	4b1e      	ldr	r3, [pc, #120]	; (8000324 <fsm_for_input_processing+0xd8>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	3301      	adds	r3, #1
 80002ae:	4a1d      	ldr	r2, [pc, #116]	; (8000324 <fsm_for_input_processing+0xd8>)
 80002b0:	6013      	str	r3, [r2, #0]
 80002b2:	4b1c      	ldr	r3, [pc, #112]	; (8000324 <fsm_for_input_processing+0xd8>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	4618      	mov	r0, r3
 80002b8:	f000 f8f2 	bl	80004a0 <display7SEG>
						buttonState = BUTTON_PRESSED;
 80002bc:	4b18      	ldr	r3, [pc, #96]	; (8000320 <fsm_for_input_processing+0xd4>)
 80002be:	2201      	movs	r2, #1
 80002c0:	701a      	strb	r2, [r3, #0]
						break;
 80002c2:	e006      	b.n	80002d2 <fsm_for_input_processing+0x86>
					default: buttonState = BUTTON_RELEASED;
 80002c4:	4b16      	ldr	r3, [pc, #88]	; (8000320 <fsm_for_input_processing+0xd4>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	701a      	strb	r2, [r3, #0]
			break;
 80002ca:	e026      	b.n	800031a <fsm_for_input_processing+0xce>
			}
 80002cc:	bf00      	nop
 80002ce:	e024      	b.n	800031a <fsm_for_input_processing+0xce>
						break;
 80002d0:	bf00      	nop
			break;
 80002d2:	e022      	b.n	800031a <fsm_for_input_processing+0xce>
			if (!is_button_pressed(0)) {
 80002d4:	2000      	movs	r0, #0
 80002d6:	f000 f8a7 	bl	8000428 <is_button_pressed>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d103      	bne.n	80002e8 <fsm_for_input_processing+0x9c>
				buttonState = BUTTON_RELEASED;
 80002e0:	4b0f      	ldr	r3, [pc, #60]	; (8000320 <fsm_for_input_processing+0xd4>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	701a      	strb	r2, [r3, #0]
			break;
 80002e6:	e015      	b.n	8000314 <fsm_for_input_processing+0xc8>
				if (is_button_pressed_1s(0)) {
 80002e8:	2000      	movs	r0, #0
 80002ea:	f000 f8bf 	bl	800046c <is_button_pressed_1s>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d00f      	beq.n	8000314 <fsm_for_input_processing+0xc8>
					buttonState = BUTTON_PRESS_MORE_THAN_1S;
 80002f4:	4b0a      	ldr	r3, [pc, #40]	; (8000320 <fsm_for_input_processing+0xd4>)
 80002f6:	2202      	movs	r2, #2
 80002f8:	701a      	strb	r2, [r3, #0]
			break;
 80002fa:	e00b      	b.n	8000314 <fsm_for_input_processing+0xc8>
			if (!is_button_pressed(0)) {
 80002fc:	2000      	movs	r0, #0
 80002fe:	f000 f893 	bl	8000428 <is_button_pressed>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d107      	bne.n	8000318 <fsm_for_input_processing+0xcc>
				buttonState = BUTTON_RELEASED;
 8000308:	4b05      	ldr	r3, [pc, #20]	; (8000320 <fsm_for_input_processing+0xd4>)
 800030a:	2200      	movs	r2, #0
 800030c:	701a      	strb	r2, [r3, #0]
			break;
 800030e:	e003      	b.n	8000318 <fsm_for_input_processing+0xcc>
			break;
 8000310:	bf00      	nop
 8000312:	e002      	b.n	800031a <fsm_for_input_processing+0xce>
			break;
 8000314:	bf00      	nop
 8000316:	e000      	b.n	800031a <fsm_for_input_processing+0xce>
			break;
 8000318:	bf00      	nop
	}
}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	200000c0 	.word	0x200000c0
 8000324:	200000bc 	.word	0x200000bc

08000328 <button_reading>:
// we define counter for automatically increasing the value
// after the button is pressed more than 1 second .
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];


void button_reading(void) {
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 800032e:	2300      	movs	r3, #0
 8000330:	607b      	str	r3, [r7, #4]
 8000332:	e061      	b.n	80003f8 <button_reading+0xd0>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000334:	4a34      	ldr	r2, [pc, #208]	; (8000408 <button_reading+0xe0>)
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	4413      	add	r3, r2
 800033a:	7819      	ldrb	r1, [r3, #0]
 800033c:	4a33      	ldr	r2, [pc, #204]	; (800040c <button_reading+0xe4>)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	4413      	add	r3, r2
 8000342:	460a      	mov	r2, r1
 8000344:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(buttonPort[i], buttonPin[i]);
 8000346:	4a32      	ldr	r2, [pc, #200]	; (8000410 <button_reading+0xe8>)
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800034e:	4931      	ldr	r1, [pc, #196]	; (8000414 <button_reading+0xec>)
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000356:	4619      	mov	r1, r3
 8000358:	4610      	mov	r0, r2
 800035a:	f001 f96b 	bl	8001634 <HAL_GPIO_ReadPin>
 800035e:	4603      	mov	r3, r0
 8000360:	4619      	mov	r1, r3
 8000362:	4a29      	ldr	r2, [pc, #164]	; (8000408 <button_reading+0xe0>)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	4413      	add	r3, r2
 8000368:	460a      	mov	r2, r1
 800036a:	701a      	strb	r2, [r3, #0]

		if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) {
 800036c:	4a26      	ldr	r2, [pc, #152]	; (8000408 <button_reading+0xe0>)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4413      	add	r3, r2
 8000372:	781a      	ldrb	r2, [r3, #0]
 8000374:	4925      	ldr	r1, [pc, #148]	; (800040c <button_reading+0xe4>)
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	440b      	add	r3, r1
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	429a      	cmp	r2, r3
 800037e:	d138      	bne.n	80003f2 <button_reading+0xca>
			//valid input, can read now
			buttonBufferPrev[i] = buttonBuffer[i];
 8000380:	4a25      	ldr	r2, [pc, #148]	; (8000418 <button_reading+0xf0>)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	4413      	add	r3, r2
 8000386:	7819      	ldrb	r1, [r3, #0]
 8000388:	4a24      	ldr	r2, [pc, #144]	; (800041c <button_reading+0xf4>)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	4413      	add	r3, r2
 800038e:	460a      	mov	r2, r1
 8000390:	701a      	strb	r2, [r3, #0]
			buttonBuffer[i] = debounceButtonBuffer1[i];
 8000392:	4a1d      	ldr	r2, [pc, #116]	; (8000408 <button_reading+0xe0>)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4413      	add	r3, r2
 8000398:	7819      	ldrb	r1, [r3, #0]
 800039a:	4a1f      	ldr	r2, [pc, #124]	; (8000418 <button_reading+0xf0>)
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4413      	add	r3, r2
 80003a0:	460a      	mov	r2, r1
 80003a2:	701a      	strb	r2, [r3, #0]
			if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 80003a4:	4a1c      	ldr	r2, [pc, #112]	; (8000418 <button_reading+0xf0>)
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4413      	add	r3, r2
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d116      	bne.n	80003de <button_reading+0xb6>
				//toggle pin to validate
				//HAL_GPIO_TogglePin(BRESP_GPIO_Port, BRESP_Pin);
				//if a button is pressed , we start counting
				if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 80003b0:	4a1b      	ldr	r2, [pc, #108]	; (8000420 <button_reading+0xf8>)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003b8:	2b63      	cmp	r3, #99	; 0x63
 80003ba:	d80a      	bhi.n	80003d2 <button_reading+0xaa>
					counterForButtonPress1s[i]++;
 80003bc:	4a18      	ldr	r2, [pc, #96]	; (8000420 <button_reading+0xf8>)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003c4:	3301      	adds	r3, #1
 80003c6:	b299      	uxth	r1, r3
 80003c8:	4a15      	ldr	r2, [pc, #84]	; (8000420 <button_reading+0xf8>)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80003d0:	e00f      	b.n	80003f2 <button_reading+0xca>
				}

				else {
					//the flag is turned on when 1 second has passed
					//since the button is pressed.
					flagForButtonPress1s[i] = 1;
 80003d2:	4a14      	ldr	r2, [pc, #80]	; (8000424 <button_reading+0xfc>)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4413      	add	r3, r2
 80003d8:	2201      	movs	r2, #1
 80003da:	701a      	strb	r2, [r3, #0]
 80003dc:	e009      	b.n	80003f2 <button_reading+0xca>
				}
			}

			else {
				counterForButtonPress1s[i] = 0;
 80003de:	4a10      	ldr	r2, [pc, #64]	; (8000420 <button_reading+0xf8>)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	2100      	movs	r1, #0
 80003e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[i] = 0;
 80003e8:	4a0e      	ldr	r2, [pc, #56]	; (8000424 <button_reading+0xfc>)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	4413      	add	r3, r2
 80003ee:	2200      	movs	r2, #0
 80003f0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	3301      	adds	r3, #1
 80003f6:	607b      	str	r3, [r7, #4]
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	2b03      	cmp	r3, #3
 80003fc:	dd9a      	ble.n	8000334 <button_reading+0xc>
			}
		}
	}
}
 80003fe:	bf00      	nop
 8000400:	bf00      	nop
 8000402:	3708      	adds	r7, #8
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	200000cc 	.word	0x200000cc
 800040c:	200000d0 	.word	0x200000d0
 8000410:	20000014 	.word	0x20000014
 8000414:	20000024 	.word	0x20000024
 8000418:	200000c4 	.word	0x200000c4
 800041c:	200000c8 	.word	0x200000c8
 8000420:	200000d8 	.word	0x200000d8
 8000424:	200000d4 	.word	0x200000d4

08000428 <is_button_pressed>:
// Check if a button is pressed or not
unsigned char is_button_pressed(uint8_t index) {
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	71fb      	strb	r3, [r7, #7]
	if (index >= N0_OF_BUTTONS) return 0;
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	2b03      	cmp	r3, #3
 8000436:	d901      	bls.n	800043c <is_button_pressed+0x14>
 8000438:	2300      	movs	r3, #0
 800043a:	e00d      	b.n	8000458 <is_button_pressed+0x30>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED
 800043c:	79fb      	ldrb	r3, [r7, #7]
 800043e:	4a09      	ldr	r2, [pc, #36]	; (8000464 <is_button_pressed+0x3c>)
 8000440:	5cd3      	ldrb	r3, [r2, r3]
			&& buttonBufferPrev[index] == BUTTON_IS_RELEASED);
 8000442:	2b00      	cmp	r3, #0
 8000444:	d106      	bne.n	8000454 <is_button_pressed+0x2c>
 8000446:	79fb      	ldrb	r3, [r7, #7]
 8000448:	4a07      	ldr	r2, [pc, #28]	; (8000468 <is_button_pressed+0x40>)
 800044a:	5cd3      	ldrb	r3, [r2, r3]
 800044c:	2b01      	cmp	r3, #1
 800044e:	d101      	bne.n	8000454 <is_button_pressed+0x2c>
 8000450:	2301      	movs	r3, #1
 8000452:	e000      	b.n	8000456 <is_button_pressed+0x2e>
 8000454:	2300      	movs	r3, #0
 8000456:	b2db      	uxtb	r3, r3
}
 8000458:	4618      	mov	r0, r3
 800045a:	370c      	adds	r7, #12
 800045c:	46bd      	mov	sp, r7
 800045e:	bc80      	pop	{r7}
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	200000c4 	.word	0x200000c4
 8000468:	200000c8 	.word	0x200000c8

0800046c <is_button_pressed_1s>:

// Check for button is pressed more than a second or not
unsigned char is_button_pressed_1s (unsigned char index ) {
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
 8000472:	4603      	mov	r3, r0
 8000474:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS ) return 0xff ;
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	2b03      	cmp	r3, #3
 800047a:	d901      	bls.n	8000480 <is_button_pressed_1s+0x14>
 800047c:	23ff      	movs	r3, #255	; 0xff
 800047e:	e007      	b.n	8000490 <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1) ;
 8000480:	79fb      	ldrb	r3, [r7, #7]
 8000482:	4a06      	ldr	r2, [pc, #24]	; (800049c <is_button_pressed_1s+0x30>)
 8000484:	5cd3      	ldrb	r3, [r2, r3]
 8000486:	2b01      	cmp	r3, #1
 8000488:	bf0c      	ite	eq
 800048a:	2301      	moveq	r3, #1
 800048c:	2300      	movne	r3, #0
 800048e:	b2db      	uxtb	r3, r3
}
 8000490:	4618      	mov	r0, r3
 8000492:	370c      	adds	r7, #12
 8000494:	46bd      	mov	sp, r7
 8000496:	bc80      	pop	{r7}
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	200000d4 	.word	0x200000d4

080004a0 <display7SEG>:
 */


#include <main.h>
#include <led7seg.h>
void display7SEG(int num) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	2b09      	cmp	r3, #9
 80004ac:	f200 8180 	bhi.w	80007b0 <display7SEG+0x310>
 80004b0:	a201      	add	r2, pc, #4	; (adr r2, 80004b8 <display7SEG+0x18>)
 80004b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004b6:	bf00      	nop
 80004b8:	080004e1 	.word	0x080004e1
 80004bc:	08000529 	.word	0x08000529
 80004c0:	08000571 	.word	0x08000571
 80004c4:	080005b9 	.word	0x080005b9
 80004c8:	08000601 	.word	0x08000601
 80004cc:	08000649 	.word	0x08000649
 80004d0:	08000691 	.word	0x08000691
 80004d4:	080006d9 	.word	0x080006d9
 80004d8:	08000721 	.word	0x08000721
 80004dc:	08000769 	.word	0x08000769
  switch(num) {
	  case 0 : {
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 0);
 80004e0:	2200      	movs	r2, #0
 80004e2:	2101      	movs	r1, #1
 80004e4:	48c6      	ldr	r0, [pc, #792]	; (8000800 <display7SEG+0x360>)
 80004e6:	f001 f8bc 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 0);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2102      	movs	r1, #2
 80004ee:	48c4      	ldr	r0, [pc, #784]	; (8000800 <display7SEG+0x360>)
 80004f0:	f001 f8b7 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);
 80004f4:	2200      	movs	r2, #0
 80004f6:	2104      	movs	r1, #4
 80004f8:	48c1      	ldr	r0, [pc, #772]	; (8000800 <display7SEG+0x360>)
 80004fa:	f001 f8b2 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 0);
 80004fe:	2200      	movs	r2, #0
 8000500:	2108      	movs	r1, #8
 8000502:	48bf      	ldr	r0, [pc, #764]	; (8000800 <display7SEG+0x360>)
 8000504:	f001 f8ad 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 0);
 8000508:	2200      	movs	r2, #0
 800050a:	2110      	movs	r1, #16
 800050c:	48bc      	ldr	r0, [pc, #752]	; (8000800 <display7SEG+0x360>)
 800050e:	f001 f8a8 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 0);
 8000512:	2200      	movs	r2, #0
 8000514:	2120      	movs	r1, #32
 8000516:	48ba      	ldr	r0, [pc, #744]	; (8000800 <display7SEG+0x360>)
 8000518:	f001 f8a3 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 1);
 800051c:	2201      	movs	r2, #1
 800051e:	2140      	movs	r1, #64	; 0x40
 8000520:	48b7      	ldr	r0, [pc, #732]	; (8000800 <display7SEG+0x360>)
 8000522:	f001 f89e 	bl	8001662 <HAL_GPIO_WritePin>
		  break;
 8000526:	e167      	b.n	80007f8 <display7SEG+0x358>
	  }

	  case 1 : {
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 1);
 8000528:	2201      	movs	r2, #1
 800052a:	2101      	movs	r1, #1
 800052c:	48b4      	ldr	r0, [pc, #720]	; (8000800 <display7SEG+0x360>)
 800052e:	f001 f898 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 0);
 8000532:	2200      	movs	r2, #0
 8000534:	2102      	movs	r1, #2
 8000536:	48b2      	ldr	r0, [pc, #712]	; (8000800 <display7SEG+0x360>)
 8000538:	f001 f893 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);
 800053c:	2200      	movs	r2, #0
 800053e:	2104      	movs	r1, #4
 8000540:	48af      	ldr	r0, [pc, #700]	; (8000800 <display7SEG+0x360>)
 8000542:	f001 f88e 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 1);
 8000546:	2201      	movs	r2, #1
 8000548:	2108      	movs	r1, #8
 800054a:	48ad      	ldr	r0, [pc, #692]	; (8000800 <display7SEG+0x360>)
 800054c:	f001 f889 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 1);
 8000550:	2201      	movs	r2, #1
 8000552:	2110      	movs	r1, #16
 8000554:	48aa      	ldr	r0, [pc, #680]	; (8000800 <display7SEG+0x360>)
 8000556:	f001 f884 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 1);
 800055a:	2201      	movs	r2, #1
 800055c:	2120      	movs	r1, #32
 800055e:	48a8      	ldr	r0, [pc, #672]	; (8000800 <display7SEG+0x360>)
 8000560:	f001 f87f 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 1);
 8000564:	2201      	movs	r2, #1
 8000566:	2140      	movs	r1, #64	; 0x40
 8000568:	48a5      	ldr	r0, [pc, #660]	; (8000800 <display7SEG+0x360>)
 800056a:	f001 f87a 	bl	8001662 <HAL_GPIO_WritePin>
		  break;
 800056e:	e143      	b.n	80007f8 <display7SEG+0x358>
	  }

	  case 2 : {
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 0);
 8000570:	2200      	movs	r2, #0
 8000572:	2101      	movs	r1, #1
 8000574:	48a2      	ldr	r0, [pc, #648]	; (8000800 <display7SEG+0x360>)
 8000576:	f001 f874 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 0);
 800057a:	2200      	movs	r2, #0
 800057c:	2102      	movs	r1, #2
 800057e:	48a0      	ldr	r0, [pc, #640]	; (8000800 <display7SEG+0x360>)
 8000580:	f001 f86f 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 1);
 8000584:	2201      	movs	r2, #1
 8000586:	2104      	movs	r1, #4
 8000588:	489d      	ldr	r0, [pc, #628]	; (8000800 <display7SEG+0x360>)
 800058a:	f001 f86a 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 0);
 800058e:	2200      	movs	r2, #0
 8000590:	2108      	movs	r1, #8
 8000592:	489b      	ldr	r0, [pc, #620]	; (8000800 <display7SEG+0x360>)
 8000594:	f001 f865 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 0);
 8000598:	2200      	movs	r2, #0
 800059a:	2110      	movs	r1, #16
 800059c:	4898      	ldr	r0, [pc, #608]	; (8000800 <display7SEG+0x360>)
 800059e:	f001 f860 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 1);
 80005a2:	2201      	movs	r2, #1
 80005a4:	2120      	movs	r1, #32
 80005a6:	4896      	ldr	r0, [pc, #600]	; (8000800 <display7SEG+0x360>)
 80005a8:	f001 f85b 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 0);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2140      	movs	r1, #64	; 0x40
 80005b0:	4893      	ldr	r0, [pc, #588]	; (8000800 <display7SEG+0x360>)
 80005b2:	f001 f856 	bl	8001662 <HAL_GPIO_WritePin>
		  break;
 80005b6:	e11f      	b.n	80007f8 <display7SEG+0x358>
	  }
	  case 3 : {
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 0);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2101      	movs	r1, #1
 80005bc:	4890      	ldr	r0, [pc, #576]	; (8000800 <display7SEG+0x360>)
 80005be:	f001 f850 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 0);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2102      	movs	r1, #2
 80005c6:	488e      	ldr	r0, [pc, #568]	; (8000800 <display7SEG+0x360>)
 80005c8:	f001 f84b 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);
 80005cc:	2200      	movs	r2, #0
 80005ce:	2104      	movs	r1, #4
 80005d0:	488b      	ldr	r0, [pc, #556]	; (8000800 <display7SEG+0x360>)
 80005d2:	f001 f846 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 0);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2108      	movs	r1, #8
 80005da:	4889      	ldr	r0, [pc, #548]	; (8000800 <display7SEG+0x360>)
 80005dc:	f001 f841 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 1);
 80005e0:	2201      	movs	r2, #1
 80005e2:	2110      	movs	r1, #16
 80005e4:	4886      	ldr	r0, [pc, #536]	; (8000800 <display7SEG+0x360>)
 80005e6:	f001 f83c 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 1);
 80005ea:	2201      	movs	r2, #1
 80005ec:	2120      	movs	r1, #32
 80005ee:	4884      	ldr	r0, [pc, #528]	; (8000800 <display7SEG+0x360>)
 80005f0:	f001 f837 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 0);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2140      	movs	r1, #64	; 0x40
 80005f8:	4881      	ldr	r0, [pc, #516]	; (8000800 <display7SEG+0x360>)
 80005fa:	f001 f832 	bl	8001662 <HAL_GPIO_WritePin>
		  break;
 80005fe:	e0fb      	b.n	80007f8 <display7SEG+0x358>
	  }
	  case 4 : {
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 1);
 8000600:	2201      	movs	r2, #1
 8000602:	2101      	movs	r1, #1
 8000604:	487e      	ldr	r0, [pc, #504]	; (8000800 <display7SEG+0x360>)
 8000606:	f001 f82c 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 0);
 800060a:	2200      	movs	r2, #0
 800060c:	2102      	movs	r1, #2
 800060e:	487c      	ldr	r0, [pc, #496]	; (8000800 <display7SEG+0x360>)
 8000610:	f001 f827 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);
 8000614:	2200      	movs	r2, #0
 8000616:	2104      	movs	r1, #4
 8000618:	4879      	ldr	r0, [pc, #484]	; (8000800 <display7SEG+0x360>)
 800061a:	f001 f822 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 1);
 800061e:	2201      	movs	r2, #1
 8000620:	2108      	movs	r1, #8
 8000622:	4877      	ldr	r0, [pc, #476]	; (8000800 <display7SEG+0x360>)
 8000624:	f001 f81d 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 1);
 8000628:	2201      	movs	r2, #1
 800062a:	2110      	movs	r1, #16
 800062c:	4874      	ldr	r0, [pc, #464]	; (8000800 <display7SEG+0x360>)
 800062e:	f001 f818 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 0);
 8000632:	2200      	movs	r2, #0
 8000634:	2120      	movs	r1, #32
 8000636:	4872      	ldr	r0, [pc, #456]	; (8000800 <display7SEG+0x360>)
 8000638:	f001 f813 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 0);
 800063c:	2200      	movs	r2, #0
 800063e:	2140      	movs	r1, #64	; 0x40
 8000640:	486f      	ldr	r0, [pc, #444]	; (8000800 <display7SEG+0x360>)
 8000642:	f001 f80e 	bl	8001662 <HAL_GPIO_WritePin>
		  break;
 8000646:	e0d7      	b.n	80007f8 <display7SEG+0x358>
	  }
	  case 5 : {
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 0);
 8000648:	2200      	movs	r2, #0
 800064a:	2101      	movs	r1, #1
 800064c:	486c      	ldr	r0, [pc, #432]	; (8000800 <display7SEG+0x360>)
 800064e:	f001 f808 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 1);
 8000652:	2201      	movs	r2, #1
 8000654:	2102      	movs	r1, #2
 8000656:	486a      	ldr	r0, [pc, #424]	; (8000800 <display7SEG+0x360>)
 8000658:	f001 f803 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);
 800065c:	2200      	movs	r2, #0
 800065e:	2104      	movs	r1, #4
 8000660:	4867      	ldr	r0, [pc, #412]	; (8000800 <display7SEG+0x360>)
 8000662:	f000 fffe 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 0);
 8000666:	2200      	movs	r2, #0
 8000668:	2108      	movs	r1, #8
 800066a:	4865      	ldr	r0, [pc, #404]	; (8000800 <display7SEG+0x360>)
 800066c:	f000 fff9 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 1);
 8000670:	2201      	movs	r2, #1
 8000672:	2110      	movs	r1, #16
 8000674:	4862      	ldr	r0, [pc, #392]	; (8000800 <display7SEG+0x360>)
 8000676:	f000 fff4 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 0);
 800067a:	2200      	movs	r2, #0
 800067c:	2120      	movs	r1, #32
 800067e:	4860      	ldr	r0, [pc, #384]	; (8000800 <display7SEG+0x360>)
 8000680:	f000 ffef 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 0);
 8000684:	2200      	movs	r2, #0
 8000686:	2140      	movs	r1, #64	; 0x40
 8000688:	485d      	ldr	r0, [pc, #372]	; (8000800 <display7SEG+0x360>)
 800068a:	f000 ffea 	bl	8001662 <HAL_GPIO_WritePin>
		  break;
 800068e:	e0b3      	b.n	80007f8 <display7SEG+0x358>
	  }
	  case 6 : {
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 0);
 8000690:	2200      	movs	r2, #0
 8000692:	2101      	movs	r1, #1
 8000694:	485a      	ldr	r0, [pc, #360]	; (8000800 <display7SEG+0x360>)
 8000696:	f000 ffe4 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 1);
 800069a:	2201      	movs	r2, #1
 800069c:	2102      	movs	r1, #2
 800069e:	4858      	ldr	r0, [pc, #352]	; (8000800 <display7SEG+0x360>)
 80006a0:	f000 ffdf 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);
 80006a4:	2200      	movs	r2, #0
 80006a6:	2104      	movs	r1, #4
 80006a8:	4855      	ldr	r0, [pc, #340]	; (8000800 <display7SEG+0x360>)
 80006aa:	f000 ffda 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2108      	movs	r1, #8
 80006b2:	4853      	ldr	r0, [pc, #332]	; (8000800 <display7SEG+0x360>)
 80006b4:	f000 ffd5 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 0);
 80006b8:	2200      	movs	r2, #0
 80006ba:	2110      	movs	r1, #16
 80006bc:	4850      	ldr	r0, [pc, #320]	; (8000800 <display7SEG+0x360>)
 80006be:	f000 ffd0 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 0);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2120      	movs	r1, #32
 80006c6:	484e      	ldr	r0, [pc, #312]	; (8000800 <display7SEG+0x360>)
 80006c8:	f000 ffcb 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 0);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2140      	movs	r1, #64	; 0x40
 80006d0:	484b      	ldr	r0, [pc, #300]	; (8000800 <display7SEG+0x360>)
 80006d2:	f000 ffc6 	bl	8001662 <HAL_GPIO_WritePin>
		  break;
 80006d6:	e08f      	b.n	80007f8 <display7SEG+0x358>
	  }
	  case 7 : {
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 0);
 80006d8:	2200      	movs	r2, #0
 80006da:	2101      	movs	r1, #1
 80006dc:	4848      	ldr	r0, [pc, #288]	; (8000800 <display7SEG+0x360>)
 80006de:	f000 ffc0 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 0);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2102      	movs	r1, #2
 80006e6:	4846      	ldr	r0, [pc, #280]	; (8000800 <display7SEG+0x360>)
 80006e8:	f000 ffbb 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2104      	movs	r1, #4
 80006f0:	4843      	ldr	r0, [pc, #268]	; (8000800 <display7SEG+0x360>)
 80006f2:	f000 ffb6 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 1);
 80006f6:	2201      	movs	r2, #1
 80006f8:	2108      	movs	r1, #8
 80006fa:	4841      	ldr	r0, [pc, #260]	; (8000800 <display7SEG+0x360>)
 80006fc:	f000 ffb1 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 1);
 8000700:	2201      	movs	r2, #1
 8000702:	2110      	movs	r1, #16
 8000704:	483e      	ldr	r0, [pc, #248]	; (8000800 <display7SEG+0x360>)
 8000706:	f000 ffac 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 1);
 800070a:	2201      	movs	r2, #1
 800070c:	2120      	movs	r1, #32
 800070e:	483c      	ldr	r0, [pc, #240]	; (8000800 <display7SEG+0x360>)
 8000710:	f000 ffa7 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 1);
 8000714:	2201      	movs	r2, #1
 8000716:	2140      	movs	r1, #64	; 0x40
 8000718:	4839      	ldr	r0, [pc, #228]	; (8000800 <display7SEG+0x360>)
 800071a:	f000 ffa2 	bl	8001662 <HAL_GPIO_WritePin>
		  break;
 800071e:	e06b      	b.n	80007f8 <display7SEG+0x358>
	  }
	  case 8 : {
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 0);
 8000720:	2200      	movs	r2, #0
 8000722:	2101      	movs	r1, #1
 8000724:	4836      	ldr	r0, [pc, #216]	; (8000800 <display7SEG+0x360>)
 8000726:	f000 ff9c 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	2102      	movs	r1, #2
 800072e:	4834      	ldr	r0, [pc, #208]	; (8000800 <display7SEG+0x360>)
 8000730:	f000 ff97 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);
 8000734:	2200      	movs	r2, #0
 8000736:	2104      	movs	r1, #4
 8000738:	4831      	ldr	r0, [pc, #196]	; (8000800 <display7SEG+0x360>)
 800073a:	f000 ff92 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	2108      	movs	r1, #8
 8000742:	482f      	ldr	r0, [pc, #188]	; (8000800 <display7SEG+0x360>)
 8000744:	f000 ff8d 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 0);
 8000748:	2200      	movs	r2, #0
 800074a:	2110      	movs	r1, #16
 800074c:	482c      	ldr	r0, [pc, #176]	; (8000800 <display7SEG+0x360>)
 800074e:	f000 ff88 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	2120      	movs	r1, #32
 8000756:	482a      	ldr	r0, [pc, #168]	; (8000800 <display7SEG+0x360>)
 8000758:	f000 ff83 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 0);
 800075c:	2200      	movs	r2, #0
 800075e:	2140      	movs	r1, #64	; 0x40
 8000760:	4827      	ldr	r0, [pc, #156]	; (8000800 <display7SEG+0x360>)
 8000762:	f000 ff7e 	bl	8001662 <HAL_GPIO_WritePin>
		  break;
 8000766:	e047      	b.n	80007f8 <display7SEG+0x358>
	  }
	  case 9 : {
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 0);
 8000768:	2200      	movs	r2, #0
 800076a:	2101      	movs	r1, #1
 800076c:	4824      	ldr	r0, [pc, #144]	; (8000800 <display7SEG+0x360>)
 800076e:	f000 ff78 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 0);
 8000772:	2200      	movs	r2, #0
 8000774:	2102      	movs	r1, #2
 8000776:	4822      	ldr	r0, [pc, #136]	; (8000800 <display7SEG+0x360>)
 8000778:	f000 ff73 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);
 800077c:	2200      	movs	r2, #0
 800077e:	2104      	movs	r1, #4
 8000780:	481f      	ldr	r0, [pc, #124]	; (8000800 <display7SEG+0x360>)
 8000782:	f000 ff6e 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	2108      	movs	r1, #8
 800078a:	481d      	ldr	r0, [pc, #116]	; (8000800 <display7SEG+0x360>)
 800078c:	f000 ff69 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 1);
 8000790:	2201      	movs	r2, #1
 8000792:	2110      	movs	r1, #16
 8000794:	481a      	ldr	r0, [pc, #104]	; (8000800 <display7SEG+0x360>)
 8000796:	f000 ff64 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2120      	movs	r1, #32
 800079e:	4818      	ldr	r0, [pc, #96]	; (8000800 <display7SEG+0x360>)
 80007a0:	f000 ff5f 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 0);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2140      	movs	r1, #64	; 0x40
 80007a8:	4815      	ldr	r0, [pc, #84]	; (8000800 <display7SEG+0x360>)
 80007aa:	f000 ff5a 	bl	8001662 <HAL_GPIO_WritePin>
		  break;
 80007ae:	e023      	b.n	80007f8 <display7SEG+0x358>
	  }

	  default : {
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 1);
 80007b0:	2201      	movs	r2, #1
 80007b2:	2101      	movs	r1, #1
 80007b4:	4812      	ldr	r0, [pc, #72]	; (8000800 <display7SEG+0x360>)
 80007b6:	f000 ff54 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 1);
 80007ba:	2201      	movs	r2, #1
 80007bc:	2102      	movs	r1, #2
 80007be:	4810      	ldr	r0, [pc, #64]	; (8000800 <display7SEG+0x360>)
 80007c0:	f000 ff4f 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 1);
 80007c4:	2201      	movs	r2, #1
 80007c6:	2104      	movs	r1, #4
 80007c8:	480d      	ldr	r0, [pc, #52]	; (8000800 <display7SEG+0x360>)
 80007ca:	f000 ff4a 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 1);
 80007ce:	2201      	movs	r2, #1
 80007d0:	2108      	movs	r1, #8
 80007d2:	480b      	ldr	r0, [pc, #44]	; (8000800 <display7SEG+0x360>)
 80007d4:	f000 ff45 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 1);
 80007d8:	2201      	movs	r2, #1
 80007da:	2110      	movs	r1, #16
 80007dc:	4808      	ldr	r0, [pc, #32]	; (8000800 <display7SEG+0x360>)
 80007de:	f000 ff40 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 1);
 80007e2:	2201      	movs	r2, #1
 80007e4:	2120      	movs	r1, #32
 80007e6:	4806      	ldr	r0, [pc, #24]	; (8000800 <display7SEG+0x360>)
 80007e8:	f000 ff3b 	bl	8001662 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 1);
 80007ec:	2201      	movs	r2, #1
 80007ee:	2140      	movs	r1, #64	; 0x40
 80007f0:	4803      	ldr	r0, [pc, #12]	; (8000800 <display7SEG+0x360>)
 80007f2:	f000 ff36 	bl	8001662 <HAL_GPIO_WritePin>
		  break;
 80007f6:	bf00      	nop
	  }
  }
}
 80007f8:	bf00      	nop
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40010c00 	.word	0x40010c00

08000804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000808:	f000 fb78 	bl	8000efc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800080c:	f000 f81e 	bl	800084c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000810:	f000 f8ce 	bl	80009b0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000814:	f000 f856 	bl	80008c4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000818:	f000 f8a0 	bl	800095c <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_for_input_processing();
 800081c:	f7ff fd16 	bl	800024c <fsm_for_input_processing>
	  	  display7SEG(status);
 8000820:	4b08      	ldr	r3, [pc, #32]	; (8000844 <main+0x40>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff fe3b 	bl	80004a0 <display7SEG>

	  	  if (WhichButtonIsPressed()) {
 800082a:	f7ff fce9 	bl	8000200 <WhichButtonIsPressed>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d0f3      	beq.n	800081c <main+0x18>
	  		  printf("Current mode is: %d\r\n", status);
 8000834:	4b03      	ldr	r3, [pc, #12]	; (8000844 <main+0x40>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4619      	mov	r1, r3
 800083a:	4803      	ldr	r0, [pc, #12]	; (8000848 <main+0x44>)
 800083c:	f002 fd28 	bl	8003290 <iprintf>
	  fsm_for_input_processing();
 8000840:	e7ec      	b.n	800081c <main+0x18>
 8000842:	bf00      	nop
 8000844:	200000bc 	.word	0x200000bc
 8000848:	08004168 	.word	0x08004168

0800084c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b090      	sub	sp, #64	; 0x40
 8000850:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000852:	f107 0318 	add.w	r3, r7, #24
 8000856:	2228      	movs	r2, #40	; 0x28
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f002 fd10 	bl	8003280 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800086e:	2302      	movs	r3, #2
 8000870:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000872:	2301      	movs	r3, #1
 8000874:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000876:	2310      	movs	r3, #16
 8000878:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800087a:	2300      	movs	r3, #0
 800087c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800087e:	f107 0318 	add.w	r3, r7, #24
 8000882:	4618      	mov	r0, r3
 8000884:	f000 ff06 	bl	8001694 <HAL_RCC_OscConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800088e:	f000 f8f3 	bl	8000a78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000892:	230f      	movs	r3, #15
 8000894:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800089e:	2300      	movs	r3, #0
 80008a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008a2:	2300      	movs	r3, #0
 80008a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f001 f972 	bl	8001b94 <HAL_RCC_ClockConfig>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80008b6:	f000 f8df 	bl	8000a78 <Error_Handler>
  }
}
 80008ba:	bf00      	nop
 80008bc:	3740      	adds	r7, #64	; 0x40
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ca:	f107 0308 	add.w	r3, r7, #8
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d8:	463b      	mov	r3, r7
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008e0:	4b1d      	ldr	r3, [pc, #116]	; (8000958 <MX_TIM2_Init+0x94>)
 80008e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80008e8:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <MX_TIM2_Init+0x94>)
 80008ea:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80008ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f0:	4b19      	ldr	r3, [pc, #100]	; (8000958 <MX_TIM2_Init+0x94>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80008f6:	4b18      	ldr	r3, [pc, #96]	; (8000958 <MX_TIM2_Init+0x94>)
 80008f8:	2209      	movs	r2, #9
 80008fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008fc:	4b16      	ldr	r3, [pc, #88]	; (8000958 <MX_TIM2_Init+0x94>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000902:	4b15      	ldr	r3, [pc, #84]	; (8000958 <MX_TIM2_Init+0x94>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000908:	4813      	ldr	r0, [pc, #76]	; (8000958 <MX_TIM2_Init+0x94>)
 800090a:	f001 fad1 	bl	8001eb0 <HAL_TIM_Base_Init>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000914:	f000 f8b0 	bl	8000a78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000918:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800091c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800091e:	f107 0308 	add.w	r3, r7, #8
 8000922:	4619      	mov	r1, r3
 8000924:	480c      	ldr	r0, [pc, #48]	; (8000958 <MX_TIM2_Init+0x94>)
 8000926:	f001 fc1a 	bl	800215e <HAL_TIM_ConfigClockSource>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000930:	f000 f8a2 	bl	8000a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000934:	2300      	movs	r3, #0
 8000936:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000938:	2300      	movs	r3, #0
 800093a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800093c:	463b      	mov	r3, r7
 800093e:	4619      	mov	r1, r3
 8000940:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_TIM2_Init+0x94>)
 8000942:	f001 fde5 	bl	8002510 <HAL_TIMEx_MasterConfigSynchronization>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800094c:	f000 f894 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	3718      	adds	r7, #24
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	2000011c 	.word	0x2000011c

0800095c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000962:	4a12      	ldr	r2, [pc, #72]	; (80009ac <MX_USART2_UART_Init+0x50>)
 8000964:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000968:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800096c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000982:	220c      	movs	r2, #12
 8000984:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 800098e:	2200      	movs	r2, #0
 8000990:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000994:	f001 fe26 	bl	80025e4 <HAL_UART_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800099e:	f000 f86b 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000164 	.word	0x20000164
 80009ac:	40004400 	.word	0x40004400

080009b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b6:	f107 0308 	add.w	r3, r7, #8
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c4:	4b29      	ldr	r3, [pc, #164]	; (8000a6c <MX_GPIO_Init+0xbc>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	4a28      	ldr	r2, [pc, #160]	; (8000a6c <MX_GPIO_Init+0xbc>)
 80009ca:	f043 0304 	orr.w	r3, r3, #4
 80009ce:	6193      	str	r3, [r2, #24]
 80009d0:	4b26      	ldr	r3, [pc, #152]	; (8000a6c <MX_GPIO_Init+0xbc>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	f003 0304 	and.w	r3, r3, #4
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009dc:	4b23      	ldr	r3, [pc, #140]	; (8000a6c <MX_GPIO_Init+0xbc>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	4a22      	ldr	r2, [pc, #136]	; (8000a6c <MX_GPIO_Init+0xbc>)
 80009e2:	f043 0308 	orr.w	r3, r3, #8
 80009e6:	6193      	str	r3, [r2, #24]
 80009e8:	4b20      	ldr	r3, [pc, #128]	; (8000a6c <MX_GPIO_Init+0xbc>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	f003 0308 	and.w	r3, r3, #8
 80009f0:	603b      	str	r3, [r7, #0]
 80009f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 80009f4:	2200      	movs	r2, #0
 80009f6:	f44f 61de 	mov.w	r1, #1776	; 0x6f0
 80009fa:	481d      	ldr	r0, [pc, #116]	; (8000a70 <MX_GPIO_Init+0xc0>)
 80009fc:	f000 fe31 	bl	8001662 <HAL_GPIO_WritePin>
                          |RX0_Pin|TX0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|DP3_Pin
 8000a00:	2200      	movs	r2, #0
 8000a02:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8000a06:	481b      	ldr	r0, [pc, #108]	; (8000a74 <MX_GPIO_Init+0xc4>)
 8000a08:	f000 fe2b 	bl	8001662 <HAL_GPIO_WritePin>
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|DP0_Pin
                          |DP1_Pin|DP2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           RX0_Pin TX0_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000a0c:	f44f 63de 	mov.w	r3, #1776	; 0x6f0
 8000a10:	60bb      	str	r3, [r7, #8]
                          |RX0_Pin|TX0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1e:	f107 0308 	add.w	r3, r7, #8
 8000a22:	4619      	mov	r1, r3
 8000a24:	4812      	ldr	r0, [pc, #72]	; (8000a70 <MX_GPIO_Init+0xc0>)
 8000a26:	f000 fc8b 	bl	8001340 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin DP3_Pin
                           DP4_Pin DP5_Pin DP6_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin DP0_Pin
                           DP1_Pin DP2_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|DP3_Pin
 8000a2a:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000a2e:	60bb      	str	r3, [r7, #8]
                          |DP4_Pin|DP5_Pin|DP6_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|DP0_Pin
                          |DP1_Pin|DP2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a30:	2301      	movs	r3, #1
 8000a32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3c:	f107 0308 	add.w	r3, r7, #8
 8000a40:	4619      	mov	r1, r3
 8000a42:	480c      	ldr	r0, [pc, #48]	; (8000a74 <MX_GPIO_Init+0xc4>)
 8000a44:	f000 fc7c 	bl	8001340 <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_Pin ADD_Pin CONFIRM_Pin RESET_Pin */
  GPIO_InitStruct.Pin = MODE_Pin|ADD_Pin|CONFIRM_Pin|RESET_Pin;
 8000a48:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000a4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a56:	f107 0308 	add.w	r3, r7, #8
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4804      	ldr	r0, [pc, #16]	; (8000a70 <MX_GPIO_Init+0xc0>)
 8000a5e:	f000 fc6f 	bl	8001340 <HAL_GPIO_Init>

}
 8000a62:	bf00      	nop
 8000a64:	3718      	adds	r7, #24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	40010800 	.word	0x40010800
 8000a74:	40010c00 	.word	0x40010c00

08000a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a7c:	b672      	cpsid	i
}
 8000a7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <Error_Handler+0x8>
	...

08000a84 <_write>:
#include "output_display.h"

extern UART_HandleTypeDef huart2;

int _write(int file, char *ptr, int len)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	b29a      	uxth	r2, r3
 8000a94:	f04f 33ff 	mov.w	r3, #4294967295
 8000a98:	68b9      	ldr	r1, [r7, #8]
 8000a9a:	4804      	ldr	r0, [pc, #16]	; (8000aac <_write+0x28>)
 8000a9c:	f001 fdf2 	bl	8002684 <HAL_UART_Transmit>
	return len;
 8000aa0:	687b      	ldr	r3, [r7, #4]
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3710      	adds	r7, #16
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000164 	.word	0x20000164

08000ab0 <timerRun>:
		duration = DURATION_LED_BLINKING_2HZ;
	}
	timer5_counter = duration;
	timer5_flag = 0;
}
void timerRun() {
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 8000ab4:	4b31      	ldr	r3, [pc, #196]	; (8000b7c <timerRun+0xcc>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	dd0b      	ble.n	8000ad4 <timerRun+0x24>
		timer1_counter--;
 8000abc:	4b2f      	ldr	r3, [pc, #188]	; (8000b7c <timerRun+0xcc>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	3b01      	subs	r3, #1
 8000ac2:	4a2e      	ldr	r2, [pc, #184]	; (8000b7c <timerRun+0xcc>)
 8000ac4:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0) {
 8000ac6:	4b2d      	ldr	r3, [pc, #180]	; (8000b7c <timerRun+0xcc>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	dc02      	bgt.n	8000ad4 <timerRun+0x24>
			timer1_flag = 1;
 8000ace:	4b2c      	ldr	r3, [pc, #176]	; (8000b80 <timerRun+0xd0>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter > 0) {
 8000ad4:	4b2b      	ldr	r3, [pc, #172]	; (8000b84 <timerRun+0xd4>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	dd0b      	ble.n	8000af4 <timerRun+0x44>
		timer2_counter--;
 8000adc:	4b29      	ldr	r3, [pc, #164]	; (8000b84 <timerRun+0xd4>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	3b01      	subs	r3, #1
 8000ae2:	4a28      	ldr	r2, [pc, #160]	; (8000b84 <timerRun+0xd4>)
 8000ae4:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0) {
 8000ae6:	4b27      	ldr	r3, [pc, #156]	; (8000b84 <timerRun+0xd4>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	dc02      	bgt.n	8000af4 <timerRun+0x44>
			timer2_flag = 1;
 8000aee:	4b26      	ldr	r3, [pc, #152]	; (8000b88 <timerRun+0xd8>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_counter > 0) {
 8000af4:	4b25      	ldr	r3, [pc, #148]	; (8000b8c <timerRun+0xdc>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	dd0b      	ble.n	8000b14 <timerRun+0x64>
		timer3_counter--;
 8000afc:	4b23      	ldr	r3, [pc, #140]	; (8000b8c <timerRun+0xdc>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	3b01      	subs	r3, #1
 8000b02:	4a22      	ldr	r2, [pc, #136]	; (8000b8c <timerRun+0xdc>)
 8000b04:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0) {
 8000b06:	4b21      	ldr	r3, [pc, #132]	; (8000b8c <timerRun+0xdc>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	dc02      	bgt.n	8000b14 <timerRun+0x64>
			timer3_flag = 1;
 8000b0e:	4b20      	ldr	r3, [pc, #128]	; (8000b90 <timerRun+0xe0>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer4_counter > 0) {
 8000b14:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <timerRun+0xe4>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	dd0b      	ble.n	8000b34 <timerRun+0x84>
		timer4_counter--;
 8000b1c:	4b1d      	ldr	r3, [pc, #116]	; (8000b94 <timerRun+0xe4>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	3b01      	subs	r3, #1
 8000b22:	4a1c      	ldr	r2, [pc, #112]	; (8000b94 <timerRun+0xe4>)
 8000b24:	6013      	str	r3, [r2, #0]
		if (timer4_counter <= 0) {
 8000b26:	4b1b      	ldr	r3, [pc, #108]	; (8000b94 <timerRun+0xe4>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	dc02      	bgt.n	8000b34 <timerRun+0x84>
			timer4_flag = 1;
 8000b2e:	4b1a      	ldr	r3, [pc, #104]	; (8000b98 <timerRun+0xe8>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer5_counter > 0) {
 8000b34:	4b19      	ldr	r3, [pc, #100]	; (8000b9c <timerRun+0xec>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	dd0b      	ble.n	8000b54 <timerRun+0xa4>
		timer5_counter--;
 8000b3c:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <timerRun+0xec>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	3b01      	subs	r3, #1
 8000b42:	4a16      	ldr	r2, [pc, #88]	; (8000b9c <timerRun+0xec>)
 8000b44:	6013      	str	r3, [r2, #0]
		if (timer5_counter <= 0) {
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <timerRun+0xec>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	dc02      	bgt.n	8000b54 <timerRun+0xa4>
			timer5_flag = 1;
 8000b4e:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <timerRun+0xf0>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer0_mode_debounce_counter > 0) {
 8000b54:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <timerRun+0xf4>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	dd0b      	ble.n	8000b74 <timerRun+0xc4>
		timer0_mode_debounce_counter--;
 8000b5c:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <timerRun+0xf4>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	3b01      	subs	r3, #1
 8000b62:	4a10      	ldr	r2, [pc, #64]	; (8000ba4 <timerRun+0xf4>)
 8000b64:	6013      	str	r3, [r2, #0]
		if (timer0_mode_debounce_counter <= 0) {
 8000b66:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <timerRun+0xf4>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	dc02      	bgt.n	8000b74 <timerRun+0xc4>
			timer0_mode_debounce_flag = 1;
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <timerRun+0xf8>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bc80      	pop	{r7}
 8000b7a:	4770      	bx	lr
 8000b7c:	200000f4 	.word	0x200000f4
 8000b80:	200000e0 	.word	0x200000e0
 8000b84:	200000f8 	.word	0x200000f8
 8000b88:	200000e4 	.word	0x200000e4
 8000b8c:	200000fc 	.word	0x200000fc
 8000b90:	200000e8 	.word	0x200000e8
 8000b94:	20000100 	.word	0x20000100
 8000b98:	200000ec 	.word	0x200000ec
 8000b9c:	20000104 	.word	0x20000104
 8000ba0:	200000f0 	.word	0x200000f0
 8000ba4:	2000010c 	.word	0x2000010c
 8000ba8:	20000108 	.word	0x20000108

08000bac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <HAL_MspInit+0x5c>)
 8000bb4:	699b      	ldr	r3, [r3, #24]
 8000bb6:	4a14      	ldr	r2, [pc, #80]	; (8000c08 <HAL_MspInit+0x5c>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	6193      	str	r3, [r2, #24]
 8000bbe:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <HAL_MspInit+0x5c>)
 8000bc0:	699b      	ldr	r3, [r3, #24]
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bca:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <HAL_MspInit+0x5c>)
 8000bcc:	69db      	ldr	r3, [r3, #28]
 8000bce:	4a0e      	ldr	r2, [pc, #56]	; (8000c08 <HAL_MspInit+0x5c>)
 8000bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd4:	61d3      	str	r3, [r2, #28]
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <HAL_MspInit+0x5c>)
 8000bd8:	69db      	ldr	r3, [r3, #28]
 8000bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000be2:	4b0a      	ldr	r3, [pc, #40]	; (8000c0c <HAL_MspInit+0x60>)
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <HAL_MspInit+0x60>)
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	3714      	adds	r7, #20
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	40010000 	.word	0x40010000

08000c10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c20:	d113      	bne.n	8000c4a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c22:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <HAL_TIM_Base_MspInit+0x44>)
 8000c24:	69db      	ldr	r3, [r3, #28]
 8000c26:	4a0b      	ldr	r2, [pc, #44]	; (8000c54 <HAL_TIM_Base_MspInit+0x44>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	61d3      	str	r3, [r2, #28]
 8000c2e:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <HAL_TIM_Base_MspInit+0x44>)
 8000c30:	69db      	ldr	r3, [r3, #28]
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	201c      	movs	r0, #28
 8000c40:	f000 fa95 	bl	800116e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c44:	201c      	movs	r0, #28
 8000c46:	f000 faae 	bl	80011a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c4a:	bf00      	nop
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40021000 	.word	0x40021000

08000c58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b088      	sub	sp, #32
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 0310 	add.w	r3, r7, #16
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a1f      	ldr	r2, [pc, #124]	; (8000cf0 <HAL_UART_MspInit+0x98>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d137      	bne.n	8000ce8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c78:	4b1e      	ldr	r3, [pc, #120]	; (8000cf4 <HAL_UART_MspInit+0x9c>)
 8000c7a:	69db      	ldr	r3, [r3, #28]
 8000c7c:	4a1d      	ldr	r2, [pc, #116]	; (8000cf4 <HAL_UART_MspInit+0x9c>)
 8000c7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c82:	61d3      	str	r3, [r2, #28]
 8000c84:	4b1b      	ldr	r3, [pc, #108]	; (8000cf4 <HAL_UART_MspInit+0x9c>)
 8000c86:	69db      	ldr	r3, [r3, #28]
 8000c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c90:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <HAL_UART_MspInit+0x9c>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	4a17      	ldr	r2, [pc, #92]	; (8000cf4 <HAL_UART_MspInit+0x9c>)
 8000c96:	f043 0304 	orr.w	r3, r3, #4
 8000c9a:	6193      	str	r3, [r2, #24]
 8000c9c:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <HAL_UART_MspInit+0x9c>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	f003 0304 	and.w	r3, r3, #4
 8000ca4:	60bb      	str	r3, [r7, #8]
 8000ca6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ca8:	2304      	movs	r3, #4
 8000caa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb4:	f107 0310 	add.w	r3, r7, #16
 8000cb8:	4619      	mov	r1, r3
 8000cba:	480f      	ldr	r0, [pc, #60]	; (8000cf8 <HAL_UART_MspInit+0xa0>)
 8000cbc:	f000 fb40 	bl	8001340 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cc0:	2308      	movs	r3, #8
 8000cc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ccc:	f107 0310 	add.w	r3, r7, #16
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4809      	ldr	r0, [pc, #36]	; (8000cf8 <HAL_UART_MspInit+0xa0>)
 8000cd4:	f000 fb34 	bl	8001340 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2100      	movs	r1, #0
 8000cdc:	2026      	movs	r0, #38	; 0x26
 8000cde:	f000 fa46 	bl	800116e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ce2:	2026      	movs	r0, #38	; 0x26
 8000ce4:	f000 fa5f 	bl	80011a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ce8:	bf00      	nop
 8000cea:	3720      	adds	r7, #32
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40004400 	.word	0x40004400
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	40010800 	.word	0x40010800

08000cfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <NMI_Handler+0x4>

08000d02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d06:	e7fe      	b.n	8000d06 <HardFault_Handler+0x4>

08000d08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <MemManage_Handler+0x4>

08000d0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d12:	e7fe      	b.n	8000d12 <BusFault_Handler+0x4>

08000d14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <UsageFault_Handler+0x4>

08000d1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr

08000d26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bc80      	pop	{r7}
 8000d30:	4770      	bx	lr

08000d32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bc80      	pop	{r7}
 8000d3c:	4770      	bx	lr

08000d3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d42:	f000 f921 	bl	8000f88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
	...

08000d4c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d50:	4802      	ldr	r0, [pc, #8]	; (8000d5c <TIM2_IRQHandler+0x10>)
 8000d52:	f001 f8fc 	bl	8001f4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	2000011c 	.word	0x2000011c

08000d60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d64:	4802      	ldr	r0, [pc, #8]	; (8000d70 <USART2_IRQHandler+0x10>)
 8000d66:	f001 fd11 	bl	800278c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000164 	.word	0x20000164

08000d74 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	e00a      	b.n	8000d9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d86:	f3af 8000 	nop.w
 8000d8a:	4601      	mov	r1, r0
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	1c5a      	adds	r2, r3, #1
 8000d90:	60ba      	str	r2, [r7, #8]
 8000d92:	b2ca      	uxtb	r2, r1
 8000d94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	617b      	str	r3, [r7, #20]
 8000d9c:	697a      	ldr	r2, [r7, #20]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	dbf0      	blt.n	8000d86 <_read+0x12>
	}

return len;
 8000da4:	687b      	ldr	r3, [r7, #4]
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3718      	adds	r7, #24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <_close>:
	}
	return len;
}

int _close(int file)
{
 8000dae:	b480      	push	{r7}
 8000db0:	b083      	sub	sp, #12
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
	return -1;
 8000db6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr

08000dc4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dd4:	605a      	str	r2, [r3, #4]
	return 0;
 8000dd6:	2300      	movs	r3, #0
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc80      	pop	{r7}
 8000de0:	4770      	bx	lr

08000de2 <_isatty>:

int _isatty(int file)
{
 8000de2:	b480      	push	{r7}
 8000de4:	b083      	sub	sp, #12
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
	return 1;
 8000dea:	2301      	movs	r3, #1
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bc80      	pop	{r7}
 8000df4:	4770      	bx	lr

08000df6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000df6:	b480      	push	{r7}
 8000df8:	b085      	sub	sp, #20
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	60f8      	str	r0, [r7, #12]
 8000dfe:	60b9      	str	r1, [r7, #8]
 8000e00:	607a      	str	r2, [r7, #4]
	return 0;
 8000e02:	2300      	movs	r3, #0
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3714      	adds	r7, #20
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bc80      	pop	{r7}
 8000e0c:	4770      	bx	lr
	...

08000e10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e18:	4a14      	ldr	r2, [pc, #80]	; (8000e6c <_sbrk+0x5c>)
 8000e1a:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <_sbrk+0x60>)
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e24:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <_sbrk+0x64>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d102      	bne.n	8000e32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e2c:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <_sbrk+0x64>)
 8000e2e:	4a12      	ldr	r2, [pc, #72]	; (8000e78 <_sbrk+0x68>)
 8000e30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e32:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <_sbrk+0x64>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d207      	bcs.n	8000e50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e40:	f002 f9f4 	bl	800322c <__errno>
 8000e44:	4603      	mov	r3, r0
 8000e46:	220c      	movs	r2, #12
 8000e48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4e:	e009      	b.n	8000e64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e50:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <_sbrk+0x64>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e56:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <_sbrk+0x64>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	4a05      	ldr	r2, [pc, #20]	; (8000e74 <_sbrk+0x64>)
 8000e60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e62:	68fb      	ldr	r3, [r7, #12]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3718      	adds	r7, #24
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20002800 	.word	0x20002800
 8000e70:	00000400 	.word	0x00000400
 8000e74:	20000110 	.word	0x20000110
 8000e78:	200001c0 	.word	0x200001c0

08000e7c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr

08000e88 <HAL_TIM_PeriodElapsedCallback>:
#include "main.h"
#include "input_processing.h"
#include "input_reading.h"
#include "software_timer.h"
#include "button.h"
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim ) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e98:	d105      	bne.n	8000ea6 <HAL_TIM_PeriodElapsedCallback+0x1e>
		button_reading();
 8000e9a:	f7ff fa45 	bl	8000328 <button_reading>
		timerRun();
 8000e9e:	f7ff fe07 	bl	8000ab0 <timerRun>
		getKeyInput();
 8000ea2:	f7ff f95f 	bl	8000164 <getKeyInput>
	}
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
	...

08000eb0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000eb0:	f7ff ffe4 	bl	8000e7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eb4:	480b      	ldr	r0, [pc, #44]	; (8000ee4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000eb6:	490c      	ldr	r1, [pc, #48]	; (8000ee8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000eb8:	4a0c      	ldr	r2, [pc, #48]	; (8000eec <LoopFillZerobss+0x16>)
  movs r3, #0
 8000eba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ebc:	e002      	b.n	8000ec4 <LoopCopyDataInit>

08000ebe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ebe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ec2:	3304      	adds	r3, #4

08000ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ec6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec8:	d3f9      	bcc.n	8000ebe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eca:	4a09      	ldr	r2, [pc, #36]	; (8000ef0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ecc:	4c09      	ldr	r4, [pc, #36]	; (8000ef4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed0:	e001      	b.n	8000ed6 <LoopFillZerobss>

08000ed2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ed2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed4:	3204      	adds	r2, #4

08000ed6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ed6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed8:	d3fb      	bcc.n	8000ed2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eda:	f002 f9ad 	bl	8003238 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ede:	f7ff fc91 	bl	8000804 <main>
  bx lr
 8000ee2:	4770      	bx	lr
  ldr r0, =_sdata
 8000ee4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee8:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8000eec:	0800424c 	.word	0x0800424c
  ldr r2, =_sbss
 8000ef0:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8000ef4:	200001c0 	.word	0x200001c0

08000ef8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ef8:	e7fe      	b.n	8000ef8 <ADC1_2_IRQHandler>
	...

08000efc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <HAL_Init+0x28>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a07      	ldr	r2, [pc, #28]	; (8000f24 <HAL_Init+0x28>)
 8000f06:	f043 0310 	orr.w	r3, r3, #16
 8000f0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f0c:	2003      	movs	r0, #3
 8000f0e:	f000 f923 	bl	8001158 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f12:	200f      	movs	r0, #15
 8000f14:	f000 f808 	bl	8000f28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f18:	f7ff fe48 	bl	8000bac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40022000 	.word	0x40022000

08000f28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <HAL_InitTick+0x54>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <HAL_InitTick+0x58>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 f93b 	bl	80011c2 <HAL_SYSTICK_Config>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e00e      	b.n	8000f74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2b0f      	cmp	r3, #15
 8000f5a:	d80a      	bhi.n	8000f72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	6879      	ldr	r1, [r7, #4]
 8000f60:	f04f 30ff 	mov.w	r0, #4294967295
 8000f64:	f000 f903 	bl	800116e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f68:	4a06      	ldr	r2, [pc, #24]	; (8000f84 <HAL_InitTick+0x5c>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	e000      	b.n	8000f74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	2000002c 	.word	0x2000002c
 8000f80:	20000034 	.word	0x20000034
 8000f84:	20000030 	.word	0x20000030

08000f88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f8c:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <HAL_IncTick+0x1c>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <HAL_IncTick+0x20>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4413      	add	r3, r2
 8000f98:	4a03      	ldr	r2, [pc, #12]	; (8000fa8 <HAL_IncTick+0x20>)
 8000f9a:	6013      	str	r3, [r2, #0]
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr
 8000fa4:	20000034 	.word	0x20000034
 8000fa8:	200001ac 	.word	0x200001ac

08000fac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb0:	4b02      	ldr	r3, [pc, #8]	; (8000fbc <HAL_GetTick+0x10>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr
 8000fbc:	200001ac 	.word	0x200001ac

08000fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd6:	68ba      	ldr	r2, [r7, #8]
 8000fd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff2:	4a04      	ldr	r2, [pc, #16]	; (8001004 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	60d3      	str	r3, [r2, #12]
}
 8000ff8:	bf00      	nop
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800100c:	4b04      	ldr	r3, [pc, #16]	; (8001020 <__NVIC_GetPriorityGrouping+0x18>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	f003 0307 	and.w	r3, r3, #7
}
 8001016:	4618      	mov	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	bc80      	pop	{r7}
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	2b00      	cmp	r3, #0
 8001034:	db0b      	blt.n	800104e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	f003 021f 	and.w	r2, r3, #31
 800103c:	4906      	ldr	r1, [pc, #24]	; (8001058 <__NVIC_EnableIRQ+0x34>)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	095b      	lsrs	r3, r3, #5
 8001044:	2001      	movs	r0, #1
 8001046:	fa00 f202 	lsl.w	r2, r0, r2
 800104a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr
 8001058:	e000e100 	.word	0xe000e100

0800105c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	6039      	str	r1, [r7, #0]
 8001066:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106c:	2b00      	cmp	r3, #0
 800106e:	db0a      	blt.n	8001086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	b2da      	uxtb	r2, r3
 8001074:	490c      	ldr	r1, [pc, #48]	; (80010a8 <__NVIC_SetPriority+0x4c>)
 8001076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107a:	0112      	lsls	r2, r2, #4
 800107c:	b2d2      	uxtb	r2, r2
 800107e:	440b      	add	r3, r1
 8001080:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001084:	e00a      	b.n	800109c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	b2da      	uxtb	r2, r3
 800108a:	4908      	ldr	r1, [pc, #32]	; (80010ac <__NVIC_SetPriority+0x50>)
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	f003 030f 	and.w	r3, r3, #15
 8001092:	3b04      	subs	r3, #4
 8001094:	0112      	lsls	r2, r2, #4
 8001096:	b2d2      	uxtb	r2, r2
 8001098:	440b      	add	r3, r1
 800109a:	761a      	strb	r2, [r3, #24]
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	e000e100 	.word	0xe000e100
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b089      	sub	sp, #36	; 0x24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	f1c3 0307 	rsb	r3, r3, #7
 80010ca:	2b04      	cmp	r3, #4
 80010cc:	bf28      	it	cs
 80010ce:	2304      	movcs	r3, #4
 80010d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3304      	adds	r3, #4
 80010d6:	2b06      	cmp	r3, #6
 80010d8:	d902      	bls.n	80010e0 <NVIC_EncodePriority+0x30>
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	3b03      	subs	r3, #3
 80010de:	e000      	b.n	80010e2 <NVIC_EncodePriority+0x32>
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e4:	f04f 32ff 	mov.w	r2, #4294967295
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43da      	mvns	r2, r3
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	401a      	ands	r2, r3
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f8:	f04f 31ff 	mov.w	r1, #4294967295
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001102:	43d9      	mvns	r1, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001108:	4313      	orrs	r3, r2
         );
}
 800110a:	4618      	mov	r0, r3
 800110c:	3724      	adds	r7, #36	; 0x24
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr

08001114 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3b01      	subs	r3, #1
 8001120:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001124:	d301      	bcc.n	800112a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001126:	2301      	movs	r3, #1
 8001128:	e00f      	b.n	800114a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800112a:	4a0a      	ldr	r2, [pc, #40]	; (8001154 <SysTick_Config+0x40>)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3b01      	subs	r3, #1
 8001130:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001132:	210f      	movs	r1, #15
 8001134:	f04f 30ff 	mov.w	r0, #4294967295
 8001138:	f7ff ff90 	bl	800105c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800113c:	4b05      	ldr	r3, [pc, #20]	; (8001154 <SysTick_Config+0x40>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001142:	4b04      	ldr	r3, [pc, #16]	; (8001154 <SysTick_Config+0x40>)
 8001144:	2207      	movs	r2, #7
 8001146:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	e000e010 	.word	0xe000e010

08001158 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f7ff ff2d 	bl	8000fc0 <__NVIC_SetPriorityGrouping>
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800116e:	b580      	push	{r7, lr}
 8001170:	b086      	sub	sp, #24
 8001172:	af00      	add	r7, sp, #0
 8001174:	4603      	mov	r3, r0
 8001176:	60b9      	str	r1, [r7, #8]
 8001178:	607a      	str	r2, [r7, #4]
 800117a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001180:	f7ff ff42 	bl	8001008 <__NVIC_GetPriorityGrouping>
 8001184:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	68b9      	ldr	r1, [r7, #8]
 800118a:	6978      	ldr	r0, [r7, #20]
 800118c:	f7ff ff90 	bl	80010b0 <NVIC_EncodePriority>
 8001190:	4602      	mov	r2, r0
 8001192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001196:	4611      	mov	r1, r2
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ff5f 	bl	800105c <__NVIC_SetPriority>
}
 800119e:	bf00      	nop
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	4603      	mov	r3, r0
 80011ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff35 	bl	8001024 <__NVIC_EnableIRQ>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff ffa2 	bl	8001114 <SysTick_Config>
 80011d0:	4603      	mov	r3, r0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011da:	b480      	push	{r7}
 80011dc:	b085      	sub	sp, #20
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011e2:	2300      	movs	r3, #0
 80011e4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d008      	beq.n	8001204 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2204      	movs	r2, #4
 80011f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e020      	b.n	8001246 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f022 020e 	bic.w	r2, r2, #14
 8001212:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f022 0201 	bic.w	r2, r2, #1
 8001222:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800122c:	2101      	movs	r1, #1
 800122e:	fa01 f202 	lsl.w	r2, r1, r2
 8001232:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2201      	movs	r2, #1
 8001238:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001244:	7bfb      	ldrb	r3, [r7, #15]
}
 8001246:	4618      	mov	r0, r3
 8001248:	3714      	adds	r7, #20
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr

08001250 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001258:	2300      	movs	r3, #0
 800125a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d005      	beq.n	8001274 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2204      	movs	r2, #4
 800126c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	73fb      	strb	r3, [r7, #15]
 8001272:	e051      	b.n	8001318 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f022 020e 	bic.w	r2, r2, #14
 8001282:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f022 0201 	bic.w	r2, r2, #1
 8001292:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a22      	ldr	r2, [pc, #136]	; (8001324 <HAL_DMA_Abort_IT+0xd4>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d029      	beq.n	80012f2 <HAL_DMA_Abort_IT+0xa2>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a21      	ldr	r2, [pc, #132]	; (8001328 <HAL_DMA_Abort_IT+0xd8>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d022      	beq.n	80012ee <HAL_DMA_Abort_IT+0x9e>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a1f      	ldr	r2, [pc, #124]	; (800132c <HAL_DMA_Abort_IT+0xdc>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d01a      	beq.n	80012e8 <HAL_DMA_Abort_IT+0x98>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a1e      	ldr	r2, [pc, #120]	; (8001330 <HAL_DMA_Abort_IT+0xe0>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d012      	beq.n	80012e2 <HAL_DMA_Abort_IT+0x92>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a1c      	ldr	r2, [pc, #112]	; (8001334 <HAL_DMA_Abort_IT+0xe4>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d00a      	beq.n	80012dc <HAL_DMA_Abort_IT+0x8c>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a1b      	ldr	r2, [pc, #108]	; (8001338 <HAL_DMA_Abort_IT+0xe8>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d102      	bne.n	80012d6 <HAL_DMA_Abort_IT+0x86>
 80012d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80012d4:	e00e      	b.n	80012f4 <HAL_DMA_Abort_IT+0xa4>
 80012d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012da:	e00b      	b.n	80012f4 <HAL_DMA_Abort_IT+0xa4>
 80012dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012e0:	e008      	b.n	80012f4 <HAL_DMA_Abort_IT+0xa4>
 80012e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e6:	e005      	b.n	80012f4 <HAL_DMA_Abort_IT+0xa4>
 80012e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ec:	e002      	b.n	80012f4 <HAL_DMA_Abort_IT+0xa4>
 80012ee:	2310      	movs	r3, #16
 80012f0:	e000      	b.n	80012f4 <HAL_DMA_Abort_IT+0xa4>
 80012f2:	2301      	movs	r3, #1
 80012f4:	4a11      	ldr	r2, [pc, #68]	; (800133c <HAL_DMA_Abort_IT+0xec>)
 80012f6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2201      	movs	r2, #1
 80012fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800130c:	2b00      	cmp	r3, #0
 800130e:	d003      	beq.n	8001318 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	4798      	blx	r3
    } 
  }
  return status;
 8001318:	7bfb      	ldrb	r3, [r7, #15]
}
 800131a:	4618      	mov	r0, r3
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40020008 	.word	0x40020008
 8001328:	4002001c 	.word	0x4002001c
 800132c:	40020030 	.word	0x40020030
 8001330:	40020044 	.word	0x40020044
 8001334:	40020058 	.word	0x40020058
 8001338:	4002006c 	.word	0x4002006c
 800133c:	40020000 	.word	0x40020000

08001340 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001340:	b480      	push	{r7}
 8001342:	b08b      	sub	sp, #44	; 0x2c
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800134a:	2300      	movs	r3, #0
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800134e:	2300      	movs	r3, #0
 8001350:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001352:	e148      	b.n	80015e6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001354:	2201      	movs	r2, #1
 8001356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	69fa      	ldr	r2, [r7, #28]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	429a      	cmp	r2, r3
 800136e:	f040 8137 	bne.w	80015e0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	4aa3      	ldr	r2, [pc, #652]	; (8001604 <HAL_GPIO_Init+0x2c4>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d05e      	beq.n	800143a <HAL_GPIO_Init+0xfa>
 800137c:	4aa1      	ldr	r2, [pc, #644]	; (8001604 <HAL_GPIO_Init+0x2c4>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d875      	bhi.n	800146e <HAL_GPIO_Init+0x12e>
 8001382:	4aa1      	ldr	r2, [pc, #644]	; (8001608 <HAL_GPIO_Init+0x2c8>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d058      	beq.n	800143a <HAL_GPIO_Init+0xfa>
 8001388:	4a9f      	ldr	r2, [pc, #636]	; (8001608 <HAL_GPIO_Init+0x2c8>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d86f      	bhi.n	800146e <HAL_GPIO_Init+0x12e>
 800138e:	4a9f      	ldr	r2, [pc, #636]	; (800160c <HAL_GPIO_Init+0x2cc>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d052      	beq.n	800143a <HAL_GPIO_Init+0xfa>
 8001394:	4a9d      	ldr	r2, [pc, #628]	; (800160c <HAL_GPIO_Init+0x2cc>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d869      	bhi.n	800146e <HAL_GPIO_Init+0x12e>
 800139a:	4a9d      	ldr	r2, [pc, #628]	; (8001610 <HAL_GPIO_Init+0x2d0>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d04c      	beq.n	800143a <HAL_GPIO_Init+0xfa>
 80013a0:	4a9b      	ldr	r2, [pc, #620]	; (8001610 <HAL_GPIO_Init+0x2d0>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d863      	bhi.n	800146e <HAL_GPIO_Init+0x12e>
 80013a6:	4a9b      	ldr	r2, [pc, #620]	; (8001614 <HAL_GPIO_Init+0x2d4>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d046      	beq.n	800143a <HAL_GPIO_Init+0xfa>
 80013ac:	4a99      	ldr	r2, [pc, #612]	; (8001614 <HAL_GPIO_Init+0x2d4>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d85d      	bhi.n	800146e <HAL_GPIO_Init+0x12e>
 80013b2:	2b12      	cmp	r3, #18
 80013b4:	d82a      	bhi.n	800140c <HAL_GPIO_Init+0xcc>
 80013b6:	2b12      	cmp	r3, #18
 80013b8:	d859      	bhi.n	800146e <HAL_GPIO_Init+0x12e>
 80013ba:	a201      	add	r2, pc, #4	; (adr r2, 80013c0 <HAL_GPIO_Init+0x80>)
 80013bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c0:	0800143b 	.word	0x0800143b
 80013c4:	08001415 	.word	0x08001415
 80013c8:	08001427 	.word	0x08001427
 80013cc:	08001469 	.word	0x08001469
 80013d0:	0800146f 	.word	0x0800146f
 80013d4:	0800146f 	.word	0x0800146f
 80013d8:	0800146f 	.word	0x0800146f
 80013dc:	0800146f 	.word	0x0800146f
 80013e0:	0800146f 	.word	0x0800146f
 80013e4:	0800146f 	.word	0x0800146f
 80013e8:	0800146f 	.word	0x0800146f
 80013ec:	0800146f 	.word	0x0800146f
 80013f0:	0800146f 	.word	0x0800146f
 80013f4:	0800146f 	.word	0x0800146f
 80013f8:	0800146f 	.word	0x0800146f
 80013fc:	0800146f 	.word	0x0800146f
 8001400:	0800146f 	.word	0x0800146f
 8001404:	0800141d 	.word	0x0800141d
 8001408:	08001431 	.word	0x08001431
 800140c:	4a82      	ldr	r2, [pc, #520]	; (8001618 <HAL_GPIO_Init+0x2d8>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d013      	beq.n	800143a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001412:	e02c      	b.n	800146e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	623b      	str	r3, [r7, #32]
          break;
 800141a:	e029      	b.n	8001470 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	3304      	adds	r3, #4
 8001422:	623b      	str	r3, [r7, #32]
          break;
 8001424:	e024      	b.n	8001470 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	3308      	adds	r3, #8
 800142c:	623b      	str	r3, [r7, #32]
          break;
 800142e:	e01f      	b.n	8001470 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	330c      	adds	r3, #12
 8001436:	623b      	str	r3, [r7, #32]
          break;
 8001438:	e01a      	b.n	8001470 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d102      	bne.n	8001448 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001442:	2304      	movs	r3, #4
 8001444:	623b      	str	r3, [r7, #32]
          break;
 8001446:	e013      	b.n	8001470 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d105      	bne.n	800145c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001450:	2308      	movs	r3, #8
 8001452:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	69fa      	ldr	r2, [r7, #28]
 8001458:	611a      	str	r2, [r3, #16]
          break;
 800145a:	e009      	b.n	8001470 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800145c:	2308      	movs	r3, #8
 800145e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	69fa      	ldr	r2, [r7, #28]
 8001464:	615a      	str	r2, [r3, #20]
          break;
 8001466:	e003      	b.n	8001470 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001468:	2300      	movs	r3, #0
 800146a:	623b      	str	r3, [r7, #32]
          break;
 800146c:	e000      	b.n	8001470 <HAL_GPIO_Init+0x130>
          break;
 800146e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	2bff      	cmp	r3, #255	; 0xff
 8001474:	d801      	bhi.n	800147a <HAL_GPIO_Init+0x13a>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	e001      	b.n	800147e <HAL_GPIO_Init+0x13e>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	3304      	adds	r3, #4
 800147e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	2bff      	cmp	r3, #255	; 0xff
 8001484:	d802      	bhi.n	800148c <HAL_GPIO_Init+0x14c>
 8001486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	e002      	b.n	8001492 <HAL_GPIO_Init+0x152>
 800148c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148e:	3b08      	subs	r3, #8
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	210f      	movs	r1, #15
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	fa01 f303 	lsl.w	r3, r1, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	401a      	ands	r2, r3
 80014a4:	6a39      	ldr	r1, [r7, #32]
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	fa01 f303 	lsl.w	r3, r1, r3
 80014ac:	431a      	orrs	r2, r3
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f000 8090 	beq.w	80015e0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014c0:	4b56      	ldr	r3, [pc, #344]	; (800161c <HAL_GPIO_Init+0x2dc>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	4a55      	ldr	r2, [pc, #340]	; (800161c <HAL_GPIO_Init+0x2dc>)
 80014c6:	f043 0301 	orr.w	r3, r3, #1
 80014ca:	6193      	str	r3, [r2, #24]
 80014cc:	4b53      	ldr	r3, [pc, #332]	; (800161c <HAL_GPIO_Init+0x2dc>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014d8:	4a51      	ldr	r2, [pc, #324]	; (8001620 <HAL_GPIO_Init+0x2e0>)
 80014da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014dc:	089b      	lsrs	r3, r3, #2
 80014de:	3302      	adds	r3, #2
 80014e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e8:	f003 0303 	and.w	r3, r3, #3
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	220f      	movs	r2, #15
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	68fa      	ldr	r2, [r7, #12]
 80014f8:	4013      	ands	r3, r2
 80014fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a49      	ldr	r2, [pc, #292]	; (8001624 <HAL_GPIO_Init+0x2e4>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d00d      	beq.n	8001520 <HAL_GPIO_Init+0x1e0>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a48      	ldr	r2, [pc, #288]	; (8001628 <HAL_GPIO_Init+0x2e8>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d007      	beq.n	800151c <HAL_GPIO_Init+0x1dc>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a47      	ldr	r2, [pc, #284]	; (800162c <HAL_GPIO_Init+0x2ec>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d101      	bne.n	8001518 <HAL_GPIO_Init+0x1d8>
 8001514:	2302      	movs	r3, #2
 8001516:	e004      	b.n	8001522 <HAL_GPIO_Init+0x1e2>
 8001518:	2303      	movs	r3, #3
 800151a:	e002      	b.n	8001522 <HAL_GPIO_Init+0x1e2>
 800151c:	2301      	movs	r3, #1
 800151e:	e000      	b.n	8001522 <HAL_GPIO_Init+0x1e2>
 8001520:	2300      	movs	r3, #0
 8001522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001524:	f002 0203 	and.w	r2, r2, #3
 8001528:	0092      	lsls	r2, r2, #2
 800152a:	4093      	lsls	r3, r2
 800152c:	68fa      	ldr	r2, [r7, #12]
 800152e:	4313      	orrs	r3, r2
 8001530:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001532:	493b      	ldr	r1, [pc, #236]	; (8001620 <HAL_GPIO_Init+0x2e0>)
 8001534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001536:	089b      	lsrs	r3, r3, #2
 8001538:	3302      	adds	r3, #2
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d006      	beq.n	800155a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800154c:	4b38      	ldr	r3, [pc, #224]	; (8001630 <HAL_GPIO_Init+0x2f0>)
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	4937      	ldr	r1, [pc, #220]	; (8001630 <HAL_GPIO_Init+0x2f0>)
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	4313      	orrs	r3, r2
 8001556:	608b      	str	r3, [r1, #8]
 8001558:	e006      	b.n	8001568 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800155a:	4b35      	ldr	r3, [pc, #212]	; (8001630 <HAL_GPIO_Init+0x2f0>)
 800155c:	689a      	ldr	r2, [r3, #8]
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	43db      	mvns	r3, r3
 8001562:	4933      	ldr	r1, [pc, #204]	; (8001630 <HAL_GPIO_Init+0x2f0>)
 8001564:	4013      	ands	r3, r2
 8001566:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d006      	beq.n	8001582 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001574:	4b2e      	ldr	r3, [pc, #184]	; (8001630 <HAL_GPIO_Init+0x2f0>)
 8001576:	68da      	ldr	r2, [r3, #12]
 8001578:	492d      	ldr	r1, [pc, #180]	; (8001630 <HAL_GPIO_Init+0x2f0>)
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	4313      	orrs	r3, r2
 800157e:	60cb      	str	r3, [r1, #12]
 8001580:	e006      	b.n	8001590 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001582:	4b2b      	ldr	r3, [pc, #172]	; (8001630 <HAL_GPIO_Init+0x2f0>)
 8001584:	68da      	ldr	r2, [r3, #12]
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	43db      	mvns	r3, r3
 800158a:	4929      	ldr	r1, [pc, #164]	; (8001630 <HAL_GPIO_Init+0x2f0>)
 800158c:	4013      	ands	r3, r2
 800158e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d006      	beq.n	80015aa <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800159c:	4b24      	ldr	r3, [pc, #144]	; (8001630 <HAL_GPIO_Init+0x2f0>)
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	4923      	ldr	r1, [pc, #140]	; (8001630 <HAL_GPIO_Init+0x2f0>)
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	604b      	str	r3, [r1, #4]
 80015a8:	e006      	b.n	80015b8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015aa:	4b21      	ldr	r3, [pc, #132]	; (8001630 <HAL_GPIO_Init+0x2f0>)
 80015ac:	685a      	ldr	r2, [r3, #4]
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	43db      	mvns	r3, r3
 80015b2:	491f      	ldr	r1, [pc, #124]	; (8001630 <HAL_GPIO_Init+0x2f0>)
 80015b4:	4013      	ands	r3, r2
 80015b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d006      	beq.n	80015d2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015c4:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <HAL_GPIO_Init+0x2f0>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4919      	ldr	r1, [pc, #100]	; (8001630 <HAL_GPIO_Init+0x2f0>)
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	600b      	str	r3, [r1, #0]
 80015d0:	e006      	b.n	80015e0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015d2:	4b17      	ldr	r3, [pc, #92]	; (8001630 <HAL_GPIO_Init+0x2f0>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	43db      	mvns	r3, r3
 80015da:	4915      	ldr	r1, [pc, #84]	; (8001630 <HAL_GPIO_Init+0x2f0>)
 80015dc:	4013      	ands	r3, r2
 80015de:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80015e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e2:	3301      	adds	r3, #1
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	fa22 f303 	lsr.w	r3, r2, r3
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f47f aeaf 	bne.w	8001354 <HAL_GPIO_Init+0x14>
  }
}
 80015f6:	bf00      	nop
 80015f8:	bf00      	nop
 80015fa:	372c      	adds	r7, #44	; 0x2c
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	10320000 	.word	0x10320000
 8001608:	10310000 	.word	0x10310000
 800160c:	10220000 	.word	0x10220000
 8001610:	10210000 	.word	0x10210000
 8001614:	10120000 	.word	0x10120000
 8001618:	10110000 	.word	0x10110000
 800161c:	40021000 	.word	0x40021000
 8001620:	40010000 	.word	0x40010000
 8001624:	40010800 	.word	0x40010800
 8001628:	40010c00 	.word	0x40010c00
 800162c:	40011000 	.word	0x40011000
 8001630:	40010400 	.word	0x40010400

08001634 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	887b      	ldrh	r3, [r7, #2]
 8001646:	4013      	ands	r3, r2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d002      	beq.n	8001652 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800164c:	2301      	movs	r3, #1
 800164e:	73fb      	strb	r3, [r7, #15]
 8001650:	e001      	b.n	8001656 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001652:	2300      	movs	r3, #0
 8001654:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001656:	7bfb      	ldrb	r3, [r7, #15]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr

08001662 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001662:	b480      	push	{r7}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
 800166a:	460b      	mov	r3, r1
 800166c:	807b      	strh	r3, [r7, #2]
 800166e:	4613      	mov	r3, r2
 8001670:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001672:	787b      	ldrb	r3, [r7, #1]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d003      	beq.n	8001680 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001678:	887a      	ldrh	r2, [r7, #2]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800167e:	e003      	b.n	8001688 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001680:	887b      	ldrh	r3, [r7, #2]
 8001682:	041a      	lsls	r2, r3, #16
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	611a      	str	r2, [r3, #16]
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr
	...

08001694 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e26c      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f000 8087 	beq.w	80017c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016b4:	4b92      	ldr	r3, [pc, #584]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f003 030c 	and.w	r3, r3, #12
 80016bc:	2b04      	cmp	r3, #4
 80016be:	d00c      	beq.n	80016da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016c0:	4b8f      	ldr	r3, [pc, #572]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 030c 	and.w	r3, r3, #12
 80016c8:	2b08      	cmp	r3, #8
 80016ca:	d112      	bne.n	80016f2 <HAL_RCC_OscConfig+0x5e>
 80016cc:	4b8c      	ldr	r3, [pc, #560]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016d8:	d10b      	bne.n	80016f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016da:	4b89      	ldr	r3, [pc, #548]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d06c      	beq.n	80017c0 <HAL_RCC_OscConfig+0x12c>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d168      	bne.n	80017c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e246      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016fa:	d106      	bne.n	800170a <HAL_RCC_OscConfig+0x76>
 80016fc:	4b80      	ldr	r3, [pc, #512]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a7f      	ldr	r2, [pc, #508]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001702:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001706:	6013      	str	r3, [r2, #0]
 8001708:	e02e      	b.n	8001768 <HAL_RCC_OscConfig+0xd4>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d10c      	bne.n	800172c <HAL_RCC_OscConfig+0x98>
 8001712:	4b7b      	ldr	r3, [pc, #492]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a7a      	ldr	r2, [pc, #488]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001718:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800171c:	6013      	str	r3, [r2, #0]
 800171e:	4b78      	ldr	r3, [pc, #480]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a77      	ldr	r2, [pc, #476]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001724:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	e01d      	b.n	8001768 <HAL_RCC_OscConfig+0xd4>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001734:	d10c      	bne.n	8001750 <HAL_RCC_OscConfig+0xbc>
 8001736:	4b72      	ldr	r3, [pc, #456]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a71      	ldr	r2, [pc, #452]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 800173c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001740:	6013      	str	r3, [r2, #0]
 8001742:	4b6f      	ldr	r3, [pc, #444]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a6e      	ldr	r2, [pc, #440]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	e00b      	b.n	8001768 <HAL_RCC_OscConfig+0xd4>
 8001750:	4b6b      	ldr	r3, [pc, #428]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a6a      	ldr	r2, [pc, #424]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001756:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800175a:	6013      	str	r3, [r2, #0]
 800175c:	4b68      	ldr	r3, [pc, #416]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a67      	ldr	r2, [pc, #412]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001762:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001766:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d013      	beq.n	8001798 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001770:	f7ff fc1c 	bl	8000fac <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001778:	f7ff fc18 	bl	8000fac <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b64      	cmp	r3, #100	; 0x64
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e1fa      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178a:	4b5d      	ldr	r3, [pc, #372]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d0f0      	beq.n	8001778 <HAL_RCC_OscConfig+0xe4>
 8001796:	e014      	b.n	80017c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001798:	f7ff fc08 	bl	8000fac <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017a0:	f7ff fc04 	bl	8000fac <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b64      	cmp	r3, #100	; 0x64
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e1e6      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017b2:	4b53      	ldr	r3, [pc, #332]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f0      	bne.n	80017a0 <HAL_RCC_OscConfig+0x10c>
 80017be:	e000      	b.n	80017c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d063      	beq.n	8001896 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017ce:	4b4c      	ldr	r3, [pc, #304]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f003 030c 	and.w	r3, r3, #12
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d00b      	beq.n	80017f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017da:	4b49      	ldr	r3, [pc, #292]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f003 030c 	and.w	r3, r3, #12
 80017e2:	2b08      	cmp	r3, #8
 80017e4:	d11c      	bne.n	8001820 <HAL_RCC_OscConfig+0x18c>
 80017e6:	4b46      	ldr	r3, [pc, #280]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d116      	bne.n	8001820 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017f2:	4b43      	ldr	r3, [pc, #268]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d005      	beq.n	800180a <HAL_RCC_OscConfig+0x176>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d001      	beq.n	800180a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e1ba      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800180a:	4b3d      	ldr	r3, [pc, #244]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	4939      	ldr	r1, [pc, #228]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 800181a:	4313      	orrs	r3, r2
 800181c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800181e:	e03a      	b.n	8001896 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	691b      	ldr	r3, [r3, #16]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d020      	beq.n	800186a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001828:	4b36      	ldr	r3, [pc, #216]	; (8001904 <HAL_RCC_OscConfig+0x270>)
 800182a:	2201      	movs	r2, #1
 800182c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182e:	f7ff fbbd 	bl	8000fac <HAL_GetTick>
 8001832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001834:	e008      	b.n	8001848 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001836:	f7ff fbb9 	bl	8000fac <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e19b      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001848:	4b2d      	ldr	r3, [pc, #180]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0f0      	beq.n	8001836 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001854:	4b2a      	ldr	r3, [pc, #168]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	4927      	ldr	r1, [pc, #156]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 8001864:	4313      	orrs	r3, r2
 8001866:	600b      	str	r3, [r1, #0]
 8001868:	e015      	b.n	8001896 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800186a:	4b26      	ldr	r3, [pc, #152]	; (8001904 <HAL_RCC_OscConfig+0x270>)
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001870:	f7ff fb9c 	bl	8000fac <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001878:	f7ff fb98 	bl	8000fac <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e17a      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800188a:	4b1d      	ldr	r3, [pc, #116]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0308 	and.w	r3, r3, #8
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d03a      	beq.n	8001918 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d019      	beq.n	80018de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018aa:	4b17      	ldr	r3, [pc, #92]	; (8001908 <HAL_RCC_OscConfig+0x274>)
 80018ac:	2201      	movs	r2, #1
 80018ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b0:	f7ff fb7c 	bl	8000fac <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018b8:	f7ff fb78 	bl	8000fac <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e15a      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ca:	4b0d      	ldr	r3, [pc, #52]	; (8001900 <HAL_RCC_OscConfig+0x26c>)
 80018cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0f0      	beq.n	80018b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018d6:	2001      	movs	r0, #1
 80018d8:	f000 facc 	bl	8001e74 <RCC_Delay>
 80018dc:	e01c      	b.n	8001918 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018de:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <HAL_RCC_OscConfig+0x274>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e4:	f7ff fb62 	bl	8000fac <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ea:	e00f      	b.n	800190c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ec:	f7ff fb5e 	bl	8000fac <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d908      	bls.n	800190c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e140      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>
 80018fe:	bf00      	nop
 8001900:	40021000 	.word	0x40021000
 8001904:	42420000 	.word	0x42420000
 8001908:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800190c:	4b9e      	ldr	r3, [pc, #632]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 800190e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1e9      	bne.n	80018ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0304 	and.w	r3, r3, #4
 8001920:	2b00      	cmp	r3, #0
 8001922:	f000 80a6 	beq.w	8001a72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001926:	2300      	movs	r3, #0
 8001928:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800192a:	4b97      	ldr	r3, [pc, #604]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10d      	bne.n	8001952 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001936:	4b94      	ldr	r3, [pc, #592]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	4a93      	ldr	r2, [pc, #588]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 800193c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001940:	61d3      	str	r3, [r2, #28]
 8001942:	4b91      	ldr	r3, [pc, #580]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194a:	60bb      	str	r3, [r7, #8]
 800194c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800194e:	2301      	movs	r3, #1
 8001950:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001952:	4b8e      	ldr	r3, [pc, #568]	; (8001b8c <HAL_RCC_OscConfig+0x4f8>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195a:	2b00      	cmp	r3, #0
 800195c:	d118      	bne.n	8001990 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800195e:	4b8b      	ldr	r3, [pc, #556]	; (8001b8c <HAL_RCC_OscConfig+0x4f8>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a8a      	ldr	r2, [pc, #552]	; (8001b8c <HAL_RCC_OscConfig+0x4f8>)
 8001964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001968:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800196a:	f7ff fb1f 	bl	8000fac <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001972:	f7ff fb1b 	bl	8000fac <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b64      	cmp	r3, #100	; 0x64
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e0fd      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001984:	4b81      	ldr	r3, [pc, #516]	; (8001b8c <HAL_RCC_OscConfig+0x4f8>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800198c:	2b00      	cmp	r3, #0
 800198e:	d0f0      	beq.n	8001972 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d106      	bne.n	80019a6 <HAL_RCC_OscConfig+0x312>
 8001998:	4b7b      	ldr	r3, [pc, #492]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 800199a:	6a1b      	ldr	r3, [r3, #32]
 800199c:	4a7a      	ldr	r2, [pc, #488]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 800199e:	f043 0301 	orr.w	r3, r3, #1
 80019a2:	6213      	str	r3, [r2, #32]
 80019a4:	e02d      	b.n	8001a02 <HAL_RCC_OscConfig+0x36e>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d10c      	bne.n	80019c8 <HAL_RCC_OscConfig+0x334>
 80019ae:	4b76      	ldr	r3, [pc, #472]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 80019b0:	6a1b      	ldr	r3, [r3, #32]
 80019b2:	4a75      	ldr	r2, [pc, #468]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 80019b4:	f023 0301 	bic.w	r3, r3, #1
 80019b8:	6213      	str	r3, [r2, #32]
 80019ba:	4b73      	ldr	r3, [pc, #460]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 80019bc:	6a1b      	ldr	r3, [r3, #32]
 80019be:	4a72      	ldr	r2, [pc, #456]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 80019c0:	f023 0304 	bic.w	r3, r3, #4
 80019c4:	6213      	str	r3, [r2, #32]
 80019c6:	e01c      	b.n	8001a02 <HAL_RCC_OscConfig+0x36e>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	2b05      	cmp	r3, #5
 80019ce:	d10c      	bne.n	80019ea <HAL_RCC_OscConfig+0x356>
 80019d0:	4b6d      	ldr	r3, [pc, #436]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	4a6c      	ldr	r2, [pc, #432]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 80019d6:	f043 0304 	orr.w	r3, r3, #4
 80019da:	6213      	str	r3, [r2, #32]
 80019dc:	4b6a      	ldr	r3, [pc, #424]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	4a69      	ldr	r2, [pc, #420]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	6213      	str	r3, [r2, #32]
 80019e8:	e00b      	b.n	8001a02 <HAL_RCC_OscConfig+0x36e>
 80019ea:	4b67      	ldr	r3, [pc, #412]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	4a66      	ldr	r2, [pc, #408]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 80019f0:	f023 0301 	bic.w	r3, r3, #1
 80019f4:	6213      	str	r3, [r2, #32]
 80019f6:	4b64      	ldr	r3, [pc, #400]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	4a63      	ldr	r2, [pc, #396]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 80019fc:	f023 0304 	bic.w	r3, r3, #4
 8001a00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d015      	beq.n	8001a36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a0a:	f7ff facf 	bl	8000fac <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a10:	e00a      	b.n	8001a28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a12:	f7ff facb 	bl	8000fac <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e0ab      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a28:	4b57      	ldr	r3, [pc, #348]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0ee      	beq.n	8001a12 <HAL_RCC_OscConfig+0x37e>
 8001a34:	e014      	b.n	8001a60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a36:	f7ff fab9 	bl	8000fac <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a3c:	e00a      	b.n	8001a54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a3e:	f7ff fab5 	bl	8000fac <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e095      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a54:	4b4c      	ldr	r3, [pc, #304]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d1ee      	bne.n	8001a3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a60:	7dfb      	ldrb	r3, [r7, #23]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d105      	bne.n	8001a72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a66:	4b48      	ldr	r3, [pc, #288]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	4a47      	ldr	r2, [pc, #284]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 8001a6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f000 8081 	beq.w	8001b7e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a7c:	4b42      	ldr	r3, [pc, #264]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f003 030c 	and.w	r3, r3, #12
 8001a84:	2b08      	cmp	r3, #8
 8001a86:	d061      	beq.n	8001b4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69db      	ldr	r3, [r3, #28]
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d146      	bne.n	8001b1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a90:	4b3f      	ldr	r3, [pc, #252]	; (8001b90 <HAL_RCC_OscConfig+0x4fc>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a96:	f7ff fa89 	bl	8000fac <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a9e:	f7ff fa85 	bl	8000fac <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e067      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab0:	4b35      	ldr	r3, [pc, #212]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1f0      	bne.n	8001a9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ac4:	d108      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ac6:	4b30      	ldr	r3, [pc, #192]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	492d      	ldr	r1, [pc, #180]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ad8:	4b2b      	ldr	r3, [pc, #172]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a19      	ldr	r1, [r3, #32]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae8:	430b      	orrs	r3, r1
 8001aea:	4927      	ldr	r1, [pc, #156]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001af0:	4b27      	ldr	r3, [pc, #156]	; (8001b90 <HAL_RCC_OscConfig+0x4fc>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af6:	f7ff fa59 	bl	8000fac <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001afe:	f7ff fa55 	bl	8000fac <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e037      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b10:	4b1d      	ldr	r3, [pc, #116]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0f0      	beq.n	8001afe <HAL_RCC_OscConfig+0x46a>
 8001b1c:	e02f      	b.n	8001b7e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b1e:	4b1c      	ldr	r3, [pc, #112]	; (8001b90 <HAL_RCC_OscConfig+0x4fc>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b24:	f7ff fa42 	bl	8000fac <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b2c:	f7ff fa3e 	bl	8000fac <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e020      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b3e:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x498>
 8001b4a:	e018      	b.n	8001b7e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	69db      	ldr	r3, [r3, #28]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d101      	bne.n	8001b58 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e013      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b58:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <HAL_RCC_OscConfig+0x4f4>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d106      	bne.n	8001b7a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d001      	beq.n	8001b7e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e000      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	40007000 	.word	0x40007000
 8001b90:	42420060 	.word	0x42420060

08001b94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e0d0      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ba8:	4b6a      	ldr	r3, [pc, #424]	; (8001d54 <HAL_RCC_ClockConfig+0x1c0>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d910      	bls.n	8001bd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb6:	4b67      	ldr	r3, [pc, #412]	; (8001d54 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f023 0207 	bic.w	r2, r3, #7
 8001bbe:	4965      	ldr	r1, [pc, #404]	; (8001d54 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc6:	4b63      	ldr	r3, [pc, #396]	; (8001d54 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d001      	beq.n	8001bd8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e0b8      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d020      	beq.n	8001c26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d005      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bf0:	4b59      	ldr	r3, [pc, #356]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	4a58      	ldr	r2, [pc, #352]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bfa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0308 	and.w	r3, r3, #8
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d005      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c08:	4b53      	ldr	r3, [pc, #332]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	4a52      	ldr	r2, [pc, #328]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c14:	4b50      	ldr	r3, [pc, #320]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	494d      	ldr	r1, [pc, #308]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d040      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d107      	bne.n	8001c4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3a:	4b47      	ldr	r3, [pc, #284]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d115      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e07f      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d107      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c52:	4b41      	ldr	r3, [pc, #260]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d109      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e073      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c62:	4b3d      	ldr	r3, [pc, #244]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e06b      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c72:	4b39      	ldr	r3, [pc, #228]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f023 0203 	bic.w	r2, r3, #3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	4936      	ldr	r1, [pc, #216]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c84:	f7ff f992 	bl	8000fac <HAL_GetTick>
 8001c88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c8a:	e00a      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c8c:	f7ff f98e 	bl	8000fac <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e053      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ca2:	4b2d      	ldr	r3, [pc, #180]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f003 020c 	and.w	r2, r3, #12
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d1eb      	bne.n	8001c8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cb4:	4b27      	ldr	r3, [pc, #156]	; (8001d54 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d210      	bcs.n	8001ce4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc2:	4b24      	ldr	r3, [pc, #144]	; (8001d54 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f023 0207 	bic.w	r2, r3, #7
 8001cca:	4922      	ldr	r1, [pc, #136]	; (8001d54 <HAL_RCC_ClockConfig+0x1c0>)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd2:	4b20      	ldr	r3, [pc, #128]	; (8001d54 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d001      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e032      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d008      	beq.n	8001d02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cf0:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	4916      	ldr	r1, [pc, #88]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0308 	and.w	r3, r3, #8
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d009      	beq.n	8001d22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d0e:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	490e      	ldr	r1, [pc, #56]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d22:	f000 f821 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
 8001d26:	4602      	mov	r2, r0
 8001d28:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	091b      	lsrs	r3, r3, #4
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	490a      	ldr	r1, [pc, #40]	; (8001d5c <HAL_RCC_ClockConfig+0x1c8>)
 8001d34:	5ccb      	ldrb	r3, [r1, r3]
 8001d36:	fa22 f303 	lsr.w	r3, r2, r3
 8001d3a:	4a09      	ldr	r2, [pc, #36]	; (8001d60 <HAL_RCC_ClockConfig+0x1cc>)
 8001d3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d3e:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <HAL_RCC_ClockConfig+0x1d0>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff f8f0 	bl	8000f28 <HAL_InitTick>

  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40022000 	.word	0x40022000
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	08004180 	.word	0x08004180
 8001d60:	2000002c 	.word	0x2000002c
 8001d64:	20000030 	.word	0x20000030

08001d68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b087      	sub	sp, #28
 8001d6c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	2300      	movs	r3, #0
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d82:	4b1e      	ldr	r3, [pc, #120]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x94>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f003 030c 	and.w	r3, r3, #12
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	d002      	beq.n	8001d98 <HAL_RCC_GetSysClockFreq+0x30>
 8001d92:	2b08      	cmp	r3, #8
 8001d94:	d003      	beq.n	8001d9e <HAL_RCC_GetSysClockFreq+0x36>
 8001d96:	e027      	b.n	8001de8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d98:	4b19      	ldr	r3, [pc, #100]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d9a:	613b      	str	r3, [r7, #16]
      break;
 8001d9c:	e027      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	0c9b      	lsrs	r3, r3, #18
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	4a17      	ldr	r2, [pc, #92]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001da8:	5cd3      	ldrb	r3, [r2, r3]
 8001daa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d010      	beq.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001db6:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x94>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	0c5b      	lsrs	r3, r3, #17
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	4a11      	ldr	r2, [pc, #68]	; (8001e08 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001dc2:	5cd3      	ldrb	r3, [r2, r3]
 8001dc4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a0d      	ldr	r2, [pc, #52]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dca:	fb02 f203 	mul.w	r2, r2, r3
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd4:	617b      	str	r3, [r7, #20]
 8001dd6:	e004      	b.n	8001de2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a0c      	ldr	r2, [pc, #48]	; (8001e0c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ddc:	fb02 f303 	mul.w	r3, r2, r3
 8001de0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	613b      	str	r3, [r7, #16]
      break;
 8001de6:	e002      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001de8:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dea:	613b      	str	r3, [r7, #16]
      break;
 8001dec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dee:	693b      	ldr	r3, [r7, #16]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	371c      	adds	r7, #28
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	007a1200 	.word	0x007a1200
 8001e04:	08004198 	.word	0x08004198
 8001e08:	080041a8 	.word	0x080041a8
 8001e0c:	003d0900 	.word	0x003d0900

08001e10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e14:	4b02      	ldr	r3, [pc, #8]	; (8001e20 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e16:	681b      	ldr	r3, [r3, #0]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr
 8001e20:	2000002c 	.word	0x2000002c

08001e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e28:	f7ff fff2 	bl	8001e10 <HAL_RCC_GetHCLKFreq>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	0a1b      	lsrs	r3, r3, #8
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	4903      	ldr	r1, [pc, #12]	; (8001e48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e3a:	5ccb      	ldrb	r3, [r1, r3]
 8001e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40021000 	.word	0x40021000
 8001e48:	08004190 	.word	0x08004190

08001e4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e50:	f7ff ffde 	bl	8001e10 <HAL_RCC_GetHCLKFreq>
 8001e54:	4602      	mov	r2, r0
 8001e56:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	0adb      	lsrs	r3, r3, #11
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	4903      	ldr	r1, [pc, #12]	; (8001e70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e62:	5ccb      	ldrb	r3, [r1, r3]
 8001e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	08004190 	.word	0x08004190

08001e74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <RCC_Delay+0x34>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a0a      	ldr	r2, [pc, #40]	; (8001eac <RCC_Delay+0x38>)
 8001e82:	fba2 2303 	umull	r2, r3, r2, r3
 8001e86:	0a5b      	lsrs	r3, r3, #9
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	fb02 f303 	mul.w	r3, r2, r3
 8001e8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e90:	bf00      	nop
  }
  while (Delay --);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	1e5a      	subs	r2, r3, #1
 8001e96:	60fa      	str	r2, [r7, #12]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1f9      	bne.n	8001e90 <RCC_Delay+0x1c>
}
 8001e9c:	bf00      	nop
 8001e9e:	bf00      	nop
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr
 8001ea8:	2000002c 	.word	0x2000002c
 8001eac:	10624dd3 	.word	0x10624dd3

08001eb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e041      	b.n	8001f46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d106      	bne.n	8001edc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7fe fe9a 	bl	8000c10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2202      	movs	r2, #2
 8001ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3304      	adds	r3, #4
 8001eec:	4619      	mov	r1, r3
 8001eee:	4610      	mov	r0, r2
 8001ef0:	f000 fa20 	bl	8002334 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d122      	bne.n	8001faa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d11b      	bne.n	8001faa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f06f 0202 	mvn.w	r2, #2
 8001f7a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	f003 0303 	and.w	r3, r3, #3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 f9b4 	bl	80022fe <HAL_TIM_IC_CaptureCallback>
 8001f96:	e005      	b.n	8001fa4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 f9a7 	bl	80022ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f9b6 	bl	8002310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b04      	cmp	r3, #4
 8001fb6:	d122      	bne.n	8001ffe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	f003 0304 	and.w	r3, r3, #4
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	d11b      	bne.n	8001ffe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f06f 0204 	mvn.w	r2, #4
 8001fce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 f98a 	bl	80022fe <HAL_TIM_IC_CaptureCallback>
 8001fea:	e005      	b.n	8001ff8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 f97d 	bl	80022ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f98c 	bl	8002310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	f003 0308 	and.w	r3, r3, #8
 8002008:	2b08      	cmp	r3, #8
 800200a:	d122      	bne.n	8002052 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	2b08      	cmp	r3, #8
 8002018:	d11b      	bne.n	8002052 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f06f 0208 	mvn.w	r2, #8
 8002022:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2204      	movs	r2, #4
 8002028:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	69db      	ldr	r3, [r3, #28]
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	2b00      	cmp	r3, #0
 8002036:	d003      	beq.n	8002040 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 f960 	bl	80022fe <HAL_TIM_IC_CaptureCallback>
 800203e:	e005      	b.n	800204c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 f953 	bl	80022ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f962 	bl	8002310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	f003 0310 	and.w	r3, r3, #16
 800205c:	2b10      	cmp	r3, #16
 800205e:	d122      	bne.n	80020a6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	f003 0310 	and.w	r3, r3, #16
 800206a:	2b10      	cmp	r3, #16
 800206c:	d11b      	bne.n	80020a6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f06f 0210 	mvn.w	r2, #16
 8002076:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2208      	movs	r2, #8
 800207c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	69db      	ldr	r3, [r3, #28]
 8002084:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 f936 	bl	80022fe <HAL_TIM_IC_CaptureCallback>
 8002092:	e005      	b.n	80020a0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f929 	bl	80022ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f938 	bl	8002310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d10e      	bne.n	80020d2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d107      	bne.n	80020d2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f06f 0201 	mvn.w	r2, #1
 80020ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7fe fedb 	bl	8000e88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020dc:	2b80      	cmp	r3, #128	; 0x80
 80020de:	d10e      	bne.n	80020fe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ea:	2b80      	cmp	r3, #128	; 0x80
 80020ec:	d107      	bne.n	80020fe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 fa6a 	bl	80025d2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002108:	2b40      	cmp	r3, #64	; 0x40
 800210a:	d10e      	bne.n	800212a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002116:	2b40      	cmp	r3, #64	; 0x40
 8002118:	d107      	bne.n	800212a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002122:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 f8fc 	bl	8002322 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	f003 0320 	and.w	r3, r3, #32
 8002134:	2b20      	cmp	r3, #32
 8002136:	d10e      	bne.n	8002156 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	f003 0320 	and.w	r3, r3, #32
 8002142:	2b20      	cmp	r3, #32
 8002144:	d107      	bne.n	8002156 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f06f 0220 	mvn.w	r2, #32
 800214e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 fa35 	bl	80025c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b084      	sub	sp, #16
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
 8002166:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002168:	2300      	movs	r3, #0
 800216a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002172:	2b01      	cmp	r3, #1
 8002174:	d101      	bne.n	800217a <HAL_TIM_ConfigClockSource+0x1c>
 8002176:	2302      	movs	r3, #2
 8002178:	e0b4      	b.n	80022e4 <HAL_TIM_ConfigClockSource+0x186>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2202      	movs	r2, #2
 8002186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002198:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021a0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021b2:	d03e      	beq.n	8002232 <HAL_TIM_ConfigClockSource+0xd4>
 80021b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021b8:	f200 8087 	bhi.w	80022ca <HAL_TIM_ConfigClockSource+0x16c>
 80021bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021c0:	f000 8086 	beq.w	80022d0 <HAL_TIM_ConfigClockSource+0x172>
 80021c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021c8:	d87f      	bhi.n	80022ca <HAL_TIM_ConfigClockSource+0x16c>
 80021ca:	2b70      	cmp	r3, #112	; 0x70
 80021cc:	d01a      	beq.n	8002204 <HAL_TIM_ConfigClockSource+0xa6>
 80021ce:	2b70      	cmp	r3, #112	; 0x70
 80021d0:	d87b      	bhi.n	80022ca <HAL_TIM_ConfigClockSource+0x16c>
 80021d2:	2b60      	cmp	r3, #96	; 0x60
 80021d4:	d050      	beq.n	8002278 <HAL_TIM_ConfigClockSource+0x11a>
 80021d6:	2b60      	cmp	r3, #96	; 0x60
 80021d8:	d877      	bhi.n	80022ca <HAL_TIM_ConfigClockSource+0x16c>
 80021da:	2b50      	cmp	r3, #80	; 0x50
 80021dc:	d03c      	beq.n	8002258 <HAL_TIM_ConfigClockSource+0xfa>
 80021de:	2b50      	cmp	r3, #80	; 0x50
 80021e0:	d873      	bhi.n	80022ca <HAL_TIM_ConfigClockSource+0x16c>
 80021e2:	2b40      	cmp	r3, #64	; 0x40
 80021e4:	d058      	beq.n	8002298 <HAL_TIM_ConfigClockSource+0x13a>
 80021e6:	2b40      	cmp	r3, #64	; 0x40
 80021e8:	d86f      	bhi.n	80022ca <HAL_TIM_ConfigClockSource+0x16c>
 80021ea:	2b30      	cmp	r3, #48	; 0x30
 80021ec:	d064      	beq.n	80022b8 <HAL_TIM_ConfigClockSource+0x15a>
 80021ee:	2b30      	cmp	r3, #48	; 0x30
 80021f0:	d86b      	bhi.n	80022ca <HAL_TIM_ConfigClockSource+0x16c>
 80021f2:	2b20      	cmp	r3, #32
 80021f4:	d060      	beq.n	80022b8 <HAL_TIM_ConfigClockSource+0x15a>
 80021f6:	2b20      	cmp	r3, #32
 80021f8:	d867      	bhi.n	80022ca <HAL_TIM_ConfigClockSource+0x16c>
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d05c      	beq.n	80022b8 <HAL_TIM_ConfigClockSource+0x15a>
 80021fe:	2b10      	cmp	r3, #16
 8002200:	d05a      	beq.n	80022b8 <HAL_TIM_ConfigClockSource+0x15a>
 8002202:	e062      	b.n	80022ca <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6818      	ldr	r0, [r3, #0]
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	6899      	ldr	r1, [r3, #8]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	f000 f95d 	bl	80024d2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002226:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68ba      	ldr	r2, [r7, #8]
 800222e:	609a      	str	r2, [r3, #8]
      break;
 8002230:	e04f      	b.n	80022d2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6818      	ldr	r0, [r3, #0]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	6899      	ldr	r1, [r3, #8]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	f000 f946 	bl	80024d2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002254:	609a      	str	r2, [r3, #8]
      break;
 8002256:	e03c      	b.n	80022d2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6818      	ldr	r0, [r3, #0]
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	6859      	ldr	r1, [r3, #4]
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	461a      	mov	r2, r3
 8002266:	f000 f8bd 	bl	80023e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2150      	movs	r1, #80	; 0x50
 8002270:	4618      	mov	r0, r3
 8002272:	f000 f914 	bl	800249e <TIM_ITRx_SetConfig>
      break;
 8002276:	e02c      	b.n	80022d2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6818      	ldr	r0, [r3, #0]
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	6859      	ldr	r1, [r3, #4]
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	461a      	mov	r2, r3
 8002286:	f000 f8db 	bl	8002440 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2160      	movs	r1, #96	; 0x60
 8002290:	4618      	mov	r0, r3
 8002292:	f000 f904 	bl	800249e <TIM_ITRx_SetConfig>
      break;
 8002296:	e01c      	b.n	80022d2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6818      	ldr	r0, [r3, #0]
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	6859      	ldr	r1, [r3, #4]
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	461a      	mov	r2, r3
 80022a6:	f000 f89d 	bl	80023e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2140      	movs	r1, #64	; 0x40
 80022b0:	4618      	mov	r0, r3
 80022b2:	f000 f8f4 	bl	800249e <TIM_ITRx_SetConfig>
      break;
 80022b6:	e00c      	b.n	80022d2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4619      	mov	r1, r3
 80022c2:	4610      	mov	r0, r2
 80022c4:	f000 f8eb 	bl	800249e <TIM_ITRx_SetConfig>
      break;
 80022c8:	e003      	b.n	80022d2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	73fb      	strb	r3, [r7, #15]
      break;
 80022ce:	e000      	b.n	80022d2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80022d0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80022e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc80      	pop	{r7}
 80022fc:	4770      	bx	lr

080022fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr

08002310 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	bc80      	pop	{r7}
 8002320:	4770      	bx	lr

08002322 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr

08002334 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a25      	ldr	r2, [pc, #148]	; (80023dc <TIM_Base_SetConfig+0xa8>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d007      	beq.n	800235c <TIM_Base_SetConfig+0x28>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002352:	d003      	beq.n	800235c <TIM_Base_SetConfig+0x28>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a22      	ldr	r2, [pc, #136]	; (80023e0 <TIM_Base_SetConfig+0xac>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d108      	bne.n	800236e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002362:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	4313      	orrs	r3, r2
 800236c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a1a      	ldr	r2, [pc, #104]	; (80023dc <TIM_Base_SetConfig+0xa8>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d007      	beq.n	8002386 <TIM_Base_SetConfig+0x52>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800237c:	d003      	beq.n	8002386 <TIM_Base_SetConfig+0x52>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a17      	ldr	r2, [pc, #92]	; (80023e0 <TIM_Base_SetConfig+0xac>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d108      	bne.n	8002398 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800238c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	4313      	orrs	r3, r2
 8002396:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a07      	ldr	r2, [pc, #28]	; (80023dc <TIM_Base_SetConfig+0xa8>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d103      	bne.n	80023cc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	691a      	ldr	r2, [r3, #16]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	615a      	str	r2, [r3, #20]
}
 80023d2:	bf00      	nop
 80023d4:	3714      	adds	r7, #20
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc80      	pop	{r7}
 80023da:	4770      	bx	lr
 80023dc:	40012c00 	.word	0x40012c00
 80023e0:	40000400 	.word	0x40000400

080023e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b087      	sub	sp, #28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	f023 0201 	bic.w	r2, r3, #1
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800240e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	011b      	lsls	r3, r3, #4
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	4313      	orrs	r3, r2
 8002418:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f023 030a 	bic.w	r3, r3, #10
 8002420:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	4313      	orrs	r3, r2
 8002428:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	621a      	str	r2, [r3, #32]
}
 8002436:	bf00      	nop
 8002438:	371c      	adds	r7, #28
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr

08002440 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002440:	b480      	push	{r7}
 8002442:	b087      	sub	sp, #28
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	f023 0210 	bic.w	r2, r3, #16
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800246a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	031b      	lsls	r3, r3, #12
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	4313      	orrs	r3, r2
 8002474:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800247c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	011b      	lsls	r3, r3, #4
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	4313      	orrs	r3, r2
 8002486:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	621a      	str	r2, [r3, #32]
}
 8002494:	bf00      	nop
 8002496:	371c      	adds	r7, #28
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr

0800249e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800249e:	b480      	push	{r7}
 80024a0:	b085      	sub	sp, #20
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
 80024a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	f043 0307 	orr.w	r3, r3, #7
 80024c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	609a      	str	r2, [r3, #8]
}
 80024c8:	bf00      	nop
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bc80      	pop	{r7}
 80024d0:	4770      	bx	lr

080024d2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b087      	sub	sp, #28
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	60f8      	str	r0, [r7, #12]
 80024da:	60b9      	str	r1, [r7, #8]
 80024dc:	607a      	str	r2, [r7, #4]
 80024de:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024ec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	021a      	lsls	r2, r3, #8
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	431a      	orrs	r2, r3
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	609a      	str	r2, [r3, #8]
}
 8002506:	bf00      	nop
 8002508:	371c      	adds	r7, #28
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr

08002510 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002520:	2b01      	cmp	r3, #1
 8002522:	d101      	bne.n	8002528 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002524:	2302      	movs	r3, #2
 8002526:	e041      	b.n	80025ac <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2202      	movs	r2, #2
 8002534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800254e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	4313      	orrs	r3, r2
 8002558:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a14      	ldr	r2, [pc, #80]	; (80025b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d009      	beq.n	8002580 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002574:	d004      	beq.n	8002580 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a10      	ldr	r2, [pc, #64]	; (80025bc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d10c      	bne.n	800259a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002586:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	68ba      	ldr	r2, [r7, #8]
 800258e:	4313      	orrs	r3, r2
 8002590:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40012c00 	.word	0x40012c00
 80025bc:	40000400 	.word	0x40000400

080025c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc80      	pop	{r7}
 80025d0:	4770      	bx	lr

080025d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc80      	pop	{r7}
 80025e2:	4770      	bx	lr

080025e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e042      	b.n	800267c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d106      	bne.n	8002610 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7fe fb24 	bl	8000c58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2224      	movs	r2, #36	; 0x24
 8002614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68da      	ldr	r2, [r3, #12]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002626:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 fd71 	bl	8003110 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	691a      	ldr	r2, [r3, #16]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800263c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695a      	ldr	r2, [r3, #20]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800264c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68da      	ldr	r2, [r3, #12]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800265c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2220      	movs	r2, #32
 8002668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2220      	movs	r2, #32
 8002670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08a      	sub	sp, #40	; 0x28
 8002688:	af02      	add	r7, sp, #8
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	603b      	str	r3, [r7, #0]
 8002690:	4613      	mov	r3, r2
 8002692:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002694:	2300      	movs	r3, #0
 8002696:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b20      	cmp	r3, #32
 80026a2:	d16d      	bne.n	8002780 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d002      	beq.n	80026b0 <HAL_UART_Transmit+0x2c>
 80026aa:	88fb      	ldrh	r3, [r7, #6]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e066      	b.n	8002782 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2221      	movs	r2, #33	; 0x21
 80026be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026c2:	f7fe fc73 	bl	8000fac <HAL_GetTick>
 80026c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	88fa      	ldrh	r2, [r7, #6]
 80026cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	88fa      	ldrh	r2, [r7, #6]
 80026d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026dc:	d108      	bne.n	80026f0 <HAL_UART_Transmit+0x6c>
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d104      	bne.n	80026f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	61bb      	str	r3, [r7, #24]
 80026ee:	e003      	b.n	80026f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026f4:	2300      	movs	r3, #0
 80026f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80026f8:	e02a      	b.n	8002750 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	2200      	movs	r2, #0
 8002702:	2180      	movs	r1, #128	; 0x80
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f000 faf9 	bl	8002cfc <UART_WaitOnFlagUntilTimeout>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e036      	b.n	8002782 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10b      	bne.n	8002732 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	881b      	ldrh	r3, [r3, #0]
 800271e:	461a      	mov	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002728:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	3302      	adds	r3, #2
 800272e:	61bb      	str	r3, [r7, #24]
 8002730:	e007      	b.n	8002742 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	781a      	ldrb	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	3301      	adds	r3, #1
 8002740:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002746:	b29b      	uxth	r3, r3
 8002748:	3b01      	subs	r3, #1
 800274a:	b29a      	uxth	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002754:	b29b      	uxth	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1cf      	bne.n	80026fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	2200      	movs	r2, #0
 8002762:	2140      	movs	r1, #64	; 0x40
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f000 fac9 	bl	8002cfc <UART_WaitOnFlagUntilTimeout>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e006      	b.n	8002782 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2220      	movs	r2, #32
 8002778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800277c:	2300      	movs	r3, #0
 800277e:	e000      	b.n	8002782 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002780:	2302      	movs	r3, #2
  }
}
 8002782:	4618      	mov	r0, r3
 8002784:	3720      	adds	r7, #32
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
	...

0800278c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b0ba      	sub	sp, #232	; 0xe8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80027be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80027ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10f      	bne.n	80027f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027d6:	f003 0320 	and.w	r3, r3, #32
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d009      	beq.n	80027f2 <HAL_UART_IRQHandler+0x66>
 80027de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027e2:	f003 0320 	and.w	r3, r3, #32
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 fbd1 	bl	8002f92 <UART_Receive_IT>
      return;
 80027f0:	e25b      	b.n	8002caa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80027f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 80de 	beq.w	80029b8 <HAL_UART_IRQHandler+0x22c>
 80027fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b00      	cmp	r3, #0
 8002806:	d106      	bne.n	8002816 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800280c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 80d1 	beq.w	80029b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00b      	beq.n	800283a <HAL_UART_IRQHandler+0xae>
 8002822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282a:	2b00      	cmp	r3, #0
 800282c:	d005      	beq.n	800283a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002832:	f043 0201 	orr.w	r2, r3, #1
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800283a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800283e:	f003 0304 	and.w	r3, r3, #4
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00b      	beq.n	800285e <HAL_UART_IRQHandler+0xd2>
 8002846:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	d005      	beq.n	800285e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002856:	f043 0202 	orr.w	r2, r3, #2
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800285e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00b      	beq.n	8002882 <HAL_UART_IRQHandler+0xf6>
 800286a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	d005      	beq.n	8002882 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287a:	f043 0204 	orr.w	r2, r3, #4
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002886:	f003 0308 	and.w	r3, r3, #8
 800288a:	2b00      	cmp	r3, #0
 800288c:	d011      	beq.n	80028b2 <HAL_UART_IRQHandler+0x126>
 800288e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002892:	f003 0320 	and.w	r3, r3, #32
 8002896:	2b00      	cmp	r3, #0
 8002898:	d105      	bne.n	80028a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800289a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d005      	beq.n	80028b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028aa:	f043 0208 	orr.w	r2, r3, #8
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 81f2 	beq.w	8002ca0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028c0:	f003 0320 	and.w	r3, r3, #32
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d008      	beq.n	80028da <HAL_UART_IRQHandler+0x14e>
 80028c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028cc:	f003 0320 	and.w	r3, r3, #32
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d002      	beq.n	80028da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 fb5c 	bl	8002f92 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	bf14      	ite	ne
 80028e8:	2301      	movne	r3, #1
 80028ea:	2300      	moveq	r3, #0
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d103      	bne.n	8002906 <HAL_UART_IRQHandler+0x17a>
 80028fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002902:	2b00      	cmp	r3, #0
 8002904:	d04f      	beq.n	80029a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 fa66 	bl	8002dd8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002916:	2b00      	cmp	r3, #0
 8002918:	d041      	beq.n	800299e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	3314      	adds	r3, #20
 8002920:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002924:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002928:	e853 3f00 	ldrex	r3, [r3]
 800292c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002930:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002934:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002938:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	3314      	adds	r3, #20
 8002942:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002946:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800294a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800294e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002952:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002956:	e841 2300 	strex	r3, r2, [r1]
 800295a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800295e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1d9      	bne.n	800291a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296a:	2b00      	cmp	r3, #0
 800296c:	d013      	beq.n	8002996 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002972:	4a7e      	ldr	r2, [pc, #504]	; (8002b6c <HAL_UART_IRQHandler+0x3e0>)
 8002974:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297a:	4618      	mov	r0, r3
 800297c:	f7fe fc68 	bl	8001250 <HAL_DMA_Abort_IT>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d016      	beq.n	80029b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800298a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002990:	4610      	mov	r0, r2
 8002992:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002994:	e00e      	b.n	80029b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f99c 	bl	8002cd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800299c:	e00a      	b.n	80029b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f998 	bl	8002cd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029a4:	e006      	b.n	80029b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f994 	bl	8002cd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80029b2:	e175      	b.n	8002ca0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029b4:	bf00      	nop
    return;
 80029b6:	e173      	b.n	8002ca0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029bc:	2b01      	cmp	r3, #1
 80029be:	f040 814f 	bne.w	8002c60 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80029c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029c6:	f003 0310 	and.w	r3, r3, #16
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 8148 	beq.w	8002c60 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80029d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029d4:	f003 0310 	and.w	r3, r3, #16
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 8141 	beq.w	8002c60 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029de:	2300      	movs	r3, #0
 80029e0:	60bb      	str	r3, [r7, #8]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	60bb      	str	r3, [r7, #8]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	60bb      	str	r3, [r7, #8]
 80029f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f000 80b6 	beq.w	8002b70 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f000 8145 	beq.w	8002ca4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a22:	429a      	cmp	r2, r3
 8002a24:	f080 813e 	bcs.w	8002ca4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a2e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	2b20      	cmp	r3, #32
 8002a38:	f000 8088 	beq.w	8002b4c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	330c      	adds	r3, #12
 8002a42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a4a:	e853 3f00 	ldrex	r3, [r3]
 8002a4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002a52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	330c      	adds	r3, #12
 8002a64:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002a68:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002a6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a70:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002a74:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a78:	e841 2300 	strex	r3, r2, [r1]
 8002a7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002a80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1d9      	bne.n	8002a3c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	3314      	adds	r3, #20
 8002a8e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a92:	e853 3f00 	ldrex	r3, [r3]
 8002a96:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002a98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a9a:	f023 0301 	bic.w	r3, r3, #1
 8002a9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	3314      	adds	r3, #20
 8002aa8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002aac:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002ab0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ab2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002ab4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ab8:	e841 2300 	strex	r3, r2, [r1]
 8002abc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002abe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1e1      	bne.n	8002a88 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	3314      	adds	r3, #20
 8002aca:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002acc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ace:	e853 3f00 	ldrex	r3, [r3]
 8002ad2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002ad4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ad6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ada:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	3314      	adds	r3, #20
 8002ae4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002ae8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002aea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002aee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002af0:	e841 2300 	strex	r3, r2, [r1]
 8002af4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002af6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1e3      	bne.n	8002ac4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2220      	movs	r2, #32
 8002b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	330c      	adds	r3, #12
 8002b10:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b14:	e853 3f00 	ldrex	r3, [r3]
 8002b18:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002b1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b1c:	f023 0310 	bic.w	r3, r3, #16
 8002b20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	330c      	adds	r3, #12
 8002b2a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002b2e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b30:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b32:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b36:	e841 2300 	strex	r3, r2, [r1]
 8002b3a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002b3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1e3      	bne.n	8002b0a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fe fb47 	bl	80011da <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2202      	movs	r2, #2
 8002b50:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	4619      	mov	r1, r3
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f8bf 	bl	8002ce6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b68:	e09c      	b.n	8002ca4 <HAL_UART_IRQHandler+0x518>
 8002b6a:	bf00      	nop
 8002b6c:	08002e9d 	.word	0x08002e9d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f000 808e 	beq.w	8002ca8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002b8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 8089 	beq.w	8002ca8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	330c      	adds	r3, #12
 8002b9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba0:	e853 3f00 	ldrex	r3, [r3]
 8002ba4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ba8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002bac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	330c      	adds	r3, #12
 8002bb6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002bba:	647a      	str	r2, [r7, #68]	; 0x44
 8002bbc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002bc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002bc2:	e841 2300 	strex	r3, r2, [r1]
 8002bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1e3      	bne.n	8002b96 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	3314      	adds	r3, #20
 8002bd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd8:	e853 3f00 	ldrex	r3, [r3]
 8002bdc:	623b      	str	r3, [r7, #32]
   return(result);
 8002bde:	6a3b      	ldr	r3, [r7, #32]
 8002be0:	f023 0301 	bic.w	r3, r3, #1
 8002be4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	3314      	adds	r3, #20
 8002bee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002bf2:	633a      	str	r2, [r7, #48]	; 0x30
 8002bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002bf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bfa:	e841 2300 	strex	r3, r2, [r1]
 8002bfe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1e3      	bne.n	8002bce <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2220      	movs	r2, #32
 8002c0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	330c      	adds	r3, #12
 8002c1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	e853 3f00 	ldrex	r3, [r3]
 8002c22:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f023 0310 	bic.w	r3, r3, #16
 8002c2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	330c      	adds	r3, #12
 8002c34:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002c38:	61fa      	str	r2, [r7, #28]
 8002c3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c3c:	69b9      	ldr	r1, [r7, #24]
 8002c3e:	69fa      	ldr	r2, [r7, #28]
 8002c40:	e841 2300 	strex	r3, r2, [r1]
 8002c44:	617b      	str	r3, [r7, #20]
   return(result);
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1e3      	bne.n	8002c14 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2202      	movs	r2, #2
 8002c50:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c56:	4619      	mov	r1, r3
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 f844 	bl	8002ce6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c5e:	e023      	b.n	8002ca8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d009      	beq.n	8002c80 <HAL_UART_IRQHandler+0x4f4>
 8002c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d003      	beq.n	8002c80 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 f923 	bl	8002ec4 <UART_Transmit_IT>
    return;
 8002c7e:	e014      	b.n	8002caa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00e      	beq.n	8002caa <HAL_UART_IRQHandler+0x51e>
 8002c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d008      	beq.n	8002caa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 f962 	bl	8002f62 <UART_EndTransmit_IT>
    return;
 8002c9e:	e004      	b.n	8002caa <HAL_UART_IRQHandler+0x51e>
    return;
 8002ca0:	bf00      	nop
 8002ca2:	e002      	b.n	8002caa <HAL_UART_IRQHandler+0x51e>
      return;
 8002ca4:	bf00      	nop
 8002ca6:	e000      	b.n	8002caa <HAL_UART_IRQHandler+0x51e>
      return;
 8002ca8:	bf00      	nop
  }
}
 8002caa:	37e8      	adds	r7, #232	; 0xe8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr

08002cc2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bc80      	pop	{r7}
 8002ce4:	4770      	bx	lr

08002ce6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
 8002cee:	460b      	mov	r3, r1
 8002cf0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr

08002cfc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b090      	sub	sp, #64	; 0x40
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	603b      	str	r3, [r7, #0]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d0c:	e050      	b.n	8002db0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d14:	d04c      	beq.n	8002db0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d007      	beq.n	8002d2c <UART_WaitOnFlagUntilTimeout+0x30>
 8002d1c:	f7fe f946 	bl	8000fac <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d241      	bcs.n	8002db0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	330c      	adds	r3, #12
 8002d32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d36:	e853 3f00 	ldrex	r3, [r3]
 8002d3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	330c      	adds	r3, #12
 8002d4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d4c:	637a      	str	r2, [r7, #52]	; 0x34
 8002d4e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d54:	e841 2300 	strex	r3, r2, [r1]
 8002d58:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1e5      	bne.n	8002d2c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	3314      	adds	r3, #20
 8002d66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	e853 3f00 	ldrex	r3, [r3]
 8002d6e:	613b      	str	r3, [r7, #16]
   return(result);
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	f023 0301 	bic.w	r3, r3, #1
 8002d76:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	3314      	adds	r3, #20
 8002d7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d80:	623a      	str	r2, [r7, #32]
 8002d82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d84:	69f9      	ldr	r1, [r7, #28]
 8002d86:	6a3a      	ldr	r2, [r7, #32]
 8002d88:	e841 2300 	strex	r3, r2, [r1]
 8002d8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1e5      	bne.n	8002d60 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2220      	movs	r2, #32
 8002d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e00f      	b.n	8002dd0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	4013      	ands	r3, r2
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	bf0c      	ite	eq
 8002dc0:	2301      	moveq	r3, #1
 8002dc2:	2300      	movne	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	79fb      	ldrb	r3, [r7, #7]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d09f      	beq.n	8002d0e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3740      	adds	r7, #64	; 0x40
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b095      	sub	sp, #84	; 0x54
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	330c      	adds	r3, #12
 8002de6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dea:	e853 3f00 	ldrex	r3, [r3]
 8002dee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002df6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	330c      	adds	r3, #12
 8002dfe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e00:	643a      	str	r2, [r7, #64]	; 0x40
 8002e02:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002e06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002e08:	e841 2300 	strex	r3, r2, [r1]
 8002e0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1e5      	bne.n	8002de0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	3314      	adds	r3, #20
 8002e1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e1c:	6a3b      	ldr	r3, [r7, #32]
 8002e1e:	e853 3f00 	ldrex	r3, [r3]
 8002e22:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	f023 0301 	bic.w	r3, r3, #1
 8002e2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	3314      	adds	r3, #20
 8002e32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e3c:	e841 2300 	strex	r3, r2, [r1]
 8002e40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1e5      	bne.n	8002e14 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d119      	bne.n	8002e84 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	330c      	adds	r3, #12
 8002e56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	e853 3f00 	ldrex	r3, [r3]
 8002e5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	f023 0310 	bic.w	r3, r3, #16
 8002e66:	647b      	str	r3, [r7, #68]	; 0x44
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	330c      	adds	r3, #12
 8002e6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e70:	61ba      	str	r2, [r7, #24]
 8002e72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e74:	6979      	ldr	r1, [r7, #20]
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	e841 2300 	strex	r3, r2, [r1]
 8002e7c:	613b      	str	r3, [r7, #16]
   return(result);
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1e5      	bne.n	8002e50 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2220      	movs	r2, #32
 8002e88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002e92:	bf00      	nop
 8002e94:	3754      	adds	r7, #84	; 0x54
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bc80      	pop	{r7}
 8002e9a:	4770      	bx	lr

08002e9c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f7ff ff0c 	bl	8002cd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ebc:	bf00      	nop
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b21      	cmp	r3, #33	; 0x21
 8002ed6:	d13e      	bne.n	8002f56 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ee0:	d114      	bne.n	8002f0c <UART_Transmit_IT+0x48>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d110      	bne.n	8002f0c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	881b      	ldrh	r3, [r3, #0]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002efe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	1c9a      	adds	r2, r3, #2
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	621a      	str	r2, [r3, #32]
 8002f0a:	e008      	b.n	8002f1e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	1c59      	adds	r1, r3, #1
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	6211      	str	r1, [r2, #32]
 8002f16:	781a      	ldrb	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	3b01      	subs	r3, #1
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10f      	bne.n	8002f52 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68da      	ldr	r2, [r3, #12]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f40:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68da      	ldr	r2, [r3, #12]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f50:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002f52:	2300      	movs	r3, #0
 8002f54:	e000      	b.n	8002f58 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002f56:	2302      	movs	r3, #2
  }
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3714      	adds	r7, #20
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bc80      	pop	{r7}
 8002f60:	4770      	bx	lr

08002f62 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b082      	sub	sp, #8
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68da      	ldr	r2, [r3, #12]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f78:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7ff fe94 	bl	8002cb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b08c      	sub	sp, #48	; 0x30
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b22      	cmp	r3, #34	; 0x22
 8002fa4:	f040 80ae 	bne.w	8003104 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fb0:	d117      	bne.n	8002fe2 <UART_Receive_IT+0x50>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d113      	bne.n	8002fe2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fda:	1c9a      	adds	r2, r3, #2
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	629a      	str	r2, [r3, #40]	; 0x28
 8002fe0:	e026      	b.n	8003030 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ff4:	d007      	beq.n	8003006 <UART_Receive_IT+0x74>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10a      	bne.n	8003014 <UART_Receive_IT+0x82>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d106      	bne.n	8003014 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	b2da      	uxtb	r2, r3
 800300e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003010:	701a      	strb	r2, [r3, #0]
 8003012:	e008      	b.n	8003026 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	b2db      	uxtb	r3, r3
 800301c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003020:	b2da      	uxtb	r2, r3
 8003022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003024:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302a:	1c5a      	adds	r2, r3, #1
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003034:	b29b      	uxth	r3, r3
 8003036:	3b01      	subs	r3, #1
 8003038:	b29b      	uxth	r3, r3
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	4619      	mov	r1, r3
 800303e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003040:	2b00      	cmp	r3, #0
 8003042:	d15d      	bne.n	8003100 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68da      	ldr	r2, [r3, #12]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 0220 	bic.w	r2, r2, #32
 8003052:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68da      	ldr	r2, [r3, #12]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003062:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695a      	ldr	r2, [r3, #20]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 0201 	bic.w	r2, r2, #1
 8003072:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2220      	movs	r2, #32
 8003078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	2b01      	cmp	r3, #1
 8003088:	d135      	bne.n	80030f6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	330c      	adds	r3, #12
 8003096:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	e853 3f00 	ldrex	r3, [r3]
 800309e:	613b      	str	r3, [r7, #16]
   return(result);
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	f023 0310 	bic.w	r3, r3, #16
 80030a6:	627b      	str	r3, [r7, #36]	; 0x24
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	330c      	adds	r3, #12
 80030ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030b0:	623a      	str	r2, [r7, #32]
 80030b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b4:	69f9      	ldr	r1, [r7, #28]
 80030b6:	6a3a      	ldr	r2, [r7, #32]
 80030b8:	e841 2300 	strex	r3, r2, [r1]
 80030bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1e5      	bne.n	8003090 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0310 	and.w	r3, r3, #16
 80030ce:	2b10      	cmp	r3, #16
 80030d0:	d10a      	bne.n	80030e8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030d2:	2300      	movs	r3, #0
 80030d4:	60fb      	str	r3, [r7, #12]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	60fb      	str	r3, [r7, #12]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	60fb      	str	r3, [r7, #12]
 80030e6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80030ec:	4619      	mov	r1, r3
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7ff fdf9 	bl	8002ce6 <HAL_UARTEx_RxEventCallback>
 80030f4:	e002      	b.n	80030fc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7ff fde3 	bl	8002cc2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80030fc:	2300      	movs	r3, #0
 80030fe:	e002      	b.n	8003106 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003100:	2300      	movs	r3, #0
 8003102:	e000      	b.n	8003106 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003104:	2302      	movs	r3, #2
  }
}
 8003106:	4618      	mov	r0, r3
 8003108:	3730      	adds	r7, #48	; 0x30
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
	...

08003110 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689a      	ldr	r2, [r3, #8]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	4313      	orrs	r3, r2
 800313e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800314a:	f023 030c 	bic.w	r3, r3, #12
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	6812      	ldr	r2, [r2, #0]
 8003152:	68b9      	ldr	r1, [r7, #8]
 8003154:	430b      	orrs	r3, r1
 8003156:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699a      	ldr	r2, [r3, #24]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a2c      	ldr	r2, [pc, #176]	; (8003224 <UART_SetConfig+0x114>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d103      	bne.n	8003180 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003178:	f7fe fe68 	bl	8001e4c <HAL_RCC_GetPCLK2Freq>
 800317c:	60f8      	str	r0, [r7, #12]
 800317e:	e002      	b.n	8003186 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003180:	f7fe fe50 	bl	8001e24 <HAL_RCC_GetPCLK1Freq>
 8003184:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	4613      	mov	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	009a      	lsls	r2, r3, #2
 8003190:	441a      	add	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	fbb2 f3f3 	udiv	r3, r2, r3
 800319c:	4a22      	ldr	r2, [pc, #136]	; (8003228 <UART_SetConfig+0x118>)
 800319e:	fba2 2303 	umull	r2, r3, r2, r3
 80031a2:	095b      	lsrs	r3, r3, #5
 80031a4:	0119      	lsls	r1, r3, #4
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	4613      	mov	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	009a      	lsls	r2, r3, #2
 80031b0:	441a      	add	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80031bc:	4b1a      	ldr	r3, [pc, #104]	; (8003228 <UART_SetConfig+0x118>)
 80031be:	fba3 0302 	umull	r0, r3, r3, r2
 80031c2:	095b      	lsrs	r3, r3, #5
 80031c4:	2064      	movs	r0, #100	; 0x64
 80031c6:	fb00 f303 	mul.w	r3, r0, r3
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	3332      	adds	r3, #50	; 0x32
 80031d0:	4a15      	ldr	r2, [pc, #84]	; (8003228 <UART_SetConfig+0x118>)
 80031d2:	fba2 2303 	umull	r2, r3, r2, r3
 80031d6:	095b      	lsrs	r3, r3, #5
 80031d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031dc:	4419      	add	r1, r3
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	4613      	mov	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	009a      	lsls	r2, r3, #2
 80031e8:	441a      	add	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80031f4:	4b0c      	ldr	r3, [pc, #48]	; (8003228 <UART_SetConfig+0x118>)
 80031f6:	fba3 0302 	umull	r0, r3, r3, r2
 80031fa:	095b      	lsrs	r3, r3, #5
 80031fc:	2064      	movs	r0, #100	; 0x64
 80031fe:	fb00 f303 	mul.w	r3, r0, r3
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	3332      	adds	r3, #50	; 0x32
 8003208:	4a07      	ldr	r2, [pc, #28]	; (8003228 <UART_SetConfig+0x118>)
 800320a:	fba2 2303 	umull	r2, r3, r2, r3
 800320e:	095b      	lsrs	r3, r3, #5
 8003210:	f003 020f 	and.w	r2, r3, #15
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	440a      	add	r2, r1
 800321a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800321c:	bf00      	nop
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40013800 	.word	0x40013800
 8003228:	51eb851f 	.word	0x51eb851f

0800322c <__errno>:
 800322c:	4b01      	ldr	r3, [pc, #4]	; (8003234 <__errno+0x8>)
 800322e:	6818      	ldr	r0, [r3, #0]
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	20000038 	.word	0x20000038

08003238 <__libc_init_array>:
 8003238:	b570      	push	{r4, r5, r6, lr}
 800323a:	2600      	movs	r6, #0
 800323c:	4d0c      	ldr	r5, [pc, #48]	; (8003270 <__libc_init_array+0x38>)
 800323e:	4c0d      	ldr	r4, [pc, #52]	; (8003274 <__libc_init_array+0x3c>)
 8003240:	1b64      	subs	r4, r4, r5
 8003242:	10a4      	asrs	r4, r4, #2
 8003244:	42a6      	cmp	r6, r4
 8003246:	d109      	bne.n	800325c <__libc_init_array+0x24>
 8003248:	f000 ff82 	bl	8004150 <_init>
 800324c:	2600      	movs	r6, #0
 800324e:	4d0a      	ldr	r5, [pc, #40]	; (8003278 <__libc_init_array+0x40>)
 8003250:	4c0a      	ldr	r4, [pc, #40]	; (800327c <__libc_init_array+0x44>)
 8003252:	1b64      	subs	r4, r4, r5
 8003254:	10a4      	asrs	r4, r4, #2
 8003256:	42a6      	cmp	r6, r4
 8003258:	d105      	bne.n	8003266 <__libc_init_array+0x2e>
 800325a:	bd70      	pop	{r4, r5, r6, pc}
 800325c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003260:	4798      	blx	r3
 8003262:	3601      	adds	r6, #1
 8003264:	e7ee      	b.n	8003244 <__libc_init_array+0xc>
 8003266:	f855 3b04 	ldr.w	r3, [r5], #4
 800326a:	4798      	blx	r3
 800326c:	3601      	adds	r6, #1
 800326e:	e7f2      	b.n	8003256 <__libc_init_array+0x1e>
 8003270:	08004244 	.word	0x08004244
 8003274:	08004244 	.word	0x08004244
 8003278:	08004244 	.word	0x08004244
 800327c:	08004248 	.word	0x08004248

08003280 <memset>:
 8003280:	4603      	mov	r3, r0
 8003282:	4402      	add	r2, r0
 8003284:	4293      	cmp	r3, r2
 8003286:	d100      	bne.n	800328a <memset+0xa>
 8003288:	4770      	bx	lr
 800328a:	f803 1b01 	strb.w	r1, [r3], #1
 800328e:	e7f9      	b.n	8003284 <memset+0x4>

08003290 <iprintf>:
 8003290:	b40f      	push	{r0, r1, r2, r3}
 8003292:	4b0a      	ldr	r3, [pc, #40]	; (80032bc <iprintf+0x2c>)
 8003294:	b513      	push	{r0, r1, r4, lr}
 8003296:	681c      	ldr	r4, [r3, #0]
 8003298:	b124      	cbz	r4, 80032a4 <iprintf+0x14>
 800329a:	69a3      	ldr	r3, [r4, #24]
 800329c:	b913      	cbnz	r3, 80032a4 <iprintf+0x14>
 800329e:	4620      	mov	r0, r4
 80032a0:	f000 f866 	bl	8003370 <__sinit>
 80032a4:	ab05      	add	r3, sp, #20
 80032a6:	4620      	mov	r0, r4
 80032a8:	9a04      	ldr	r2, [sp, #16]
 80032aa:	68a1      	ldr	r1, [r4, #8]
 80032ac:	9301      	str	r3, [sp, #4]
 80032ae:	f000 f981 	bl	80035b4 <_vfiprintf_r>
 80032b2:	b002      	add	sp, #8
 80032b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032b8:	b004      	add	sp, #16
 80032ba:	4770      	bx	lr
 80032bc:	20000038 	.word	0x20000038

080032c0 <std>:
 80032c0:	2300      	movs	r3, #0
 80032c2:	b510      	push	{r4, lr}
 80032c4:	4604      	mov	r4, r0
 80032c6:	e9c0 3300 	strd	r3, r3, [r0]
 80032ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80032ce:	6083      	str	r3, [r0, #8]
 80032d0:	8181      	strh	r1, [r0, #12]
 80032d2:	6643      	str	r3, [r0, #100]	; 0x64
 80032d4:	81c2      	strh	r2, [r0, #14]
 80032d6:	6183      	str	r3, [r0, #24]
 80032d8:	4619      	mov	r1, r3
 80032da:	2208      	movs	r2, #8
 80032dc:	305c      	adds	r0, #92	; 0x5c
 80032de:	f7ff ffcf 	bl	8003280 <memset>
 80032e2:	4b05      	ldr	r3, [pc, #20]	; (80032f8 <std+0x38>)
 80032e4:	6224      	str	r4, [r4, #32]
 80032e6:	6263      	str	r3, [r4, #36]	; 0x24
 80032e8:	4b04      	ldr	r3, [pc, #16]	; (80032fc <std+0x3c>)
 80032ea:	62a3      	str	r3, [r4, #40]	; 0x28
 80032ec:	4b04      	ldr	r3, [pc, #16]	; (8003300 <std+0x40>)
 80032ee:	62e3      	str	r3, [r4, #44]	; 0x2c
 80032f0:	4b04      	ldr	r3, [pc, #16]	; (8003304 <std+0x44>)
 80032f2:	6323      	str	r3, [r4, #48]	; 0x30
 80032f4:	bd10      	pop	{r4, pc}
 80032f6:	bf00      	nop
 80032f8:	08003b61 	.word	0x08003b61
 80032fc:	08003b83 	.word	0x08003b83
 8003300:	08003bbb 	.word	0x08003bbb
 8003304:	08003bdf 	.word	0x08003bdf

08003308 <_cleanup_r>:
 8003308:	4901      	ldr	r1, [pc, #4]	; (8003310 <_cleanup_r+0x8>)
 800330a:	f000 b8af 	b.w	800346c <_fwalk_reent>
 800330e:	bf00      	nop
 8003310:	08003eb9 	.word	0x08003eb9

08003314 <__sfmoreglue>:
 8003314:	b570      	push	{r4, r5, r6, lr}
 8003316:	2568      	movs	r5, #104	; 0x68
 8003318:	1e4a      	subs	r2, r1, #1
 800331a:	4355      	muls	r5, r2
 800331c:	460e      	mov	r6, r1
 800331e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003322:	f000 f8c5 	bl	80034b0 <_malloc_r>
 8003326:	4604      	mov	r4, r0
 8003328:	b140      	cbz	r0, 800333c <__sfmoreglue+0x28>
 800332a:	2100      	movs	r1, #0
 800332c:	e9c0 1600 	strd	r1, r6, [r0]
 8003330:	300c      	adds	r0, #12
 8003332:	60a0      	str	r0, [r4, #8]
 8003334:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003338:	f7ff ffa2 	bl	8003280 <memset>
 800333c:	4620      	mov	r0, r4
 800333e:	bd70      	pop	{r4, r5, r6, pc}

08003340 <__sfp_lock_acquire>:
 8003340:	4801      	ldr	r0, [pc, #4]	; (8003348 <__sfp_lock_acquire+0x8>)
 8003342:	f000 b8b3 	b.w	80034ac <__retarget_lock_acquire_recursive>
 8003346:	bf00      	nop
 8003348:	200001b8 	.word	0x200001b8

0800334c <__sfp_lock_release>:
 800334c:	4801      	ldr	r0, [pc, #4]	; (8003354 <__sfp_lock_release+0x8>)
 800334e:	f000 b8ae 	b.w	80034ae <__retarget_lock_release_recursive>
 8003352:	bf00      	nop
 8003354:	200001b8 	.word	0x200001b8

08003358 <__sinit_lock_acquire>:
 8003358:	4801      	ldr	r0, [pc, #4]	; (8003360 <__sinit_lock_acquire+0x8>)
 800335a:	f000 b8a7 	b.w	80034ac <__retarget_lock_acquire_recursive>
 800335e:	bf00      	nop
 8003360:	200001b3 	.word	0x200001b3

08003364 <__sinit_lock_release>:
 8003364:	4801      	ldr	r0, [pc, #4]	; (800336c <__sinit_lock_release+0x8>)
 8003366:	f000 b8a2 	b.w	80034ae <__retarget_lock_release_recursive>
 800336a:	bf00      	nop
 800336c:	200001b3 	.word	0x200001b3

08003370 <__sinit>:
 8003370:	b510      	push	{r4, lr}
 8003372:	4604      	mov	r4, r0
 8003374:	f7ff fff0 	bl	8003358 <__sinit_lock_acquire>
 8003378:	69a3      	ldr	r3, [r4, #24]
 800337a:	b11b      	cbz	r3, 8003384 <__sinit+0x14>
 800337c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003380:	f7ff bff0 	b.w	8003364 <__sinit_lock_release>
 8003384:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003388:	6523      	str	r3, [r4, #80]	; 0x50
 800338a:	4b13      	ldr	r3, [pc, #76]	; (80033d8 <__sinit+0x68>)
 800338c:	4a13      	ldr	r2, [pc, #76]	; (80033dc <__sinit+0x6c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	62a2      	str	r2, [r4, #40]	; 0x28
 8003392:	42a3      	cmp	r3, r4
 8003394:	bf08      	it	eq
 8003396:	2301      	moveq	r3, #1
 8003398:	4620      	mov	r0, r4
 800339a:	bf08      	it	eq
 800339c:	61a3      	streq	r3, [r4, #24]
 800339e:	f000 f81f 	bl	80033e0 <__sfp>
 80033a2:	6060      	str	r0, [r4, #4]
 80033a4:	4620      	mov	r0, r4
 80033a6:	f000 f81b 	bl	80033e0 <__sfp>
 80033aa:	60a0      	str	r0, [r4, #8]
 80033ac:	4620      	mov	r0, r4
 80033ae:	f000 f817 	bl	80033e0 <__sfp>
 80033b2:	2200      	movs	r2, #0
 80033b4:	2104      	movs	r1, #4
 80033b6:	60e0      	str	r0, [r4, #12]
 80033b8:	6860      	ldr	r0, [r4, #4]
 80033ba:	f7ff ff81 	bl	80032c0 <std>
 80033be:	2201      	movs	r2, #1
 80033c0:	2109      	movs	r1, #9
 80033c2:	68a0      	ldr	r0, [r4, #8]
 80033c4:	f7ff ff7c 	bl	80032c0 <std>
 80033c8:	2202      	movs	r2, #2
 80033ca:	2112      	movs	r1, #18
 80033cc:	68e0      	ldr	r0, [r4, #12]
 80033ce:	f7ff ff77 	bl	80032c0 <std>
 80033d2:	2301      	movs	r3, #1
 80033d4:	61a3      	str	r3, [r4, #24]
 80033d6:	e7d1      	b.n	800337c <__sinit+0xc>
 80033d8:	080041ac 	.word	0x080041ac
 80033dc:	08003309 	.word	0x08003309

080033e0 <__sfp>:
 80033e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033e2:	4607      	mov	r7, r0
 80033e4:	f7ff ffac 	bl	8003340 <__sfp_lock_acquire>
 80033e8:	4b1e      	ldr	r3, [pc, #120]	; (8003464 <__sfp+0x84>)
 80033ea:	681e      	ldr	r6, [r3, #0]
 80033ec:	69b3      	ldr	r3, [r6, #24]
 80033ee:	b913      	cbnz	r3, 80033f6 <__sfp+0x16>
 80033f0:	4630      	mov	r0, r6
 80033f2:	f7ff ffbd 	bl	8003370 <__sinit>
 80033f6:	3648      	adds	r6, #72	; 0x48
 80033f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80033fc:	3b01      	subs	r3, #1
 80033fe:	d503      	bpl.n	8003408 <__sfp+0x28>
 8003400:	6833      	ldr	r3, [r6, #0]
 8003402:	b30b      	cbz	r3, 8003448 <__sfp+0x68>
 8003404:	6836      	ldr	r6, [r6, #0]
 8003406:	e7f7      	b.n	80033f8 <__sfp+0x18>
 8003408:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800340c:	b9d5      	cbnz	r5, 8003444 <__sfp+0x64>
 800340e:	4b16      	ldr	r3, [pc, #88]	; (8003468 <__sfp+0x88>)
 8003410:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003414:	60e3      	str	r3, [r4, #12]
 8003416:	6665      	str	r5, [r4, #100]	; 0x64
 8003418:	f000 f847 	bl	80034aa <__retarget_lock_init_recursive>
 800341c:	f7ff ff96 	bl	800334c <__sfp_lock_release>
 8003420:	2208      	movs	r2, #8
 8003422:	4629      	mov	r1, r5
 8003424:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003428:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800342c:	6025      	str	r5, [r4, #0]
 800342e:	61a5      	str	r5, [r4, #24]
 8003430:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003434:	f7ff ff24 	bl	8003280 <memset>
 8003438:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800343c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003440:	4620      	mov	r0, r4
 8003442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003444:	3468      	adds	r4, #104	; 0x68
 8003446:	e7d9      	b.n	80033fc <__sfp+0x1c>
 8003448:	2104      	movs	r1, #4
 800344a:	4638      	mov	r0, r7
 800344c:	f7ff ff62 	bl	8003314 <__sfmoreglue>
 8003450:	4604      	mov	r4, r0
 8003452:	6030      	str	r0, [r6, #0]
 8003454:	2800      	cmp	r0, #0
 8003456:	d1d5      	bne.n	8003404 <__sfp+0x24>
 8003458:	f7ff ff78 	bl	800334c <__sfp_lock_release>
 800345c:	230c      	movs	r3, #12
 800345e:	603b      	str	r3, [r7, #0]
 8003460:	e7ee      	b.n	8003440 <__sfp+0x60>
 8003462:	bf00      	nop
 8003464:	080041ac 	.word	0x080041ac
 8003468:	ffff0001 	.word	0xffff0001

0800346c <_fwalk_reent>:
 800346c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003470:	4606      	mov	r6, r0
 8003472:	4688      	mov	r8, r1
 8003474:	2700      	movs	r7, #0
 8003476:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800347a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800347e:	f1b9 0901 	subs.w	r9, r9, #1
 8003482:	d505      	bpl.n	8003490 <_fwalk_reent+0x24>
 8003484:	6824      	ldr	r4, [r4, #0]
 8003486:	2c00      	cmp	r4, #0
 8003488:	d1f7      	bne.n	800347a <_fwalk_reent+0xe>
 800348a:	4638      	mov	r0, r7
 800348c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003490:	89ab      	ldrh	r3, [r5, #12]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d907      	bls.n	80034a6 <_fwalk_reent+0x3a>
 8003496:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800349a:	3301      	adds	r3, #1
 800349c:	d003      	beq.n	80034a6 <_fwalk_reent+0x3a>
 800349e:	4629      	mov	r1, r5
 80034a0:	4630      	mov	r0, r6
 80034a2:	47c0      	blx	r8
 80034a4:	4307      	orrs	r7, r0
 80034a6:	3568      	adds	r5, #104	; 0x68
 80034a8:	e7e9      	b.n	800347e <_fwalk_reent+0x12>

080034aa <__retarget_lock_init_recursive>:
 80034aa:	4770      	bx	lr

080034ac <__retarget_lock_acquire_recursive>:
 80034ac:	4770      	bx	lr

080034ae <__retarget_lock_release_recursive>:
 80034ae:	4770      	bx	lr

080034b0 <_malloc_r>:
 80034b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034b2:	1ccd      	adds	r5, r1, #3
 80034b4:	f025 0503 	bic.w	r5, r5, #3
 80034b8:	3508      	adds	r5, #8
 80034ba:	2d0c      	cmp	r5, #12
 80034bc:	bf38      	it	cc
 80034be:	250c      	movcc	r5, #12
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	4606      	mov	r6, r0
 80034c4:	db01      	blt.n	80034ca <_malloc_r+0x1a>
 80034c6:	42a9      	cmp	r1, r5
 80034c8:	d903      	bls.n	80034d2 <_malloc_r+0x22>
 80034ca:	230c      	movs	r3, #12
 80034cc:	6033      	str	r3, [r6, #0]
 80034ce:	2000      	movs	r0, #0
 80034d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034d2:	f000 fdb1 	bl	8004038 <__malloc_lock>
 80034d6:	4921      	ldr	r1, [pc, #132]	; (800355c <_malloc_r+0xac>)
 80034d8:	680a      	ldr	r2, [r1, #0]
 80034da:	4614      	mov	r4, r2
 80034dc:	b99c      	cbnz	r4, 8003506 <_malloc_r+0x56>
 80034de:	4f20      	ldr	r7, [pc, #128]	; (8003560 <_malloc_r+0xb0>)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	b923      	cbnz	r3, 80034ee <_malloc_r+0x3e>
 80034e4:	4621      	mov	r1, r4
 80034e6:	4630      	mov	r0, r6
 80034e8:	f000 fb2a 	bl	8003b40 <_sbrk_r>
 80034ec:	6038      	str	r0, [r7, #0]
 80034ee:	4629      	mov	r1, r5
 80034f0:	4630      	mov	r0, r6
 80034f2:	f000 fb25 	bl	8003b40 <_sbrk_r>
 80034f6:	1c43      	adds	r3, r0, #1
 80034f8:	d123      	bne.n	8003542 <_malloc_r+0x92>
 80034fa:	230c      	movs	r3, #12
 80034fc:	4630      	mov	r0, r6
 80034fe:	6033      	str	r3, [r6, #0]
 8003500:	f000 fda0 	bl	8004044 <__malloc_unlock>
 8003504:	e7e3      	b.n	80034ce <_malloc_r+0x1e>
 8003506:	6823      	ldr	r3, [r4, #0]
 8003508:	1b5b      	subs	r3, r3, r5
 800350a:	d417      	bmi.n	800353c <_malloc_r+0x8c>
 800350c:	2b0b      	cmp	r3, #11
 800350e:	d903      	bls.n	8003518 <_malloc_r+0x68>
 8003510:	6023      	str	r3, [r4, #0]
 8003512:	441c      	add	r4, r3
 8003514:	6025      	str	r5, [r4, #0]
 8003516:	e004      	b.n	8003522 <_malloc_r+0x72>
 8003518:	6863      	ldr	r3, [r4, #4]
 800351a:	42a2      	cmp	r2, r4
 800351c:	bf0c      	ite	eq
 800351e:	600b      	streq	r3, [r1, #0]
 8003520:	6053      	strne	r3, [r2, #4]
 8003522:	4630      	mov	r0, r6
 8003524:	f000 fd8e 	bl	8004044 <__malloc_unlock>
 8003528:	f104 000b 	add.w	r0, r4, #11
 800352c:	1d23      	adds	r3, r4, #4
 800352e:	f020 0007 	bic.w	r0, r0, #7
 8003532:	1ac2      	subs	r2, r0, r3
 8003534:	d0cc      	beq.n	80034d0 <_malloc_r+0x20>
 8003536:	1a1b      	subs	r3, r3, r0
 8003538:	50a3      	str	r3, [r4, r2]
 800353a:	e7c9      	b.n	80034d0 <_malloc_r+0x20>
 800353c:	4622      	mov	r2, r4
 800353e:	6864      	ldr	r4, [r4, #4]
 8003540:	e7cc      	b.n	80034dc <_malloc_r+0x2c>
 8003542:	1cc4      	adds	r4, r0, #3
 8003544:	f024 0403 	bic.w	r4, r4, #3
 8003548:	42a0      	cmp	r0, r4
 800354a:	d0e3      	beq.n	8003514 <_malloc_r+0x64>
 800354c:	1a21      	subs	r1, r4, r0
 800354e:	4630      	mov	r0, r6
 8003550:	f000 faf6 	bl	8003b40 <_sbrk_r>
 8003554:	3001      	adds	r0, #1
 8003556:	d1dd      	bne.n	8003514 <_malloc_r+0x64>
 8003558:	e7cf      	b.n	80034fa <_malloc_r+0x4a>
 800355a:	bf00      	nop
 800355c:	20000114 	.word	0x20000114
 8003560:	20000118 	.word	0x20000118

08003564 <__sfputc_r>:
 8003564:	6893      	ldr	r3, [r2, #8]
 8003566:	b410      	push	{r4}
 8003568:	3b01      	subs	r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	6093      	str	r3, [r2, #8]
 800356e:	da07      	bge.n	8003580 <__sfputc_r+0x1c>
 8003570:	6994      	ldr	r4, [r2, #24]
 8003572:	42a3      	cmp	r3, r4
 8003574:	db01      	blt.n	800357a <__sfputc_r+0x16>
 8003576:	290a      	cmp	r1, #10
 8003578:	d102      	bne.n	8003580 <__sfputc_r+0x1c>
 800357a:	bc10      	pop	{r4}
 800357c:	f000 bb34 	b.w	8003be8 <__swbuf_r>
 8003580:	6813      	ldr	r3, [r2, #0]
 8003582:	1c58      	adds	r0, r3, #1
 8003584:	6010      	str	r0, [r2, #0]
 8003586:	7019      	strb	r1, [r3, #0]
 8003588:	4608      	mov	r0, r1
 800358a:	bc10      	pop	{r4}
 800358c:	4770      	bx	lr

0800358e <__sfputs_r>:
 800358e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003590:	4606      	mov	r6, r0
 8003592:	460f      	mov	r7, r1
 8003594:	4614      	mov	r4, r2
 8003596:	18d5      	adds	r5, r2, r3
 8003598:	42ac      	cmp	r4, r5
 800359a:	d101      	bne.n	80035a0 <__sfputs_r+0x12>
 800359c:	2000      	movs	r0, #0
 800359e:	e007      	b.n	80035b0 <__sfputs_r+0x22>
 80035a0:	463a      	mov	r2, r7
 80035a2:	4630      	mov	r0, r6
 80035a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035a8:	f7ff ffdc 	bl	8003564 <__sfputc_r>
 80035ac:	1c43      	adds	r3, r0, #1
 80035ae:	d1f3      	bne.n	8003598 <__sfputs_r+0xa>
 80035b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080035b4 <_vfiprintf_r>:
 80035b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035b8:	460d      	mov	r5, r1
 80035ba:	4614      	mov	r4, r2
 80035bc:	4698      	mov	r8, r3
 80035be:	4606      	mov	r6, r0
 80035c0:	b09d      	sub	sp, #116	; 0x74
 80035c2:	b118      	cbz	r0, 80035cc <_vfiprintf_r+0x18>
 80035c4:	6983      	ldr	r3, [r0, #24]
 80035c6:	b90b      	cbnz	r3, 80035cc <_vfiprintf_r+0x18>
 80035c8:	f7ff fed2 	bl	8003370 <__sinit>
 80035cc:	4b89      	ldr	r3, [pc, #548]	; (80037f4 <_vfiprintf_r+0x240>)
 80035ce:	429d      	cmp	r5, r3
 80035d0:	d11b      	bne.n	800360a <_vfiprintf_r+0x56>
 80035d2:	6875      	ldr	r5, [r6, #4]
 80035d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80035d6:	07d9      	lsls	r1, r3, #31
 80035d8:	d405      	bmi.n	80035e6 <_vfiprintf_r+0x32>
 80035da:	89ab      	ldrh	r3, [r5, #12]
 80035dc:	059a      	lsls	r2, r3, #22
 80035de:	d402      	bmi.n	80035e6 <_vfiprintf_r+0x32>
 80035e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80035e2:	f7ff ff63 	bl	80034ac <__retarget_lock_acquire_recursive>
 80035e6:	89ab      	ldrh	r3, [r5, #12]
 80035e8:	071b      	lsls	r3, r3, #28
 80035ea:	d501      	bpl.n	80035f0 <_vfiprintf_r+0x3c>
 80035ec:	692b      	ldr	r3, [r5, #16]
 80035ee:	b9eb      	cbnz	r3, 800362c <_vfiprintf_r+0x78>
 80035f0:	4629      	mov	r1, r5
 80035f2:	4630      	mov	r0, r6
 80035f4:	f000 fb5c 	bl	8003cb0 <__swsetup_r>
 80035f8:	b1c0      	cbz	r0, 800362c <_vfiprintf_r+0x78>
 80035fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80035fc:	07dc      	lsls	r4, r3, #31
 80035fe:	d50e      	bpl.n	800361e <_vfiprintf_r+0x6a>
 8003600:	f04f 30ff 	mov.w	r0, #4294967295
 8003604:	b01d      	add	sp, #116	; 0x74
 8003606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800360a:	4b7b      	ldr	r3, [pc, #492]	; (80037f8 <_vfiprintf_r+0x244>)
 800360c:	429d      	cmp	r5, r3
 800360e:	d101      	bne.n	8003614 <_vfiprintf_r+0x60>
 8003610:	68b5      	ldr	r5, [r6, #8]
 8003612:	e7df      	b.n	80035d4 <_vfiprintf_r+0x20>
 8003614:	4b79      	ldr	r3, [pc, #484]	; (80037fc <_vfiprintf_r+0x248>)
 8003616:	429d      	cmp	r5, r3
 8003618:	bf08      	it	eq
 800361a:	68f5      	ldreq	r5, [r6, #12]
 800361c:	e7da      	b.n	80035d4 <_vfiprintf_r+0x20>
 800361e:	89ab      	ldrh	r3, [r5, #12]
 8003620:	0598      	lsls	r0, r3, #22
 8003622:	d4ed      	bmi.n	8003600 <_vfiprintf_r+0x4c>
 8003624:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003626:	f7ff ff42 	bl	80034ae <__retarget_lock_release_recursive>
 800362a:	e7e9      	b.n	8003600 <_vfiprintf_r+0x4c>
 800362c:	2300      	movs	r3, #0
 800362e:	9309      	str	r3, [sp, #36]	; 0x24
 8003630:	2320      	movs	r3, #32
 8003632:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003636:	2330      	movs	r3, #48	; 0x30
 8003638:	f04f 0901 	mov.w	r9, #1
 800363c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003640:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003800 <_vfiprintf_r+0x24c>
 8003644:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003648:	4623      	mov	r3, r4
 800364a:	469a      	mov	sl, r3
 800364c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003650:	b10a      	cbz	r2, 8003656 <_vfiprintf_r+0xa2>
 8003652:	2a25      	cmp	r2, #37	; 0x25
 8003654:	d1f9      	bne.n	800364a <_vfiprintf_r+0x96>
 8003656:	ebba 0b04 	subs.w	fp, sl, r4
 800365a:	d00b      	beq.n	8003674 <_vfiprintf_r+0xc0>
 800365c:	465b      	mov	r3, fp
 800365e:	4622      	mov	r2, r4
 8003660:	4629      	mov	r1, r5
 8003662:	4630      	mov	r0, r6
 8003664:	f7ff ff93 	bl	800358e <__sfputs_r>
 8003668:	3001      	adds	r0, #1
 800366a:	f000 80aa 	beq.w	80037c2 <_vfiprintf_r+0x20e>
 800366e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003670:	445a      	add	r2, fp
 8003672:	9209      	str	r2, [sp, #36]	; 0x24
 8003674:	f89a 3000 	ldrb.w	r3, [sl]
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 80a2 	beq.w	80037c2 <_vfiprintf_r+0x20e>
 800367e:	2300      	movs	r3, #0
 8003680:	f04f 32ff 	mov.w	r2, #4294967295
 8003684:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003688:	f10a 0a01 	add.w	sl, sl, #1
 800368c:	9304      	str	r3, [sp, #16]
 800368e:	9307      	str	r3, [sp, #28]
 8003690:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003694:	931a      	str	r3, [sp, #104]	; 0x68
 8003696:	4654      	mov	r4, sl
 8003698:	2205      	movs	r2, #5
 800369a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800369e:	4858      	ldr	r0, [pc, #352]	; (8003800 <_vfiprintf_r+0x24c>)
 80036a0:	f000 fcbc 	bl	800401c <memchr>
 80036a4:	9a04      	ldr	r2, [sp, #16]
 80036a6:	b9d8      	cbnz	r0, 80036e0 <_vfiprintf_r+0x12c>
 80036a8:	06d1      	lsls	r1, r2, #27
 80036aa:	bf44      	itt	mi
 80036ac:	2320      	movmi	r3, #32
 80036ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036b2:	0713      	lsls	r3, r2, #28
 80036b4:	bf44      	itt	mi
 80036b6:	232b      	movmi	r3, #43	; 0x2b
 80036b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036bc:	f89a 3000 	ldrb.w	r3, [sl]
 80036c0:	2b2a      	cmp	r3, #42	; 0x2a
 80036c2:	d015      	beq.n	80036f0 <_vfiprintf_r+0x13c>
 80036c4:	4654      	mov	r4, sl
 80036c6:	2000      	movs	r0, #0
 80036c8:	f04f 0c0a 	mov.w	ip, #10
 80036cc:	9a07      	ldr	r2, [sp, #28]
 80036ce:	4621      	mov	r1, r4
 80036d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80036d4:	3b30      	subs	r3, #48	; 0x30
 80036d6:	2b09      	cmp	r3, #9
 80036d8:	d94e      	bls.n	8003778 <_vfiprintf_r+0x1c4>
 80036da:	b1b0      	cbz	r0, 800370a <_vfiprintf_r+0x156>
 80036dc:	9207      	str	r2, [sp, #28]
 80036de:	e014      	b.n	800370a <_vfiprintf_r+0x156>
 80036e0:	eba0 0308 	sub.w	r3, r0, r8
 80036e4:	fa09 f303 	lsl.w	r3, r9, r3
 80036e8:	4313      	orrs	r3, r2
 80036ea:	46a2      	mov	sl, r4
 80036ec:	9304      	str	r3, [sp, #16]
 80036ee:	e7d2      	b.n	8003696 <_vfiprintf_r+0xe2>
 80036f0:	9b03      	ldr	r3, [sp, #12]
 80036f2:	1d19      	adds	r1, r3, #4
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	9103      	str	r1, [sp, #12]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	bfbb      	ittet	lt
 80036fc:	425b      	neglt	r3, r3
 80036fe:	f042 0202 	orrlt.w	r2, r2, #2
 8003702:	9307      	strge	r3, [sp, #28]
 8003704:	9307      	strlt	r3, [sp, #28]
 8003706:	bfb8      	it	lt
 8003708:	9204      	strlt	r2, [sp, #16]
 800370a:	7823      	ldrb	r3, [r4, #0]
 800370c:	2b2e      	cmp	r3, #46	; 0x2e
 800370e:	d10c      	bne.n	800372a <_vfiprintf_r+0x176>
 8003710:	7863      	ldrb	r3, [r4, #1]
 8003712:	2b2a      	cmp	r3, #42	; 0x2a
 8003714:	d135      	bne.n	8003782 <_vfiprintf_r+0x1ce>
 8003716:	9b03      	ldr	r3, [sp, #12]
 8003718:	3402      	adds	r4, #2
 800371a:	1d1a      	adds	r2, r3, #4
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	9203      	str	r2, [sp, #12]
 8003720:	2b00      	cmp	r3, #0
 8003722:	bfb8      	it	lt
 8003724:	f04f 33ff 	movlt.w	r3, #4294967295
 8003728:	9305      	str	r3, [sp, #20]
 800372a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003810 <_vfiprintf_r+0x25c>
 800372e:	2203      	movs	r2, #3
 8003730:	4650      	mov	r0, sl
 8003732:	7821      	ldrb	r1, [r4, #0]
 8003734:	f000 fc72 	bl	800401c <memchr>
 8003738:	b140      	cbz	r0, 800374c <_vfiprintf_r+0x198>
 800373a:	2340      	movs	r3, #64	; 0x40
 800373c:	eba0 000a 	sub.w	r0, r0, sl
 8003740:	fa03 f000 	lsl.w	r0, r3, r0
 8003744:	9b04      	ldr	r3, [sp, #16]
 8003746:	3401      	adds	r4, #1
 8003748:	4303      	orrs	r3, r0
 800374a:	9304      	str	r3, [sp, #16]
 800374c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003750:	2206      	movs	r2, #6
 8003752:	482c      	ldr	r0, [pc, #176]	; (8003804 <_vfiprintf_r+0x250>)
 8003754:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003758:	f000 fc60 	bl	800401c <memchr>
 800375c:	2800      	cmp	r0, #0
 800375e:	d03f      	beq.n	80037e0 <_vfiprintf_r+0x22c>
 8003760:	4b29      	ldr	r3, [pc, #164]	; (8003808 <_vfiprintf_r+0x254>)
 8003762:	bb1b      	cbnz	r3, 80037ac <_vfiprintf_r+0x1f8>
 8003764:	9b03      	ldr	r3, [sp, #12]
 8003766:	3307      	adds	r3, #7
 8003768:	f023 0307 	bic.w	r3, r3, #7
 800376c:	3308      	adds	r3, #8
 800376e:	9303      	str	r3, [sp, #12]
 8003770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003772:	443b      	add	r3, r7
 8003774:	9309      	str	r3, [sp, #36]	; 0x24
 8003776:	e767      	b.n	8003648 <_vfiprintf_r+0x94>
 8003778:	460c      	mov	r4, r1
 800377a:	2001      	movs	r0, #1
 800377c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003780:	e7a5      	b.n	80036ce <_vfiprintf_r+0x11a>
 8003782:	2300      	movs	r3, #0
 8003784:	f04f 0c0a 	mov.w	ip, #10
 8003788:	4619      	mov	r1, r3
 800378a:	3401      	adds	r4, #1
 800378c:	9305      	str	r3, [sp, #20]
 800378e:	4620      	mov	r0, r4
 8003790:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003794:	3a30      	subs	r2, #48	; 0x30
 8003796:	2a09      	cmp	r2, #9
 8003798:	d903      	bls.n	80037a2 <_vfiprintf_r+0x1ee>
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0c5      	beq.n	800372a <_vfiprintf_r+0x176>
 800379e:	9105      	str	r1, [sp, #20]
 80037a0:	e7c3      	b.n	800372a <_vfiprintf_r+0x176>
 80037a2:	4604      	mov	r4, r0
 80037a4:	2301      	movs	r3, #1
 80037a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80037aa:	e7f0      	b.n	800378e <_vfiprintf_r+0x1da>
 80037ac:	ab03      	add	r3, sp, #12
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	462a      	mov	r2, r5
 80037b2:	4630      	mov	r0, r6
 80037b4:	4b15      	ldr	r3, [pc, #84]	; (800380c <_vfiprintf_r+0x258>)
 80037b6:	a904      	add	r1, sp, #16
 80037b8:	f3af 8000 	nop.w
 80037bc:	4607      	mov	r7, r0
 80037be:	1c78      	adds	r0, r7, #1
 80037c0:	d1d6      	bne.n	8003770 <_vfiprintf_r+0x1bc>
 80037c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80037c4:	07d9      	lsls	r1, r3, #31
 80037c6:	d405      	bmi.n	80037d4 <_vfiprintf_r+0x220>
 80037c8:	89ab      	ldrh	r3, [r5, #12]
 80037ca:	059a      	lsls	r2, r3, #22
 80037cc:	d402      	bmi.n	80037d4 <_vfiprintf_r+0x220>
 80037ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80037d0:	f7ff fe6d 	bl	80034ae <__retarget_lock_release_recursive>
 80037d4:	89ab      	ldrh	r3, [r5, #12]
 80037d6:	065b      	lsls	r3, r3, #25
 80037d8:	f53f af12 	bmi.w	8003600 <_vfiprintf_r+0x4c>
 80037dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80037de:	e711      	b.n	8003604 <_vfiprintf_r+0x50>
 80037e0:	ab03      	add	r3, sp, #12
 80037e2:	9300      	str	r3, [sp, #0]
 80037e4:	462a      	mov	r2, r5
 80037e6:	4630      	mov	r0, r6
 80037e8:	4b08      	ldr	r3, [pc, #32]	; (800380c <_vfiprintf_r+0x258>)
 80037ea:	a904      	add	r1, sp, #16
 80037ec:	f000 f882 	bl	80038f4 <_printf_i>
 80037f0:	e7e4      	b.n	80037bc <_vfiprintf_r+0x208>
 80037f2:	bf00      	nop
 80037f4:	080041d0 	.word	0x080041d0
 80037f8:	080041f0 	.word	0x080041f0
 80037fc:	080041b0 	.word	0x080041b0
 8003800:	08004210 	.word	0x08004210
 8003804:	0800421a 	.word	0x0800421a
 8003808:	00000000 	.word	0x00000000
 800380c:	0800358f 	.word	0x0800358f
 8003810:	08004216 	.word	0x08004216

08003814 <_printf_common>:
 8003814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003818:	4616      	mov	r6, r2
 800381a:	4699      	mov	r9, r3
 800381c:	688a      	ldr	r2, [r1, #8]
 800381e:	690b      	ldr	r3, [r1, #16]
 8003820:	4607      	mov	r7, r0
 8003822:	4293      	cmp	r3, r2
 8003824:	bfb8      	it	lt
 8003826:	4613      	movlt	r3, r2
 8003828:	6033      	str	r3, [r6, #0]
 800382a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800382e:	460c      	mov	r4, r1
 8003830:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003834:	b10a      	cbz	r2, 800383a <_printf_common+0x26>
 8003836:	3301      	adds	r3, #1
 8003838:	6033      	str	r3, [r6, #0]
 800383a:	6823      	ldr	r3, [r4, #0]
 800383c:	0699      	lsls	r1, r3, #26
 800383e:	bf42      	ittt	mi
 8003840:	6833      	ldrmi	r3, [r6, #0]
 8003842:	3302      	addmi	r3, #2
 8003844:	6033      	strmi	r3, [r6, #0]
 8003846:	6825      	ldr	r5, [r4, #0]
 8003848:	f015 0506 	ands.w	r5, r5, #6
 800384c:	d106      	bne.n	800385c <_printf_common+0x48>
 800384e:	f104 0a19 	add.w	sl, r4, #25
 8003852:	68e3      	ldr	r3, [r4, #12]
 8003854:	6832      	ldr	r2, [r6, #0]
 8003856:	1a9b      	subs	r3, r3, r2
 8003858:	42ab      	cmp	r3, r5
 800385a:	dc28      	bgt.n	80038ae <_printf_common+0x9a>
 800385c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003860:	1e13      	subs	r3, r2, #0
 8003862:	6822      	ldr	r2, [r4, #0]
 8003864:	bf18      	it	ne
 8003866:	2301      	movne	r3, #1
 8003868:	0692      	lsls	r2, r2, #26
 800386a:	d42d      	bmi.n	80038c8 <_printf_common+0xb4>
 800386c:	4649      	mov	r1, r9
 800386e:	4638      	mov	r0, r7
 8003870:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003874:	47c0      	blx	r8
 8003876:	3001      	adds	r0, #1
 8003878:	d020      	beq.n	80038bc <_printf_common+0xa8>
 800387a:	6823      	ldr	r3, [r4, #0]
 800387c:	68e5      	ldr	r5, [r4, #12]
 800387e:	f003 0306 	and.w	r3, r3, #6
 8003882:	2b04      	cmp	r3, #4
 8003884:	bf18      	it	ne
 8003886:	2500      	movne	r5, #0
 8003888:	6832      	ldr	r2, [r6, #0]
 800388a:	f04f 0600 	mov.w	r6, #0
 800388e:	68a3      	ldr	r3, [r4, #8]
 8003890:	bf08      	it	eq
 8003892:	1aad      	subeq	r5, r5, r2
 8003894:	6922      	ldr	r2, [r4, #16]
 8003896:	bf08      	it	eq
 8003898:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800389c:	4293      	cmp	r3, r2
 800389e:	bfc4      	itt	gt
 80038a0:	1a9b      	subgt	r3, r3, r2
 80038a2:	18ed      	addgt	r5, r5, r3
 80038a4:	341a      	adds	r4, #26
 80038a6:	42b5      	cmp	r5, r6
 80038a8:	d11a      	bne.n	80038e0 <_printf_common+0xcc>
 80038aa:	2000      	movs	r0, #0
 80038ac:	e008      	b.n	80038c0 <_printf_common+0xac>
 80038ae:	2301      	movs	r3, #1
 80038b0:	4652      	mov	r2, sl
 80038b2:	4649      	mov	r1, r9
 80038b4:	4638      	mov	r0, r7
 80038b6:	47c0      	blx	r8
 80038b8:	3001      	adds	r0, #1
 80038ba:	d103      	bne.n	80038c4 <_printf_common+0xb0>
 80038bc:	f04f 30ff 	mov.w	r0, #4294967295
 80038c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038c4:	3501      	adds	r5, #1
 80038c6:	e7c4      	b.n	8003852 <_printf_common+0x3e>
 80038c8:	2030      	movs	r0, #48	; 0x30
 80038ca:	18e1      	adds	r1, r4, r3
 80038cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80038d0:	1c5a      	adds	r2, r3, #1
 80038d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80038d6:	4422      	add	r2, r4
 80038d8:	3302      	adds	r3, #2
 80038da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80038de:	e7c5      	b.n	800386c <_printf_common+0x58>
 80038e0:	2301      	movs	r3, #1
 80038e2:	4622      	mov	r2, r4
 80038e4:	4649      	mov	r1, r9
 80038e6:	4638      	mov	r0, r7
 80038e8:	47c0      	blx	r8
 80038ea:	3001      	adds	r0, #1
 80038ec:	d0e6      	beq.n	80038bc <_printf_common+0xa8>
 80038ee:	3601      	adds	r6, #1
 80038f0:	e7d9      	b.n	80038a6 <_printf_common+0x92>
	...

080038f4 <_printf_i>:
 80038f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038f8:	460c      	mov	r4, r1
 80038fa:	7e27      	ldrb	r7, [r4, #24]
 80038fc:	4691      	mov	r9, r2
 80038fe:	2f78      	cmp	r7, #120	; 0x78
 8003900:	4680      	mov	r8, r0
 8003902:	469a      	mov	sl, r3
 8003904:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003906:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800390a:	d807      	bhi.n	800391c <_printf_i+0x28>
 800390c:	2f62      	cmp	r7, #98	; 0x62
 800390e:	d80a      	bhi.n	8003926 <_printf_i+0x32>
 8003910:	2f00      	cmp	r7, #0
 8003912:	f000 80d9 	beq.w	8003ac8 <_printf_i+0x1d4>
 8003916:	2f58      	cmp	r7, #88	; 0x58
 8003918:	f000 80a4 	beq.w	8003a64 <_printf_i+0x170>
 800391c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003920:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003924:	e03a      	b.n	800399c <_printf_i+0xa8>
 8003926:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800392a:	2b15      	cmp	r3, #21
 800392c:	d8f6      	bhi.n	800391c <_printf_i+0x28>
 800392e:	a001      	add	r0, pc, #4	; (adr r0, 8003934 <_printf_i+0x40>)
 8003930:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003934:	0800398d 	.word	0x0800398d
 8003938:	080039a1 	.word	0x080039a1
 800393c:	0800391d 	.word	0x0800391d
 8003940:	0800391d 	.word	0x0800391d
 8003944:	0800391d 	.word	0x0800391d
 8003948:	0800391d 	.word	0x0800391d
 800394c:	080039a1 	.word	0x080039a1
 8003950:	0800391d 	.word	0x0800391d
 8003954:	0800391d 	.word	0x0800391d
 8003958:	0800391d 	.word	0x0800391d
 800395c:	0800391d 	.word	0x0800391d
 8003960:	08003aaf 	.word	0x08003aaf
 8003964:	080039d1 	.word	0x080039d1
 8003968:	08003a91 	.word	0x08003a91
 800396c:	0800391d 	.word	0x0800391d
 8003970:	0800391d 	.word	0x0800391d
 8003974:	08003ad1 	.word	0x08003ad1
 8003978:	0800391d 	.word	0x0800391d
 800397c:	080039d1 	.word	0x080039d1
 8003980:	0800391d 	.word	0x0800391d
 8003984:	0800391d 	.word	0x0800391d
 8003988:	08003a99 	.word	0x08003a99
 800398c:	680b      	ldr	r3, [r1, #0]
 800398e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003992:	1d1a      	adds	r2, r3, #4
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	600a      	str	r2, [r1, #0]
 8003998:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800399c:	2301      	movs	r3, #1
 800399e:	e0a4      	b.n	8003aea <_printf_i+0x1f6>
 80039a0:	6825      	ldr	r5, [r4, #0]
 80039a2:	6808      	ldr	r0, [r1, #0]
 80039a4:	062e      	lsls	r6, r5, #24
 80039a6:	f100 0304 	add.w	r3, r0, #4
 80039aa:	d50a      	bpl.n	80039c2 <_printf_i+0xce>
 80039ac:	6805      	ldr	r5, [r0, #0]
 80039ae:	600b      	str	r3, [r1, #0]
 80039b0:	2d00      	cmp	r5, #0
 80039b2:	da03      	bge.n	80039bc <_printf_i+0xc8>
 80039b4:	232d      	movs	r3, #45	; 0x2d
 80039b6:	426d      	negs	r5, r5
 80039b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039bc:	230a      	movs	r3, #10
 80039be:	485e      	ldr	r0, [pc, #376]	; (8003b38 <_printf_i+0x244>)
 80039c0:	e019      	b.n	80039f6 <_printf_i+0x102>
 80039c2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80039c6:	6805      	ldr	r5, [r0, #0]
 80039c8:	600b      	str	r3, [r1, #0]
 80039ca:	bf18      	it	ne
 80039cc:	b22d      	sxthne	r5, r5
 80039ce:	e7ef      	b.n	80039b0 <_printf_i+0xbc>
 80039d0:	680b      	ldr	r3, [r1, #0]
 80039d2:	6825      	ldr	r5, [r4, #0]
 80039d4:	1d18      	adds	r0, r3, #4
 80039d6:	6008      	str	r0, [r1, #0]
 80039d8:	0628      	lsls	r0, r5, #24
 80039da:	d501      	bpl.n	80039e0 <_printf_i+0xec>
 80039dc:	681d      	ldr	r5, [r3, #0]
 80039de:	e002      	b.n	80039e6 <_printf_i+0xf2>
 80039e0:	0669      	lsls	r1, r5, #25
 80039e2:	d5fb      	bpl.n	80039dc <_printf_i+0xe8>
 80039e4:	881d      	ldrh	r5, [r3, #0]
 80039e6:	2f6f      	cmp	r7, #111	; 0x6f
 80039e8:	bf0c      	ite	eq
 80039ea:	2308      	moveq	r3, #8
 80039ec:	230a      	movne	r3, #10
 80039ee:	4852      	ldr	r0, [pc, #328]	; (8003b38 <_printf_i+0x244>)
 80039f0:	2100      	movs	r1, #0
 80039f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80039f6:	6866      	ldr	r6, [r4, #4]
 80039f8:	2e00      	cmp	r6, #0
 80039fa:	bfa8      	it	ge
 80039fc:	6821      	ldrge	r1, [r4, #0]
 80039fe:	60a6      	str	r6, [r4, #8]
 8003a00:	bfa4      	itt	ge
 8003a02:	f021 0104 	bicge.w	r1, r1, #4
 8003a06:	6021      	strge	r1, [r4, #0]
 8003a08:	b90d      	cbnz	r5, 8003a0e <_printf_i+0x11a>
 8003a0a:	2e00      	cmp	r6, #0
 8003a0c:	d04d      	beq.n	8003aaa <_printf_i+0x1b6>
 8003a0e:	4616      	mov	r6, r2
 8003a10:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a14:	fb03 5711 	mls	r7, r3, r1, r5
 8003a18:	5dc7      	ldrb	r7, [r0, r7]
 8003a1a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a1e:	462f      	mov	r7, r5
 8003a20:	42bb      	cmp	r3, r7
 8003a22:	460d      	mov	r5, r1
 8003a24:	d9f4      	bls.n	8003a10 <_printf_i+0x11c>
 8003a26:	2b08      	cmp	r3, #8
 8003a28:	d10b      	bne.n	8003a42 <_printf_i+0x14e>
 8003a2a:	6823      	ldr	r3, [r4, #0]
 8003a2c:	07df      	lsls	r7, r3, #31
 8003a2e:	d508      	bpl.n	8003a42 <_printf_i+0x14e>
 8003a30:	6923      	ldr	r3, [r4, #16]
 8003a32:	6861      	ldr	r1, [r4, #4]
 8003a34:	4299      	cmp	r1, r3
 8003a36:	bfde      	ittt	le
 8003a38:	2330      	movle	r3, #48	; 0x30
 8003a3a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a3e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a42:	1b92      	subs	r2, r2, r6
 8003a44:	6122      	str	r2, [r4, #16]
 8003a46:	464b      	mov	r3, r9
 8003a48:	4621      	mov	r1, r4
 8003a4a:	4640      	mov	r0, r8
 8003a4c:	f8cd a000 	str.w	sl, [sp]
 8003a50:	aa03      	add	r2, sp, #12
 8003a52:	f7ff fedf 	bl	8003814 <_printf_common>
 8003a56:	3001      	adds	r0, #1
 8003a58:	d14c      	bne.n	8003af4 <_printf_i+0x200>
 8003a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a5e:	b004      	add	sp, #16
 8003a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a64:	4834      	ldr	r0, [pc, #208]	; (8003b38 <_printf_i+0x244>)
 8003a66:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003a6a:	680e      	ldr	r6, [r1, #0]
 8003a6c:	6823      	ldr	r3, [r4, #0]
 8003a6e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003a72:	061f      	lsls	r7, r3, #24
 8003a74:	600e      	str	r6, [r1, #0]
 8003a76:	d514      	bpl.n	8003aa2 <_printf_i+0x1ae>
 8003a78:	07d9      	lsls	r1, r3, #31
 8003a7a:	bf44      	itt	mi
 8003a7c:	f043 0320 	orrmi.w	r3, r3, #32
 8003a80:	6023      	strmi	r3, [r4, #0]
 8003a82:	b91d      	cbnz	r5, 8003a8c <_printf_i+0x198>
 8003a84:	6823      	ldr	r3, [r4, #0]
 8003a86:	f023 0320 	bic.w	r3, r3, #32
 8003a8a:	6023      	str	r3, [r4, #0]
 8003a8c:	2310      	movs	r3, #16
 8003a8e:	e7af      	b.n	80039f0 <_printf_i+0xfc>
 8003a90:	6823      	ldr	r3, [r4, #0]
 8003a92:	f043 0320 	orr.w	r3, r3, #32
 8003a96:	6023      	str	r3, [r4, #0]
 8003a98:	2378      	movs	r3, #120	; 0x78
 8003a9a:	4828      	ldr	r0, [pc, #160]	; (8003b3c <_printf_i+0x248>)
 8003a9c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003aa0:	e7e3      	b.n	8003a6a <_printf_i+0x176>
 8003aa2:	065e      	lsls	r6, r3, #25
 8003aa4:	bf48      	it	mi
 8003aa6:	b2ad      	uxthmi	r5, r5
 8003aa8:	e7e6      	b.n	8003a78 <_printf_i+0x184>
 8003aaa:	4616      	mov	r6, r2
 8003aac:	e7bb      	b.n	8003a26 <_printf_i+0x132>
 8003aae:	680b      	ldr	r3, [r1, #0]
 8003ab0:	6826      	ldr	r6, [r4, #0]
 8003ab2:	1d1d      	adds	r5, r3, #4
 8003ab4:	6960      	ldr	r0, [r4, #20]
 8003ab6:	600d      	str	r5, [r1, #0]
 8003ab8:	0635      	lsls	r5, r6, #24
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	d501      	bpl.n	8003ac2 <_printf_i+0x1ce>
 8003abe:	6018      	str	r0, [r3, #0]
 8003ac0:	e002      	b.n	8003ac8 <_printf_i+0x1d4>
 8003ac2:	0671      	lsls	r1, r6, #25
 8003ac4:	d5fb      	bpl.n	8003abe <_printf_i+0x1ca>
 8003ac6:	8018      	strh	r0, [r3, #0]
 8003ac8:	2300      	movs	r3, #0
 8003aca:	4616      	mov	r6, r2
 8003acc:	6123      	str	r3, [r4, #16]
 8003ace:	e7ba      	b.n	8003a46 <_printf_i+0x152>
 8003ad0:	680b      	ldr	r3, [r1, #0]
 8003ad2:	1d1a      	adds	r2, r3, #4
 8003ad4:	600a      	str	r2, [r1, #0]
 8003ad6:	681e      	ldr	r6, [r3, #0]
 8003ad8:	2100      	movs	r1, #0
 8003ada:	4630      	mov	r0, r6
 8003adc:	6862      	ldr	r2, [r4, #4]
 8003ade:	f000 fa9d 	bl	800401c <memchr>
 8003ae2:	b108      	cbz	r0, 8003ae8 <_printf_i+0x1f4>
 8003ae4:	1b80      	subs	r0, r0, r6
 8003ae6:	6060      	str	r0, [r4, #4]
 8003ae8:	6863      	ldr	r3, [r4, #4]
 8003aea:	6123      	str	r3, [r4, #16]
 8003aec:	2300      	movs	r3, #0
 8003aee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003af2:	e7a8      	b.n	8003a46 <_printf_i+0x152>
 8003af4:	4632      	mov	r2, r6
 8003af6:	4649      	mov	r1, r9
 8003af8:	4640      	mov	r0, r8
 8003afa:	6923      	ldr	r3, [r4, #16]
 8003afc:	47d0      	blx	sl
 8003afe:	3001      	adds	r0, #1
 8003b00:	d0ab      	beq.n	8003a5a <_printf_i+0x166>
 8003b02:	6823      	ldr	r3, [r4, #0]
 8003b04:	079b      	lsls	r3, r3, #30
 8003b06:	d413      	bmi.n	8003b30 <_printf_i+0x23c>
 8003b08:	68e0      	ldr	r0, [r4, #12]
 8003b0a:	9b03      	ldr	r3, [sp, #12]
 8003b0c:	4298      	cmp	r0, r3
 8003b0e:	bfb8      	it	lt
 8003b10:	4618      	movlt	r0, r3
 8003b12:	e7a4      	b.n	8003a5e <_printf_i+0x16a>
 8003b14:	2301      	movs	r3, #1
 8003b16:	4632      	mov	r2, r6
 8003b18:	4649      	mov	r1, r9
 8003b1a:	4640      	mov	r0, r8
 8003b1c:	47d0      	blx	sl
 8003b1e:	3001      	adds	r0, #1
 8003b20:	d09b      	beq.n	8003a5a <_printf_i+0x166>
 8003b22:	3501      	adds	r5, #1
 8003b24:	68e3      	ldr	r3, [r4, #12]
 8003b26:	9903      	ldr	r1, [sp, #12]
 8003b28:	1a5b      	subs	r3, r3, r1
 8003b2a:	42ab      	cmp	r3, r5
 8003b2c:	dcf2      	bgt.n	8003b14 <_printf_i+0x220>
 8003b2e:	e7eb      	b.n	8003b08 <_printf_i+0x214>
 8003b30:	2500      	movs	r5, #0
 8003b32:	f104 0619 	add.w	r6, r4, #25
 8003b36:	e7f5      	b.n	8003b24 <_printf_i+0x230>
 8003b38:	08004221 	.word	0x08004221
 8003b3c:	08004232 	.word	0x08004232

08003b40 <_sbrk_r>:
 8003b40:	b538      	push	{r3, r4, r5, lr}
 8003b42:	2300      	movs	r3, #0
 8003b44:	4d05      	ldr	r5, [pc, #20]	; (8003b5c <_sbrk_r+0x1c>)
 8003b46:	4604      	mov	r4, r0
 8003b48:	4608      	mov	r0, r1
 8003b4a:	602b      	str	r3, [r5, #0]
 8003b4c:	f7fd f960 	bl	8000e10 <_sbrk>
 8003b50:	1c43      	adds	r3, r0, #1
 8003b52:	d102      	bne.n	8003b5a <_sbrk_r+0x1a>
 8003b54:	682b      	ldr	r3, [r5, #0]
 8003b56:	b103      	cbz	r3, 8003b5a <_sbrk_r+0x1a>
 8003b58:	6023      	str	r3, [r4, #0]
 8003b5a:	bd38      	pop	{r3, r4, r5, pc}
 8003b5c:	200001bc 	.word	0x200001bc

08003b60 <__sread>:
 8003b60:	b510      	push	{r4, lr}
 8003b62:	460c      	mov	r4, r1
 8003b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b68:	f000 fabe 	bl	80040e8 <_read_r>
 8003b6c:	2800      	cmp	r0, #0
 8003b6e:	bfab      	itete	ge
 8003b70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003b72:	89a3      	ldrhlt	r3, [r4, #12]
 8003b74:	181b      	addge	r3, r3, r0
 8003b76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003b7a:	bfac      	ite	ge
 8003b7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003b7e:	81a3      	strhlt	r3, [r4, #12]
 8003b80:	bd10      	pop	{r4, pc}

08003b82 <__swrite>:
 8003b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b86:	461f      	mov	r7, r3
 8003b88:	898b      	ldrh	r3, [r1, #12]
 8003b8a:	4605      	mov	r5, r0
 8003b8c:	05db      	lsls	r3, r3, #23
 8003b8e:	460c      	mov	r4, r1
 8003b90:	4616      	mov	r6, r2
 8003b92:	d505      	bpl.n	8003ba0 <__swrite+0x1e>
 8003b94:	2302      	movs	r3, #2
 8003b96:	2200      	movs	r2, #0
 8003b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b9c:	f000 f9c8 	bl	8003f30 <_lseek_r>
 8003ba0:	89a3      	ldrh	r3, [r4, #12]
 8003ba2:	4632      	mov	r2, r6
 8003ba4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ba8:	81a3      	strh	r3, [r4, #12]
 8003baa:	4628      	mov	r0, r5
 8003bac:	463b      	mov	r3, r7
 8003bae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003bb6:	f000 b869 	b.w	8003c8c <_write_r>

08003bba <__sseek>:
 8003bba:	b510      	push	{r4, lr}
 8003bbc:	460c      	mov	r4, r1
 8003bbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bc2:	f000 f9b5 	bl	8003f30 <_lseek_r>
 8003bc6:	1c43      	adds	r3, r0, #1
 8003bc8:	89a3      	ldrh	r3, [r4, #12]
 8003bca:	bf15      	itete	ne
 8003bcc:	6560      	strne	r0, [r4, #84]	; 0x54
 8003bce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003bd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003bd6:	81a3      	strheq	r3, [r4, #12]
 8003bd8:	bf18      	it	ne
 8003bda:	81a3      	strhne	r3, [r4, #12]
 8003bdc:	bd10      	pop	{r4, pc}

08003bde <__sclose>:
 8003bde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003be2:	f000 b8d3 	b.w	8003d8c <_close_r>
	...

08003be8 <__swbuf_r>:
 8003be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bea:	460e      	mov	r6, r1
 8003bec:	4614      	mov	r4, r2
 8003bee:	4605      	mov	r5, r0
 8003bf0:	b118      	cbz	r0, 8003bfa <__swbuf_r+0x12>
 8003bf2:	6983      	ldr	r3, [r0, #24]
 8003bf4:	b90b      	cbnz	r3, 8003bfa <__swbuf_r+0x12>
 8003bf6:	f7ff fbbb 	bl	8003370 <__sinit>
 8003bfa:	4b21      	ldr	r3, [pc, #132]	; (8003c80 <__swbuf_r+0x98>)
 8003bfc:	429c      	cmp	r4, r3
 8003bfe:	d12b      	bne.n	8003c58 <__swbuf_r+0x70>
 8003c00:	686c      	ldr	r4, [r5, #4]
 8003c02:	69a3      	ldr	r3, [r4, #24]
 8003c04:	60a3      	str	r3, [r4, #8]
 8003c06:	89a3      	ldrh	r3, [r4, #12]
 8003c08:	071a      	lsls	r2, r3, #28
 8003c0a:	d52f      	bpl.n	8003c6c <__swbuf_r+0x84>
 8003c0c:	6923      	ldr	r3, [r4, #16]
 8003c0e:	b36b      	cbz	r3, 8003c6c <__swbuf_r+0x84>
 8003c10:	6923      	ldr	r3, [r4, #16]
 8003c12:	6820      	ldr	r0, [r4, #0]
 8003c14:	b2f6      	uxtb	r6, r6
 8003c16:	1ac0      	subs	r0, r0, r3
 8003c18:	6963      	ldr	r3, [r4, #20]
 8003c1a:	4637      	mov	r7, r6
 8003c1c:	4283      	cmp	r3, r0
 8003c1e:	dc04      	bgt.n	8003c2a <__swbuf_r+0x42>
 8003c20:	4621      	mov	r1, r4
 8003c22:	4628      	mov	r0, r5
 8003c24:	f000 f948 	bl	8003eb8 <_fflush_r>
 8003c28:	bb30      	cbnz	r0, 8003c78 <__swbuf_r+0x90>
 8003c2a:	68a3      	ldr	r3, [r4, #8]
 8003c2c:	3001      	adds	r0, #1
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	60a3      	str	r3, [r4, #8]
 8003c32:	6823      	ldr	r3, [r4, #0]
 8003c34:	1c5a      	adds	r2, r3, #1
 8003c36:	6022      	str	r2, [r4, #0]
 8003c38:	701e      	strb	r6, [r3, #0]
 8003c3a:	6963      	ldr	r3, [r4, #20]
 8003c3c:	4283      	cmp	r3, r0
 8003c3e:	d004      	beq.n	8003c4a <__swbuf_r+0x62>
 8003c40:	89a3      	ldrh	r3, [r4, #12]
 8003c42:	07db      	lsls	r3, r3, #31
 8003c44:	d506      	bpl.n	8003c54 <__swbuf_r+0x6c>
 8003c46:	2e0a      	cmp	r6, #10
 8003c48:	d104      	bne.n	8003c54 <__swbuf_r+0x6c>
 8003c4a:	4621      	mov	r1, r4
 8003c4c:	4628      	mov	r0, r5
 8003c4e:	f000 f933 	bl	8003eb8 <_fflush_r>
 8003c52:	b988      	cbnz	r0, 8003c78 <__swbuf_r+0x90>
 8003c54:	4638      	mov	r0, r7
 8003c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c58:	4b0a      	ldr	r3, [pc, #40]	; (8003c84 <__swbuf_r+0x9c>)
 8003c5a:	429c      	cmp	r4, r3
 8003c5c:	d101      	bne.n	8003c62 <__swbuf_r+0x7a>
 8003c5e:	68ac      	ldr	r4, [r5, #8]
 8003c60:	e7cf      	b.n	8003c02 <__swbuf_r+0x1a>
 8003c62:	4b09      	ldr	r3, [pc, #36]	; (8003c88 <__swbuf_r+0xa0>)
 8003c64:	429c      	cmp	r4, r3
 8003c66:	bf08      	it	eq
 8003c68:	68ec      	ldreq	r4, [r5, #12]
 8003c6a:	e7ca      	b.n	8003c02 <__swbuf_r+0x1a>
 8003c6c:	4621      	mov	r1, r4
 8003c6e:	4628      	mov	r0, r5
 8003c70:	f000 f81e 	bl	8003cb0 <__swsetup_r>
 8003c74:	2800      	cmp	r0, #0
 8003c76:	d0cb      	beq.n	8003c10 <__swbuf_r+0x28>
 8003c78:	f04f 37ff 	mov.w	r7, #4294967295
 8003c7c:	e7ea      	b.n	8003c54 <__swbuf_r+0x6c>
 8003c7e:	bf00      	nop
 8003c80:	080041d0 	.word	0x080041d0
 8003c84:	080041f0 	.word	0x080041f0
 8003c88:	080041b0 	.word	0x080041b0

08003c8c <_write_r>:
 8003c8c:	b538      	push	{r3, r4, r5, lr}
 8003c8e:	4604      	mov	r4, r0
 8003c90:	4608      	mov	r0, r1
 8003c92:	4611      	mov	r1, r2
 8003c94:	2200      	movs	r2, #0
 8003c96:	4d05      	ldr	r5, [pc, #20]	; (8003cac <_write_r+0x20>)
 8003c98:	602a      	str	r2, [r5, #0]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	f7fc fef2 	bl	8000a84 <_write>
 8003ca0:	1c43      	adds	r3, r0, #1
 8003ca2:	d102      	bne.n	8003caa <_write_r+0x1e>
 8003ca4:	682b      	ldr	r3, [r5, #0]
 8003ca6:	b103      	cbz	r3, 8003caa <_write_r+0x1e>
 8003ca8:	6023      	str	r3, [r4, #0]
 8003caa:	bd38      	pop	{r3, r4, r5, pc}
 8003cac:	200001bc 	.word	0x200001bc

08003cb0 <__swsetup_r>:
 8003cb0:	4b32      	ldr	r3, [pc, #200]	; (8003d7c <__swsetup_r+0xcc>)
 8003cb2:	b570      	push	{r4, r5, r6, lr}
 8003cb4:	681d      	ldr	r5, [r3, #0]
 8003cb6:	4606      	mov	r6, r0
 8003cb8:	460c      	mov	r4, r1
 8003cba:	b125      	cbz	r5, 8003cc6 <__swsetup_r+0x16>
 8003cbc:	69ab      	ldr	r3, [r5, #24]
 8003cbe:	b913      	cbnz	r3, 8003cc6 <__swsetup_r+0x16>
 8003cc0:	4628      	mov	r0, r5
 8003cc2:	f7ff fb55 	bl	8003370 <__sinit>
 8003cc6:	4b2e      	ldr	r3, [pc, #184]	; (8003d80 <__swsetup_r+0xd0>)
 8003cc8:	429c      	cmp	r4, r3
 8003cca:	d10f      	bne.n	8003cec <__swsetup_r+0x3c>
 8003ccc:	686c      	ldr	r4, [r5, #4]
 8003cce:	89a3      	ldrh	r3, [r4, #12]
 8003cd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003cd4:	0719      	lsls	r1, r3, #28
 8003cd6:	d42c      	bmi.n	8003d32 <__swsetup_r+0x82>
 8003cd8:	06dd      	lsls	r5, r3, #27
 8003cda:	d411      	bmi.n	8003d00 <__swsetup_r+0x50>
 8003cdc:	2309      	movs	r3, #9
 8003cde:	6033      	str	r3, [r6, #0]
 8003ce0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce8:	81a3      	strh	r3, [r4, #12]
 8003cea:	e03e      	b.n	8003d6a <__swsetup_r+0xba>
 8003cec:	4b25      	ldr	r3, [pc, #148]	; (8003d84 <__swsetup_r+0xd4>)
 8003cee:	429c      	cmp	r4, r3
 8003cf0:	d101      	bne.n	8003cf6 <__swsetup_r+0x46>
 8003cf2:	68ac      	ldr	r4, [r5, #8]
 8003cf4:	e7eb      	b.n	8003cce <__swsetup_r+0x1e>
 8003cf6:	4b24      	ldr	r3, [pc, #144]	; (8003d88 <__swsetup_r+0xd8>)
 8003cf8:	429c      	cmp	r4, r3
 8003cfa:	bf08      	it	eq
 8003cfc:	68ec      	ldreq	r4, [r5, #12]
 8003cfe:	e7e6      	b.n	8003cce <__swsetup_r+0x1e>
 8003d00:	0758      	lsls	r0, r3, #29
 8003d02:	d512      	bpl.n	8003d2a <__swsetup_r+0x7a>
 8003d04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d06:	b141      	cbz	r1, 8003d1a <__swsetup_r+0x6a>
 8003d08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d0c:	4299      	cmp	r1, r3
 8003d0e:	d002      	beq.n	8003d16 <__swsetup_r+0x66>
 8003d10:	4630      	mov	r0, r6
 8003d12:	f000 f99d 	bl	8004050 <_free_r>
 8003d16:	2300      	movs	r3, #0
 8003d18:	6363      	str	r3, [r4, #52]	; 0x34
 8003d1a:	89a3      	ldrh	r3, [r4, #12]
 8003d1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003d20:	81a3      	strh	r3, [r4, #12]
 8003d22:	2300      	movs	r3, #0
 8003d24:	6063      	str	r3, [r4, #4]
 8003d26:	6923      	ldr	r3, [r4, #16]
 8003d28:	6023      	str	r3, [r4, #0]
 8003d2a:	89a3      	ldrh	r3, [r4, #12]
 8003d2c:	f043 0308 	orr.w	r3, r3, #8
 8003d30:	81a3      	strh	r3, [r4, #12]
 8003d32:	6923      	ldr	r3, [r4, #16]
 8003d34:	b94b      	cbnz	r3, 8003d4a <__swsetup_r+0x9a>
 8003d36:	89a3      	ldrh	r3, [r4, #12]
 8003d38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003d3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d40:	d003      	beq.n	8003d4a <__swsetup_r+0x9a>
 8003d42:	4621      	mov	r1, r4
 8003d44:	4630      	mov	r0, r6
 8003d46:	f000 f929 	bl	8003f9c <__smakebuf_r>
 8003d4a:	89a0      	ldrh	r0, [r4, #12]
 8003d4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003d50:	f010 0301 	ands.w	r3, r0, #1
 8003d54:	d00a      	beq.n	8003d6c <__swsetup_r+0xbc>
 8003d56:	2300      	movs	r3, #0
 8003d58:	60a3      	str	r3, [r4, #8]
 8003d5a:	6963      	ldr	r3, [r4, #20]
 8003d5c:	425b      	negs	r3, r3
 8003d5e:	61a3      	str	r3, [r4, #24]
 8003d60:	6923      	ldr	r3, [r4, #16]
 8003d62:	b943      	cbnz	r3, 8003d76 <__swsetup_r+0xc6>
 8003d64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003d68:	d1ba      	bne.n	8003ce0 <__swsetup_r+0x30>
 8003d6a:	bd70      	pop	{r4, r5, r6, pc}
 8003d6c:	0781      	lsls	r1, r0, #30
 8003d6e:	bf58      	it	pl
 8003d70:	6963      	ldrpl	r3, [r4, #20]
 8003d72:	60a3      	str	r3, [r4, #8]
 8003d74:	e7f4      	b.n	8003d60 <__swsetup_r+0xb0>
 8003d76:	2000      	movs	r0, #0
 8003d78:	e7f7      	b.n	8003d6a <__swsetup_r+0xba>
 8003d7a:	bf00      	nop
 8003d7c:	20000038 	.word	0x20000038
 8003d80:	080041d0 	.word	0x080041d0
 8003d84:	080041f0 	.word	0x080041f0
 8003d88:	080041b0 	.word	0x080041b0

08003d8c <_close_r>:
 8003d8c:	b538      	push	{r3, r4, r5, lr}
 8003d8e:	2300      	movs	r3, #0
 8003d90:	4d05      	ldr	r5, [pc, #20]	; (8003da8 <_close_r+0x1c>)
 8003d92:	4604      	mov	r4, r0
 8003d94:	4608      	mov	r0, r1
 8003d96:	602b      	str	r3, [r5, #0]
 8003d98:	f7fd f809 	bl	8000dae <_close>
 8003d9c:	1c43      	adds	r3, r0, #1
 8003d9e:	d102      	bne.n	8003da6 <_close_r+0x1a>
 8003da0:	682b      	ldr	r3, [r5, #0]
 8003da2:	b103      	cbz	r3, 8003da6 <_close_r+0x1a>
 8003da4:	6023      	str	r3, [r4, #0]
 8003da6:	bd38      	pop	{r3, r4, r5, pc}
 8003da8:	200001bc 	.word	0x200001bc

08003dac <__sflush_r>:
 8003dac:	898a      	ldrh	r2, [r1, #12]
 8003dae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003db2:	4605      	mov	r5, r0
 8003db4:	0710      	lsls	r0, r2, #28
 8003db6:	460c      	mov	r4, r1
 8003db8:	d458      	bmi.n	8003e6c <__sflush_r+0xc0>
 8003dba:	684b      	ldr	r3, [r1, #4]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	dc05      	bgt.n	8003dcc <__sflush_r+0x20>
 8003dc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	dc02      	bgt.n	8003dcc <__sflush_r+0x20>
 8003dc6:	2000      	movs	r0, #0
 8003dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003dcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003dce:	2e00      	cmp	r6, #0
 8003dd0:	d0f9      	beq.n	8003dc6 <__sflush_r+0x1a>
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003dd8:	682f      	ldr	r7, [r5, #0]
 8003dda:	602b      	str	r3, [r5, #0]
 8003ddc:	d032      	beq.n	8003e44 <__sflush_r+0x98>
 8003dde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003de0:	89a3      	ldrh	r3, [r4, #12]
 8003de2:	075a      	lsls	r2, r3, #29
 8003de4:	d505      	bpl.n	8003df2 <__sflush_r+0x46>
 8003de6:	6863      	ldr	r3, [r4, #4]
 8003de8:	1ac0      	subs	r0, r0, r3
 8003dea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003dec:	b10b      	cbz	r3, 8003df2 <__sflush_r+0x46>
 8003dee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003df0:	1ac0      	subs	r0, r0, r3
 8003df2:	2300      	movs	r3, #0
 8003df4:	4602      	mov	r2, r0
 8003df6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003df8:	4628      	mov	r0, r5
 8003dfa:	6a21      	ldr	r1, [r4, #32]
 8003dfc:	47b0      	blx	r6
 8003dfe:	1c43      	adds	r3, r0, #1
 8003e00:	89a3      	ldrh	r3, [r4, #12]
 8003e02:	d106      	bne.n	8003e12 <__sflush_r+0x66>
 8003e04:	6829      	ldr	r1, [r5, #0]
 8003e06:	291d      	cmp	r1, #29
 8003e08:	d82c      	bhi.n	8003e64 <__sflush_r+0xb8>
 8003e0a:	4a2a      	ldr	r2, [pc, #168]	; (8003eb4 <__sflush_r+0x108>)
 8003e0c:	40ca      	lsrs	r2, r1
 8003e0e:	07d6      	lsls	r6, r2, #31
 8003e10:	d528      	bpl.n	8003e64 <__sflush_r+0xb8>
 8003e12:	2200      	movs	r2, #0
 8003e14:	6062      	str	r2, [r4, #4]
 8003e16:	6922      	ldr	r2, [r4, #16]
 8003e18:	04d9      	lsls	r1, r3, #19
 8003e1a:	6022      	str	r2, [r4, #0]
 8003e1c:	d504      	bpl.n	8003e28 <__sflush_r+0x7c>
 8003e1e:	1c42      	adds	r2, r0, #1
 8003e20:	d101      	bne.n	8003e26 <__sflush_r+0x7a>
 8003e22:	682b      	ldr	r3, [r5, #0]
 8003e24:	b903      	cbnz	r3, 8003e28 <__sflush_r+0x7c>
 8003e26:	6560      	str	r0, [r4, #84]	; 0x54
 8003e28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e2a:	602f      	str	r7, [r5, #0]
 8003e2c:	2900      	cmp	r1, #0
 8003e2e:	d0ca      	beq.n	8003dc6 <__sflush_r+0x1a>
 8003e30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e34:	4299      	cmp	r1, r3
 8003e36:	d002      	beq.n	8003e3e <__sflush_r+0x92>
 8003e38:	4628      	mov	r0, r5
 8003e3a:	f000 f909 	bl	8004050 <_free_r>
 8003e3e:	2000      	movs	r0, #0
 8003e40:	6360      	str	r0, [r4, #52]	; 0x34
 8003e42:	e7c1      	b.n	8003dc8 <__sflush_r+0x1c>
 8003e44:	6a21      	ldr	r1, [r4, #32]
 8003e46:	2301      	movs	r3, #1
 8003e48:	4628      	mov	r0, r5
 8003e4a:	47b0      	blx	r6
 8003e4c:	1c41      	adds	r1, r0, #1
 8003e4e:	d1c7      	bne.n	8003de0 <__sflush_r+0x34>
 8003e50:	682b      	ldr	r3, [r5, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0c4      	beq.n	8003de0 <__sflush_r+0x34>
 8003e56:	2b1d      	cmp	r3, #29
 8003e58:	d001      	beq.n	8003e5e <__sflush_r+0xb2>
 8003e5a:	2b16      	cmp	r3, #22
 8003e5c:	d101      	bne.n	8003e62 <__sflush_r+0xb6>
 8003e5e:	602f      	str	r7, [r5, #0]
 8003e60:	e7b1      	b.n	8003dc6 <__sflush_r+0x1a>
 8003e62:	89a3      	ldrh	r3, [r4, #12]
 8003e64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e68:	81a3      	strh	r3, [r4, #12]
 8003e6a:	e7ad      	b.n	8003dc8 <__sflush_r+0x1c>
 8003e6c:	690f      	ldr	r7, [r1, #16]
 8003e6e:	2f00      	cmp	r7, #0
 8003e70:	d0a9      	beq.n	8003dc6 <__sflush_r+0x1a>
 8003e72:	0793      	lsls	r3, r2, #30
 8003e74:	bf18      	it	ne
 8003e76:	2300      	movne	r3, #0
 8003e78:	680e      	ldr	r6, [r1, #0]
 8003e7a:	bf08      	it	eq
 8003e7c:	694b      	ldreq	r3, [r1, #20]
 8003e7e:	eba6 0807 	sub.w	r8, r6, r7
 8003e82:	600f      	str	r7, [r1, #0]
 8003e84:	608b      	str	r3, [r1, #8]
 8003e86:	f1b8 0f00 	cmp.w	r8, #0
 8003e8a:	dd9c      	ble.n	8003dc6 <__sflush_r+0x1a>
 8003e8c:	4643      	mov	r3, r8
 8003e8e:	463a      	mov	r2, r7
 8003e90:	4628      	mov	r0, r5
 8003e92:	6a21      	ldr	r1, [r4, #32]
 8003e94:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003e96:	47b0      	blx	r6
 8003e98:	2800      	cmp	r0, #0
 8003e9a:	dc06      	bgt.n	8003eaa <__sflush_r+0xfe>
 8003e9c:	89a3      	ldrh	r3, [r4, #12]
 8003e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ea6:	81a3      	strh	r3, [r4, #12]
 8003ea8:	e78e      	b.n	8003dc8 <__sflush_r+0x1c>
 8003eaa:	4407      	add	r7, r0
 8003eac:	eba8 0800 	sub.w	r8, r8, r0
 8003eb0:	e7e9      	b.n	8003e86 <__sflush_r+0xda>
 8003eb2:	bf00      	nop
 8003eb4:	20400001 	.word	0x20400001

08003eb8 <_fflush_r>:
 8003eb8:	b538      	push	{r3, r4, r5, lr}
 8003eba:	690b      	ldr	r3, [r1, #16]
 8003ebc:	4605      	mov	r5, r0
 8003ebe:	460c      	mov	r4, r1
 8003ec0:	b913      	cbnz	r3, 8003ec8 <_fflush_r+0x10>
 8003ec2:	2500      	movs	r5, #0
 8003ec4:	4628      	mov	r0, r5
 8003ec6:	bd38      	pop	{r3, r4, r5, pc}
 8003ec8:	b118      	cbz	r0, 8003ed2 <_fflush_r+0x1a>
 8003eca:	6983      	ldr	r3, [r0, #24]
 8003ecc:	b90b      	cbnz	r3, 8003ed2 <_fflush_r+0x1a>
 8003ece:	f7ff fa4f 	bl	8003370 <__sinit>
 8003ed2:	4b14      	ldr	r3, [pc, #80]	; (8003f24 <_fflush_r+0x6c>)
 8003ed4:	429c      	cmp	r4, r3
 8003ed6:	d11b      	bne.n	8003f10 <_fflush_r+0x58>
 8003ed8:	686c      	ldr	r4, [r5, #4]
 8003eda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d0ef      	beq.n	8003ec2 <_fflush_r+0xa>
 8003ee2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003ee4:	07d0      	lsls	r0, r2, #31
 8003ee6:	d404      	bmi.n	8003ef2 <_fflush_r+0x3a>
 8003ee8:	0599      	lsls	r1, r3, #22
 8003eea:	d402      	bmi.n	8003ef2 <_fflush_r+0x3a>
 8003eec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003eee:	f7ff fadd 	bl	80034ac <__retarget_lock_acquire_recursive>
 8003ef2:	4628      	mov	r0, r5
 8003ef4:	4621      	mov	r1, r4
 8003ef6:	f7ff ff59 	bl	8003dac <__sflush_r>
 8003efa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003efc:	4605      	mov	r5, r0
 8003efe:	07da      	lsls	r2, r3, #31
 8003f00:	d4e0      	bmi.n	8003ec4 <_fflush_r+0xc>
 8003f02:	89a3      	ldrh	r3, [r4, #12]
 8003f04:	059b      	lsls	r3, r3, #22
 8003f06:	d4dd      	bmi.n	8003ec4 <_fflush_r+0xc>
 8003f08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f0a:	f7ff fad0 	bl	80034ae <__retarget_lock_release_recursive>
 8003f0e:	e7d9      	b.n	8003ec4 <_fflush_r+0xc>
 8003f10:	4b05      	ldr	r3, [pc, #20]	; (8003f28 <_fflush_r+0x70>)
 8003f12:	429c      	cmp	r4, r3
 8003f14:	d101      	bne.n	8003f1a <_fflush_r+0x62>
 8003f16:	68ac      	ldr	r4, [r5, #8]
 8003f18:	e7df      	b.n	8003eda <_fflush_r+0x22>
 8003f1a:	4b04      	ldr	r3, [pc, #16]	; (8003f2c <_fflush_r+0x74>)
 8003f1c:	429c      	cmp	r4, r3
 8003f1e:	bf08      	it	eq
 8003f20:	68ec      	ldreq	r4, [r5, #12]
 8003f22:	e7da      	b.n	8003eda <_fflush_r+0x22>
 8003f24:	080041d0 	.word	0x080041d0
 8003f28:	080041f0 	.word	0x080041f0
 8003f2c:	080041b0 	.word	0x080041b0

08003f30 <_lseek_r>:
 8003f30:	b538      	push	{r3, r4, r5, lr}
 8003f32:	4604      	mov	r4, r0
 8003f34:	4608      	mov	r0, r1
 8003f36:	4611      	mov	r1, r2
 8003f38:	2200      	movs	r2, #0
 8003f3a:	4d05      	ldr	r5, [pc, #20]	; (8003f50 <_lseek_r+0x20>)
 8003f3c:	602a      	str	r2, [r5, #0]
 8003f3e:	461a      	mov	r2, r3
 8003f40:	f7fc ff59 	bl	8000df6 <_lseek>
 8003f44:	1c43      	adds	r3, r0, #1
 8003f46:	d102      	bne.n	8003f4e <_lseek_r+0x1e>
 8003f48:	682b      	ldr	r3, [r5, #0]
 8003f4a:	b103      	cbz	r3, 8003f4e <_lseek_r+0x1e>
 8003f4c:	6023      	str	r3, [r4, #0]
 8003f4e:	bd38      	pop	{r3, r4, r5, pc}
 8003f50:	200001bc 	.word	0x200001bc

08003f54 <__swhatbuf_r>:
 8003f54:	b570      	push	{r4, r5, r6, lr}
 8003f56:	460e      	mov	r6, r1
 8003f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f5c:	4614      	mov	r4, r2
 8003f5e:	2900      	cmp	r1, #0
 8003f60:	461d      	mov	r5, r3
 8003f62:	b096      	sub	sp, #88	; 0x58
 8003f64:	da07      	bge.n	8003f76 <__swhatbuf_r+0x22>
 8003f66:	2300      	movs	r3, #0
 8003f68:	602b      	str	r3, [r5, #0]
 8003f6a:	89b3      	ldrh	r3, [r6, #12]
 8003f6c:	061a      	lsls	r2, r3, #24
 8003f6e:	d410      	bmi.n	8003f92 <__swhatbuf_r+0x3e>
 8003f70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f74:	e00e      	b.n	8003f94 <__swhatbuf_r+0x40>
 8003f76:	466a      	mov	r2, sp
 8003f78:	f000 f8c8 	bl	800410c <_fstat_r>
 8003f7c:	2800      	cmp	r0, #0
 8003f7e:	dbf2      	blt.n	8003f66 <__swhatbuf_r+0x12>
 8003f80:	9a01      	ldr	r2, [sp, #4]
 8003f82:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003f86:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003f8a:	425a      	negs	r2, r3
 8003f8c:	415a      	adcs	r2, r3
 8003f8e:	602a      	str	r2, [r5, #0]
 8003f90:	e7ee      	b.n	8003f70 <__swhatbuf_r+0x1c>
 8003f92:	2340      	movs	r3, #64	; 0x40
 8003f94:	2000      	movs	r0, #0
 8003f96:	6023      	str	r3, [r4, #0]
 8003f98:	b016      	add	sp, #88	; 0x58
 8003f9a:	bd70      	pop	{r4, r5, r6, pc}

08003f9c <__smakebuf_r>:
 8003f9c:	898b      	ldrh	r3, [r1, #12]
 8003f9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003fa0:	079d      	lsls	r5, r3, #30
 8003fa2:	4606      	mov	r6, r0
 8003fa4:	460c      	mov	r4, r1
 8003fa6:	d507      	bpl.n	8003fb8 <__smakebuf_r+0x1c>
 8003fa8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003fac:	6023      	str	r3, [r4, #0]
 8003fae:	6123      	str	r3, [r4, #16]
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	6163      	str	r3, [r4, #20]
 8003fb4:	b002      	add	sp, #8
 8003fb6:	bd70      	pop	{r4, r5, r6, pc}
 8003fb8:	466a      	mov	r2, sp
 8003fba:	ab01      	add	r3, sp, #4
 8003fbc:	f7ff ffca 	bl	8003f54 <__swhatbuf_r>
 8003fc0:	9900      	ldr	r1, [sp, #0]
 8003fc2:	4605      	mov	r5, r0
 8003fc4:	4630      	mov	r0, r6
 8003fc6:	f7ff fa73 	bl	80034b0 <_malloc_r>
 8003fca:	b948      	cbnz	r0, 8003fe0 <__smakebuf_r+0x44>
 8003fcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fd0:	059a      	lsls	r2, r3, #22
 8003fd2:	d4ef      	bmi.n	8003fb4 <__smakebuf_r+0x18>
 8003fd4:	f023 0303 	bic.w	r3, r3, #3
 8003fd8:	f043 0302 	orr.w	r3, r3, #2
 8003fdc:	81a3      	strh	r3, [r4, #12]
 8003fde:	e7e3      	b.n	8003fa8 <__smakebuf_r+0xc>
 8003fe0:	4b0d      	ldr	r3, [pc, #52]	; (8004018 <__smakebuf_r+0x7c>)
 8003fe2:	62b3      	str	r3, [r6, #40]	; 0x28
 8003fe4:	89a3      	ldrh	r3, [r4, #12]
 8003fe6:	6020      	str	r0, [r4, #0]
 8003fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fec:	81a3      	strh	r3, [r4, #12]
 8003fee:	9b00      	ldr	r3, [sp, #0]
 8003ff0:	6120      	str	r0, [r4, #16]
 8003ff2:	6163      	str	r3, [r4, #20]
 8003ff4:	9b01      	ldr	r3, [sp, #4]
 8003ff6:	b15b      	cbz	r3, 8004010 <__smakebuf_r+0x74>
 8003ff8:	4630      	mov	r0, r6
 8003ffa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ffe:	f000 f897 	bl	8004130 <_isatty_r>
 8004002:	b128      	cbz	r0, 8004010 <__smakebuf_r+0x74>
 8004004:	89a3      	ldrh	r3, [r4, #12]
 8004006:	f023 0303 	bic.w	r3, r3, #3
 800400a:	f043 0301 	orr.w	r3, r3, #1
 800400e:	81a3      	strh	r3, [r4, #12]
 8004010:	89a0      	ldrh	r0, [r4, #12]
 8004012:	4305      	orrs	r5, r0
 8004014:	81a5      	strh	r5, [r4, #12]
 8004016:	e7cd      	b.n	8003fb4 <__smakebuf_r+0x18>
 8004018:	08003309 	.word	0x08003309

0800401c <memchr>:
 800401c:	4603      	mov	r3, r0
 800401e:	b510      	push	{r4, lr}
 8004020:	b2c9      	uxtb	r1, r1
 8004022:	4402      	add	r2, r0
 8004024:	4293      	cmp	r3, r2
 8004026:	4618      	mov	r0, r3
 8004028:	d101      	bne.n	800402e <memchr+0x12>
 800402a:	2000      	movs	r0, #0
 800402c:	e003      	b.n	8004036 <memchr+0x1a>
 800402e:	7804      	ldrb	r4, [r0, #0]
 8004030:	3301      	adds	r3, #1
 8004032:	428c      	cmp	r4, r1
 8004034:	d1f6      	bne.n	8004024 <memchr+0x8>
 8004036:	bd10      	pop	{r4, pc}

08004038 <__malloc_lock>:
 8004038:	4801      	ldr	r0, [pc, #4]	; (8004040 <__malloc_lock+0x8>)
 800403a:	f7ff ba37 	b.w	80034ac <__retarget_lock_acquire_recursive>
 800403e:	bf00      	nop
 8004040:	200001b4 	.word	0x200001b4

08004044 <__malloc_unlock>:
 8004044:	4801      	ldr	r0, [pc, #4]	; (800404c <__malloc_unlock+0x8>)
 8004046:	f7ff ba32 	b.w	80034ae <__retarget_lock_release_recursive>
 800404a:	bf00      	nop
 800404c:	200001b4 	.word	0x200001b4

08004050 <_free_r>:
 8004050:	b538      	push	{r3, r4, r5, lr}
 8004052:	4605      	mov	r5, r0
 8004054:	2900      	cmp	r1, #0
 8004056:	d043      	beq.n	80040e0 <_free_r+0x90>
 8004058:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800405c:	1f0c      	subs	r4, r1, #4
 800405e:	2b00      	cmp	r3, #0
 8004060:	bfb8      	it	lt
 8004062:	18e4      	addlt	r4, r4, r3
 8004064:	f7ff ffe8 	bl	8004038 <__malloc_lock>
 8004068:	4a1e      	ldr	r2, [pc, #120]	; (80040e4 <_free_r+0x94>)
 800406a:	6813      	ldr	r3, [r2, #0]
 800406c:	4610      	mov	r0, r2
 800406e:	b933      	cbnz	r3, 800407e <_free_r+0x2e>
 8004070:	6063      	str	r3, [r4, #4]
 8004072:	6014      	str	r4, [r2, #0]
 8004074:	4628      	mov	r0, r5
 8004076:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800407a:	f7ff bfe3 	b.w	8004044 <__malloc_unlock>
 800407e:	42a3      	cmp	r3, r4
 8004080:	d90a      	bls.n	8004098 <_free_r+0x48>
 8004082:	6821      	ldr	r1, [r4, #0]
 8004084:	1862      	adds	r2, r4, r1
 8004086:	4293      	cmp	r3, r2
 8004088:	bf01      	itttt	eq
 800408a:	681a      	ldreq	r2, [r3, #0]
 800408c:	685b      	ldreq	r3, [r3, #4]
 800408e:	1852      	addeq	r2, r2, r1
 8004090:	6022      	streq	r2, [r4, #0]
 8004092:	6063      	str	r3, [r4, #4]
 8004094:	6004      	str	r4, [r0, #0]
 8004096:	e7ed      	b.n	8004074 <_free_r+0x24>
 8004098:	461a      	mov	r2, r3
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	b10b      	cbz	r3, 80040a2 <_free_r+0x52>
 800409e:	42a3      	cmp	r3, r4
 80040a0:	d9fa      	bls.n	8004098 <_free_r+0x48>
 80040a2:	6811      	ldr	r1, [r2, #0]
 80040a4:	1850      	adds	r0, r2, r1
 80040a6:	42a0      	cmp	r0, r4
 80040a8:	d10b      	bne.n	80040c2 <_free_r+0x72>
 80040aa:	6820      	ldr	r0, [r4, #0]
 80040ac:	4401      	add	r1, r0
 80040ae:	1850      	adds	r0, r2, r1
 80040b0:	4283      	cmp	r3, r0
 80040b2:	6011      	str	r1, [r2, #0]
 80040b4:	d1de      	bne.n	8004074 <_free_r+0x24>
 80040b6:	6818      	ldr	r0, [r3, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	4401      	add	r1, r0
 80040bc:	6011      	str	r1, [r2, #0]
 80040be:	6053      	str	r3, [r2, #4]
 80040c0:	e7d8      	b.n	8004074 <_free_r+0x24>
 80040c2:	d902      	bls.n	80040ca <_free_r+0x7a>
 80040c4:	230c      	movs	r3, #12
 80040c6:	602b      	str	r3, [r5, #0]
 80040c8:	e7d4      	b.n	8004074 <_free_r+0x24>
 80040ca:	6820      	ldr	r0, [r4, #0]
 80040cc:	1821      	adds	r1, r4, r0
 80040ce:	428b      	cmp	r3, r1
 80040d0:	bf01      	itttt	eq
 80040d2:	6819      	ldreq	r1, [r3, #0]
 80040d4:	685b      	ldreq	r3, [r3, #4]
 80040d6:	1809      	addeq	r1, r1, r0
 80040d8:	6021      	streq	r1, [r4, #0]
 80040da:	6063      	str	r3, [r4, #4]
 80040dc:	6054      	str	r4, [r2, #4]
 80040de:	e7c9      	b.n	8004074 <_free_r+0x24>
 80040e0:	bd38      	pop	{r3, r4, r5, pc}
 80040e2:	bf00      	nop
 80040e4:	20000114 	.word	0x20000114

080040e8 <_read_r>:
 80040e8:	b538      	push	{r3, r4, r5, lr}
 80040ea:	4604      	mov	r4, r0
 80040ec:	4608      	mov	r0, r1
 80040ee:	4611      	mov	r1, r2
 80040f0:	2200      	movs	r2, #0
 80040f2:	4d05      	ldr	r5, [pc, #20]	; (8004108 <_read_r+0x20>)
 80040f4:	602a      	str	r2, [r5, #0]
 80040f6:	461a      	mov	r2, r3
 80040f8:	f7fc fe3c 	bl	8000d74 <_read>
 80040fc:	1c43      	adds	r3, r0, #1
 80040fe:	d102      	bne.n	8004106 <_read_r+0x1e>
 8004100:	682b      	ldr	r3, [r5, #0]
 8004102:	b103      	cbz	r3, 8004106 <_read_r+0x1e>
 8004104:	6023      	str	r3, [r4, #0]
 8004106:	bd38      	pop	{r3, r4, r5, pc}
 8004108:	200001bc 	.word	0x200001bc

0800410c <_fstat_r>:
 800410c:	b538      	push	{r3, r4, r5, lr}
 800410e:	2300      	movs	r3, #0
 8004110:	4d06      	ldr	r5, [pc, #24]	; (800412c <_fstat_r+0x20>)
 8004112:	4604      	mov	r4, r0
 8004114:	4608      	mov	r0, r1
 8004116:	4611      	mov	r1, r2
 8004118:	602b      	str	r3, [r5, #0]
 800411a:	f7fc fe53 	bl	8000dc4 <_fstat>
 800411e:	1c43      	adds	r3, r0, #1
 8004120:	d102      	bne.n	8004128 <_fstat_r+0x1c>
 8004122:	682b      	ldr	r3, [r5, #0]
 8004124:	b103      	cbz	r3, 8004128 <_fstat_r+0x1c>
 8004126:	6023      	str	r3, [r4, #0]
 8004128:	bd38      	pop	{r3, r4, r5, pc}
 800412a:	bf00      	nop
 800412c:	200001bc 	.word	0x200001bc

08004130 <_isatty_r>:
 8004130:	b538      	push	{r3, r4, r5, lr}
 8004132:	2300      	movs	r3, #0
 8004134:	4d05      	ldr	r5, [pc, #20]	; (800414c <_isatty_r+0x1c>)
 8004136:	4604      	mov	r4, r0
 8004138:	4608      	mov	r0, r1
 800413a:	602b      	str	r3, [r5, #0]
 800413c:	f7fc fe51 	bl	8000de2 <_isatty>
 8004140:	1c43      	adds	r3, r0, #1
 8004142:	d102      	bne.n	800414a <_isatty_r+0x1a>
 8004144:	682b      	ldr	r3, [r5, #0]
 8004146:	b103      	cbz	r3, 800414a <_isatty_r+0x1a>
 8004148:	6023      	str	r3, [r4, #0]
 800414a:	bd38      	pop	{r3, r4, r5, pc}
 800414c:	200001bc 	.word	0x200001bc

08004150 <_init>:
 8004150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004152:	bf00      	nop
 8004154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004156:	bc08      	pop	{r3}
 8004158:	469e      	mov	lr, r3
 800415a:	4770      	bx	lr

0800415c <_fini>:
 800415c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800415e:	bf00      	nop
 8004160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004162:	bc08      	pop	{r3}
 8004164:	469e      	mov	lr, r3
 8004166:	4770      	bx	lr
