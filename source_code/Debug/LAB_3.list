
LAB_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003858  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08003964  08003964  00013964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a20  08003a20  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  08003a20  08003a20  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a20  08003a20  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a20  08003a20  00013a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a24  08003a24  00013a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08003a28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  200000b0  08003ad8  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08003ad8  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001149c  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002933  00000000  00000000  00031575  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  00033ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf0  00000000  00000000  00034cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018aaa  00000000  00000000  000359c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010fc1  00000000  00000000  0004e472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a721  00000000  00000000  0005f433  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e9b54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ed4  00000000  00000000  000e9ba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b0 	.word	0x200000b0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800394c 	.word	0x0800394c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b4 	.word	0x200000b4
 8000148:	0800394c 	.word	0x0800394c

0800014c <subKeyProcess>:

int TimeOutForKeyPress =  100;
int status_LED1 = 0;
int button1_flag = 0;

void subKeyProcess(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	button1_flag = 1;
 8000150:	4b03      	ldr	r3, [pc, #12]	; (8000160 <subKeyProcess+0x14>)
 8000152:	2201      	movs	r2, #1
 8000154:	601a      	str	r2, [r3, #0]
}
 8000156:	bf00      	nop
 8000158:	46bd      	mov	sp, r7
 800015a:	bc80      	pop	{r7}
 800015c:	4770      	bx	lr
 800015e:	bf00      	nop
 8000160:	200000cc 	.word	0x200000cc

08000164 <getKeyInput>:
void getKeyInput(){
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
  KeyReg2 = KeyReg1;
 8000168:	4b1f      	ldr	r3, [pc, #124]	; (80001e8 <getKeyInput+0x84>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	4a1f      	ldr	r2, [pc, #124]	; (80001ec <getKeyInput+0x88>)
 800016e:	6013      	str	r3, [r2, #0]
  KeyReg1 = KeyReg0;
 8000170:	4b1f      	ldr	r3, [pc, #124]	; (80001f0 <getKeyInput+0x8c>)
 8000172:	681b      	ldr	r3, [r3, #0]
 8000174:	4a1c      	ldr	r2, [pc, #112]	; (80001e8 <getKeyInput+0x84>)
 8000176:	6013      	str	r3, [r2, #0]
  KeyReg0 = HAL_GPIO_ReadPin(GPIOA, MODE_Pin);
 8000178:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800017c:	481d      	ldr	r0, [pc, #116]	; (80001f4 <getKeyInput+0x90>)
 800017e:	f001 f8a7 	bl	80012d0 <HAL_GPIO_ReadPin>
 8000182:	4603      	mov	r3, r0
 8000184:	461a      	mov	r2, r3
 8000186:	4b1a      	ldr	r3, [pc, #104]	; (80001f0 <getKeyInput+0x8c>)
 8000188:	601a      	str	r2, [r3, #0]
  if ((KeyReg1 == KeyReg0) && (KeyReg1 == KeyReg2)){
 800018a:	4b17      	ldr	r3, [pc, #92]	; (80001e8 <getKeyInput+0x84>)
 800018c:	681a      	ldr	r2, [r3, #0]
 800018e:	4b18      	ldr	r3, [pc, #96]	; (80001f0 <getKeyInput+0x8c>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	429a      	cmp	r2, r3
 8000194:	d125      	bne.n	80001e2 <getKeyInput+0x7e>
 8000196:	4b14      	ldr	r3, [pc, #80]	; (80001e8 <getKeyInput+0x84>)
 8000198:	681a      	ldr	r2, [r3, #0]
 800019a:	4b14      	ldr	r3, [pc, #80]	; (80001ec <getKeyInput+0x88>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	429a      	cmp	r2, r3
 80001a0:	d11f      	bne.n	80001e2 <getKeyInput+0x7e>
    if (KeyReg2 != KeyReg3){
 80001a2:	4b12      	ldr	r3, [pc, #72]	; (80001ec <getKeyInput+0x88>)
 80001a4:	681a      	ldr	r2, [r3, #0]
 80001a6:	4b14      	ldr	r3, [pc, #80]	; (80001f8 <getKeyInput+0x94>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	429a      	cmp	r2, r3
 80001ac:	d00d      	beq.n	80001ca <getKeyInput+0x66>
      KeyReg3 = KeyReg2;
 80001ae:	4b0f      	ldr	r3, [pc, #60]	; (80001ec <getKeyInput+0x88>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	4a11      	ldr	r2, [pc, #68]	; (80001f8 <getKeyInput+0x94>)
 80001b4:	6013      	str	r3, [r2, #0]

      if (KeyReg3 == PRESSED_STATE){
 80001b6:	4b10      	ldr	r3, [pc, #64]	; (80001f8 <getKeyInput+0x94>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d111      	bne.n	80001e2 <getKeyInput+0x7e>
        TimeOutForKeyPress = 100;
 80001be:	4b0f      	ldr	r3, [pc, #60]	; (80001fc <getKeyInput+0x98>)
 80001c0:	2264      	movs	r2, #100	; 0x64
 80001c2:	601a      	str	r2, [r3, #0]
        subKeyProcess();
 80001c4:	f7ff ffc2 	bl	800014c <subKeyProcess>
        if (TimeOutForKeyPress == 0){
          KeyReg3 = NORMAL_STATE;
        }
    }
  }
}
 80001c8:	e00b      	b.n	80001e2 <getKeyInput+0x7e>
       TimeOutForKeyPress --;
 80001ca:	4b0c      	ldr	r3, [pc, #48]	; (80001fc <getKeyInput+0x98>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	3b01      	subs	r3, #1
 80001d0:	4a0a      	ldr	r2, [pc, #40]	; (80001fc <getKeyInput+0x98>)
 80001d2:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress == 0){
 80001d4:	4b09      	ldr	r3, [pc, #36]	; (80001fc <getKeyInput+0x98>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d102      	bne.n	80001e2 <getKeyInput+0x7e>
          KeyReg3 = NORMAL_STATE;
 80001dc:	4b06      	ldr	r3, [pc, #24]	; (80001f8 <getKeyInput+0x94>)
 80001de:	2201      	movs	r2, #1
 80001e0:	601a      	str	r2, [r3, #0]
}
 80001e2:	bf00      	nop
 80001e4:	bd80      	pop	{r7, pc}
 80001e6:	bf00      	nop
 80001e8:	20000004 	.word	0x20000004
 80001ec:	20000008 	.word	0x20000008
 80001f0:	20000000 	.word	0x20000000
 80001f4:	40010800 	.word	0x40010800
 80001f8:	2000000c 	.word	0x2000000c
 80001fc:	20000010 	.word	0x20000010

08000200 <button_reading>:
// we define counter for automatically increasing the value
// after the button is pressed more than 1 second .
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];
static uint16_t counterForButtonPressOneQuarterSecond[N0_OF_BUTTONS];

void button_reading(void) {
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 8000206:	2300      	movs	r3, #0
 8000208:	607b      	str	r3, [r7, #4]
 800020a:	e081      	b.n	8000310 <button_reading+0x110>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 800020c:	4a45      	ldr	r2, [pc, #276]	; (8000324 <button_reading+0x124>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	4413      	add	r3, r2
 8000212:	7819      	ldrb	r1, [r3, #0]
 8000214:	4a44      	ldr	r2, [pc, #272]	; (8000328 <button_reading+0x128>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4413      	add	r3, r2
 800021a:	460a      	mov	r2, r1
 800021c:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(buttonPort[i], buttonPin[i]);
 800021e:	4a43      	ldr	r2, [pc, #268]	; (800032c <button_reading+0x12c>)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000226:	4942      	ldr	r1, [pc, #264]	; (8000330 <button_reading+0x130>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800022e:	4619      	mov	r1, r3
 8000230:	4610      	mov	r0, r2
 8000232:	f001 f84d 	bl	80012d0 <HAL_GPIO_ReadPin>
 8000236:	4603      	mov	r3, r0
 8000238:	4619      	mov	r1, r3
 800023a:	4a3a      	ldr	r2, [pc, #232]	; (8000324 <button_reading+0x124>)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	4413      	add	r3, r2
 8000240:	460a      	mov	r2, r1
 8000242:	701a      	strb	r2, [r3, #0]

		if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) {
 8000244:	4a37      	ldr	r2, [pc, #220]	; (8000324 <button_reading+0x124>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	4413      	add	r3, r2
 800024a:	781a      	ldrb	r2, [r3, #0]
 800024c:	4936      	ldr	r1, [pc, #216]	; (8000328 <button_reading+0x128>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	440b      	add	r3, r1
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	429a      	cmp	r2, r3
 8000256:	d158      	bne.n	800030a <button_reading+0x10a>
			//valid input, can read now
			buttonBuffer[i] = debounceButtonBuffer1[i];
 8000258:	4a32      	ldr	r2, [pc, #200]	; (8000324 <button_reading+0x124>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	4413      	add	r3, r2
 800025e:	7819      	ldrb	r1, [r3, #0]
 8000260:	4a34      	ldr	r2, [pc, #208]	; (8000334 <button_reading+0x134>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	4413      	add	r3, r2
 8000266:	460a      	mov	r2, r1
 8000268:	701a      	strb	r2, [r3, #0]
			if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 800026a:	4a32      	ldr	r2, [pc, #200]	; (8000334 <button_reading+0x134>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	4413      	add	r3, r2
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d135      	bne.n	80002e2 <button_reading+0xe2>
				if ((counterForButtonPressOneQuarterSecond[i] < DURATION_FOR_AUTO_RUNNING_MODE)
 8000276:	4a30      	ldr	r2, [pc, #192]	; (8000338 <button_reading+0x138>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800027e:	2b18      	cmp	r3, #24
 8000280:	d80e      	bhi.n	80002a0 <button_reading+0xa0>
						&& AllowToExecuteAfterASecondPressed)
 8000282:	4b2e      	ldr	r3, [pc, #184]	; (800033c <button_reading+0x13c>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d00a      	beq.n	80002a0 <button_reading+0xa0>
				{
					counterForButtonPressOneQuarterSecond[i]++;
 800028a:	4a2b      	ldr	r2, [pc, #172]	; (8000338 <button_reading+0x138>)
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000292:	3301      	adds	r3, #1
 8000294:	b299      	uxth	r1, r3
 8000296:	4a28      	ldr	r2, [pc, #160]	; (8000338 <button_reading+0x138>)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800029e:	e009      	b.n	80002b4 <button_reading+0xb4>
				} else {
					counterForButtonPressOneQuarterSecond[i] = 0;
 80002a0:	4a25      	ldr	r2, [pc, #148]	; (8000338 <button_reading+0x138>)
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	2100      	movs	r1, #0
 80002a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flagForButtonPressOneQuarterSecond[i] = 1;
 80002aa:	4a25      	ldr	r2, [pc, #148]	; (8000340 <button_reading+0x140>)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2101      	movs	r1, #1
 80002b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				}
				if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 80002b4:	4a23      	ldr	r2, [pc, #140]	; (8000344 <button_reading+0x144>)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002bc:	2b63      	cmp	r3, #99	; 0x63
 80002be:	d80a      	bhi.n	80002d6 <button_reading+0xd6>
					counterForButtonPress1s[i]++;
 80002c0:	4a20      	ldr	r2, [pc, #128]	; (8000344 <button_reading+0x144>)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002c8:	3301      	adds	r3, #1
 80002ca:	b299      	uxth	r1, r3
 80002cc:	4a1d      	ldr	r2, [pc, #116]	; (8000344 <button_reading+0x144>)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80002d4:	e019      	b.n	800030a <button_reading+0x10a>
				} else {
					// the flag is turned on when 1 second has passed
					// since the button is pressed .
					flagForButtonPress1s[i] = 1;
 80002d6:	4a1c      	ldr	r2, [pc, #112]	; (8000348 <button_reading+0x148>)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	4413      	add	r3, r2
 80002dc:	2201      	movs	r2, #1
 80002de:	701a      	strb	r2, [r3, #0]
 80002e0:	e013      	b.n	800030a <button_reading+0x10a>
				}
			}

			else {
				counterForButtonPress1s[i] = 0;
 80002e2:	4a18      	ldr	r2, [pc, #96]	; (8000344 <button_reading+0x144>)
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	2100      	movs	r1, #0
 80002e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				counterForButtonPressOneQuarterSecond[i] = 0;
 80002ec:	4a12      	ldr	r2, [pc, #72]	; (8000338 <button_reading+0x138>)
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	2100      	movs	r1, #0
 80002f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[i] = 0;
 80002f6:	4a14      	ldr	r2, [pc, #80]	; (8000348 <button_reading+0x148>)
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	4413      	add	r3, r2
 80002fc:	2200      	movs	r2, #0
 80002fe:	701a      	strb	r2, [r3, #0]
				flagForButtonPressOneQuarterSecond[i] = 0;
 8000300:	4a0f      	ldr	r2, [pc, #60]	; (8000340 <button_reading+0x140>)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	2100      	movs	r1, #0
 8000306:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	3301      	adds	r3, #1
 800030e:	607b      	str	r3, [r7, #4]
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	2b03      	cmp	r3, #3
 8000314:	f77f af7a 	ble.w	800020c <button_reading+0xc>
			}
		}
	}
}
 8000318:	bf00      	nop
 800031a:	bf00      	nop
 800031c:	3708      	adds	r7, #8
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	200000e8 	.word	0x200000e8
 8000328:	200000ec 	.word	0x200000ec
 800032c:	20000024 	.word	0x20000024
 8000330:	20000034 	.word	0x20000034
 8000334:	200000e4 	.word	0x200000e4
 8000338:	200000fc 	.word	0x200000fc
 800033c:	200000d0 	.word	0x200000d0
 8000340:	200000d4 	.word	0x200000d4
 8000344:	200000f4 	.word	0x200000f4
 8000348:	200000f0 	.word	0x200000f0

0800034c <led_init>:
		led_buffer[2] = 0;
		led_buffer[3] = light_time;
	}
}

void led_init() {
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
	GPIOB->BSRR = 0x3F00;
 8000350:	4b03      	ldr	r3, [pc, #12]	; (8000360 <led_init+0x14>)
 8000352:	f44f 527c 	mov.w	r2, #16128	; 0x3f00
 8000356:	611a      	str	r2, [r3, #16]
}
 8000358:	bf00      	nop
 800035a:	46bd      	mov	sp, r7
 800035c:	bc80      	pop	{r7}
 800035e:	4770      	bx	lr
 8000360:	40010c00 	.word	0x40010c00

08000364 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000368:	f000 fc16 	bl	8000b98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800036c:	f000 f82c 	bl	80003c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000370:	f000 f8dc 	bl	800052c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000374:	f000 f864 	bl	8000440 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000378:	f000 f8ae 	bl	80004d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2) ;
 800037c:	480f      	ldr	r0, [pc, #60]	; (80003bc <main+0x58>)
 800037e:	f001 fc35 	bl	8001bec <HAL_TIM_Base_Start_IT>
   //led7SEG_init();
   GPIOA->BRR=0xFF;
 8000382:	4b0f      	ldr	r3, [pc, #60]	; (80003c0 <main+0x5c>)
 8000384:	22ff      	movs	r2, #255	; 0xff
 8000386:	615a      	str	r2, [r3, #20]
   led_init();
 8000388:	f7ff ffe0 	bl	800034c <led_init>
   traffic_init();
 800038c:	f000 fbba 	bl	8000b04 <traffic_init>
   setTimer1(2);
 8000390:	2002      	movs	r0, #2
 8000392:	f000 f949 	bl	8000628 <setTimer1>
   setTimer2(DURATION_1S);
 8000396:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800039a:	f000 f95f 	bl	800065c <setTimer2>
   setTimer3(DURATION_1S);
 800039e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003a2:	f000 f975 	bl	8000690 <setTimer3>
   setTimer4(DURATION_1S);
 80003a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003aa:	f000 f98b 	bl	80006c4 <setTimer4>
   setTimer5(250);
 80003ae:	20fa      	movs	r0, #250	; 0xfa
 80003b0:	f000 f9a2 	bl	80006f8 <setTimer5>
   printf("The system is in MODE '1 - NORMAL_MODE' \r\n");
 80003b4:	4803      	ldr	r0, [pc, #12]	; (80003c4 <main+0x60>)
 80003b6:	f002 fe75 	bl	80030a4 <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003ba:	e7fe      	b.n	80003ba <main+0x56>
 80003bc:	20000138 	.word	0x20000138
 80003c0:	40010800 	.word	0x40010800
 80003c4:	08003964 	.word	0x08003964

080003c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b090      	sub	sp, #64	; 0x40
 80003cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ce:	f107 0318 	add.w	r3, r7, #24
 80003d2:	2228      	movs	r2, #40	; 0x28
 80003d4:	2100      	movs	r1, #0
 80003d6:	4618      	mov	r0, r3
 80003d8:	f002 fdee 	bl	8002fb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003dc:	1d3b      	adds	r3, r7, #4
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	605a      	str	r2, [r3, #4]
 80003e4:	609a      	str	r2, [r3, #8]
 80003e6:	60da      	str	r2, [r3, #12]
 80003e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003ea:	2302      	movs	r3, #2
 80003ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ee:	2301      	movs	r3, #1
 80003f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003f2:	2310      	movs	r3, #16
 80003f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003f6:	2300      	movs	r3, #0
 80003f8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003fa:	f107 0318 	add.w	r3, r7, #24
 80003fe:	4618      	mov	r0, r3
 8000400:	f000 ff96 	bl	8001330 <HAL_RCC_OscConfig>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800040a:	f000 f8f1 	bl	80005f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800040e:	230f      	movs	r3, #15
 8000410:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000412:	2300      	movs	r3, #0
 8000414:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000416:	2300      	movs	r3, #0
 8000418:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800041a:	2300      	movs	r3, #0
 800041c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800041e:	2300      	movs	r3, #0
 8000420:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	2100      	movs	r1, #0
 8000426:	4618      	mov	r0, r3
 8000428:	f001 fa02 	bl	8001830 <HAL_RCC_ClockConfig>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000432:	f000 f8dd 	bl	80005f0 <Error_Handler>
  }
}
 8000436:	bf00      	nop
 8000438:	3740      	adds	r7, #64	; 0x40
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
	...

08000440 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b086      	sub	sp, #24
 8000444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000446:	f107 0308 	add.w	r3, r7, #8
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	605a      	str	r2, [r3, #4]
 8000450:	609a      	str	r2, [r3, #8]
 8000452:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000454:	463b      	mov	r3, r7
 8000456:	2200      	movs	r2, #0
 8000458:	601a      	str	r2, [r3, #0]
 800045a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800045c:	4b1d      	ldr	r3, [pc, #116]	; (80004d4 <MX_TIM2_Init+0x94>)
 800045e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000462:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000464:	4b1b      	ldr	r3, [pc, #108]	; (80004d4 <MX_TIM2_Init+0x94>)
 8000466:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800046a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800046c:	4b19      	ldr	r3, [pc, #100]	; (80004d4 <MX_TIM2_Init+0x94>)
 800046e:	2200      	movs	r2, #0
 8000470:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000472:	4b18      	ldr	r3, [pc, #96]	; (80004d4 <MX_TIM2_Init+0x94>)
 8000474:	2209      	movs	r2, #9
 8000476:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000478:	4b16      	ldr	r3, [pc, #88]	; (80004d4 <MX_TIM2_Init+0x94>)
 800047a:	2200      	movs	r2, #0
 800047c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800047e:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <MX_TIM2_Init+0x94>)
 8000480:	2200      	movs	r2, #0
 8000482:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000484:	4813      	ldr	r0, [pc, #76]	; (80004d4 <MX_TIM2_Init+0x94>)
 8000486:	f001 fb61 	bl	8001b4c <HAL_TIM_Base_Init>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000490:	f000 f8ae 	bl	80005f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000494:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000498:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800049a:	f107 0308 	add.w	r3, r7, #8
 800049e:	4619      	mov	r1, r3
 80004a0:	480c      	ldr	r0, [pc, #48]	; (80004d4 <MX_TIM2_Init+0x94>)
 80004a2:	f001 fcf7 	bl	8001e94 <HAL_TIM_ConfigClockSource>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80004ac:	f000 f8a0 	bl	80005f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004b0:	2300      	movs	r3, #0
 80004b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004b4:	2300      	movs	r3, #0
 80004b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004b8:	463b      	mov	r3, r7
 80004ba:	4619      	mov	r1, r3
 80004bc:	4805      	ldr	r0, [pc, #20]	; (80004d4 <MX_TIM2_Init+0x94>)
 80004be:	f001 fec3 	bl	8002248 <HAL_TIMEx_MasterConfigSynchronization>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80004c8:	f000 f892 	bl	80005f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004cc:	bf00      	nop
 80004ce:	3718      	adds	r7, #24
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	20000138 	.word	0x20000138

080004d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004dc:	4b11      	ldr	r3, [pc, #68]	; (8000524 <MX_USART2_UART_Init+0x4c>)
 80004de:	4a12      	ldr	r2, [pc, #72]	; (8000528 <MX_USART2_UART_Init+0x50>)
 80004e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80004e2:	4b10      	ldr	r3, [pc, #64]	; (8000524 <MX_USART2_UART_Init+0x4c>)
 80004e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80004e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004ea:	4b0e      	ldr	r3, [pc, #56]	; (8000524 <MX_USART2_UART_Init+0x4c>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004f0:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <MX_USART2_UART_Init+0x4c>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004f6:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <MX_USART2_UART_Init+0x4c>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004fc:	4b09      	ldr	r3, [pc, #36]	; (8000524 <MX_USART2_UART_Init+0x4c>)
 80004fe:	220c      	movs	r2, #12
 8000500:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000502:	4b08      	ldr	r3, [pc, #32]	; (8000524 <MX_USART2_UART_Init+0x4c>)
 8000504:	2200      	movs	r2, #0
 8000506:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000508:	4b06      	ldr	r3, [pc, #24]	; (8000524 <MX_USART2_UART_Init+0x4c>)
 800050a:	2200      	movs	r2, #0
 800050c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800050e:	4805      	ldr	r0, [pc, #20]	; (8000524 <MX_USART2_UART_Init+0x4c>)
 8000510:	f001 ff04 	bl	800231c <HAL_UART_Init>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800051a:	f000 f869 	bl	80005f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800051e:	bf00      	nop
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	20000180 	.word	0x20000180
 8000528:	40004400 	.word	0x40004400

0800052c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000532:	f107 0308 	add.w	r3, r7, #8
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	605a      	str	r2, [r3, #4]
 800053c:	609a      	str	r2, [r3, #8]
 800053e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000540:	4b28      	ldr	r3, [pc, #160]	; (80005e4 <MX_GPIO_Init+0xb8>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	4a27      	ldr	r2, [pc, #156]	; (80005e4 <MX_GPIO_Init+0xb8>)
 8000546:	f043 0304 	orr.w	r3, r3, #4
 800054a:	6193      	str	r3, [r2, #24]
 800054c:	4b25      	ldr	r3, [pc, #148]	; (80005e4 <MX_GPIO_Init+0xb8>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	f003 0304 	and.w	r3, r3, #4
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000558:	4b22      	ldr	r3, [pc, #136]	; (80005e4 <MX_GPIO_Init+0xb8>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	4a21      	ldr	r2, [pc, #132]	; (80005e4 <MX_GPIO_Init+0xb8>)
 800055e:	f043 0308 	orr.w	r3, r3, #8
 8000562:	6193      	str	r3, [r2, #24]
 8000564:	4b1f      	ldr	r3, [pc, #124]	; (80005e4 <MX_GPIO_Init+0xb8>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	f003 0308 	and.w	r3, r3, #8
 800056c:	603b      	str	r3, [r7, #0]
 800056e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	21f0      	movs	r1, #240	; 0xf0
 8000574:	481c      	ldr	r0, [pc, #112]	; (80005e8 <MX_GPIO_Init+0xbc>)
 8000576:	f000 fec2 	bl	80012fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|D3_Pin
 800057a:	2200      	movs	r2, #0
 800057c:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8000580:	481a      	ldr	r0, [pc, #104]	; (80005ec <MX_GPIO_Init+0xc0>)
 8000582:	f000 febc 	bl	80012fe <HAL_GPIO_WritePin>
                          |D4_Pin|D5_Pin|D6_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|D0_Pin
                          |D1_Pin|D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin;
 8000586:	23f0      	movs	r3, #240	; 0xf0
 8000588:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058a:	2301      	movs	r3, #1
 800058c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058e:	2300      	movs	r3, #0
 8000590:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000592:	2302      	movs	r3, #2
 8000594:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000596:	f107 0308 	add.w	r3, r7, #8
 800059a:	4619      	mov	r1, r3
 800059c:	4812      	ldr	r0, [pc, #72]	; (80005e8 <MX_GPIO_Init+0xbc>)
 800059e:	f000 fd1d 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin D3_Pin
                           D4_Pin D5_Pin D6_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin D0_Pin
                           D1_Pin D2_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|D3_Pin
 80005a2:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80005a6:	60bb      	str	r3, [r7, #8]
                          |D4_Pin|D5_Pin|D6_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|D0_Pin
                          |D1_Pin|D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a8:	2301      	movs	r3, #1
 80005aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ac:	2300      	movs	r3, #0
 80005ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b0:	2302      	movs	r3, #2
 80005b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b4:	f107 0308 	add.w	r3, r7, #8
 80005b8:	4619      	mov	r1, r3
 80005ba:	480c      	ldr	r0, [pc, #48]	; (80005ec <MX_GPIO_Init+0xc0>)
 80005bc:	f000 fd0e 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_Pin ADD_Pin CONFIRM_Pin RESET_Pin */
  GPIO_InitStruct.Pin = MODE_Pin|ADD_Pin|CONFIRM_Pin|RESET_Pin;
 80005c0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80005c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005ca:	2301      	movs	r3, #1
 80005cc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ce:	f107 0308 	add.w	r3, r7, #8
 80005d2:	4619      	mov	r1, r3
 80005d4:	4804      	ldr	r0, [pc, #16]	; (80005e8 <MX_GPIO_Init+0xbc>)
 80005d6:	f000 fd01 	bl	8000fdc <HAL_GPIO_Init>

}
 80005da:	bf00      	nop
 80005dc:	3718      	adds	r7, #24
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40021000 	.word	0x40021000
 80005e8:	40010800 	.word	0x40010800
 80005ec:	40010c00 	.word	0x40010c00

080005f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f4:	b672      	cpsid	i
}
 80005f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <Error_Handler+0x8>
	...

080005fc <_write>:
#include "output_display.h"

extern UART_HandleTypeDef huart2;

int _write(int file, char *ptr, int len)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	60b9      	str	r1, [r7, #8]
 8000606:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	b29a      	uxth	r2, r3
 800060c:	f04f 33ff 	mov.w	r3, #4294967295
 8000610:	68b9      	ldr	r1, [r7, #8]
 8000612:	4804      	ldr	r0, [pc, #16]	; (8000624 <_write+0x28>)
 8000614:	f001 fed2 	bl	80023bc <HAL_UART_Transmit>
	return len;
 8000618:	687b      	ldr	r3, [r7, #4]
}
 800061a:	4618      	mov	r0, r3
 800061c:	3710      	adds	r7, #16
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20000180 	.word	0x20000180

08000628 <setTimer1>:
int timer3_counter = 0;
int timer4_counter = 0;
int timer5_counter = 0;

int TIMER_CYCLE = 10; // 10ms
void setTimer1(int duration) {
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 8000630:	4b07      	ldr	r3, [pc, #28]	; (8000650 <setTimer1+0x28>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	687a      	ldr	r2, [r7, #4]
 8000636:	fb92 f3f3 	sdiv	r3, r2, r3
 800063a:	4a06      	ldr	r2, [pc, #24]	; (8000654 <setTimer1+0x2c>)
 800063c:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <setTimer1+0x30>)
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	2000003c 	.word	0x2000003c
 8000654:	20000118 	.word	0x20000118
 8000658:	20000104 	.word	0x20000104

0800065c <setTimer2>:
void setTimer2(int duration) {
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 8000664:	4b07      	ldr	r3, [pc, #28]	; (8000684 <setTimer2+0x28>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	fb92 f3f3 	sdiv	r3, r2, r3
 800066e:	4a06      	ldr	r2, [pc, #24]	; (8000688 <setTimer2+0x2c>)
 8000670:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000672:	4b06      	ldr	r3, [pc, #24]	; (800068c <setTimer2+0x30>)
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	bc80      	pop	{r7}
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	2000003c 	.word	0x2000003c
 8000688:	2000011c 	.word	0x2000011c
 800068c:	20000108 	.word	0x20000108

08000690 <setTimer3>:
void setTimer3(int duration) {
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TIMER_CYCLE;
 8000698:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <setTimer3+0x28>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	fb92 f3f3 	sdiv	r3, r2, r3
 80006a2:	4a06      	ldr	r2, [pc, #24]	; (80006bc <setTimer3+0x2c>)
 80006a4:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <setTimer3+0x30>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
}
 80006ac:	bf00      	nop
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bc80      	pop	{r7}
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	2000003c 	.word	0x2000003c
 80006bc:	20000120 	.word	0x20000120
 80006c0:	2000010c 	.word	0x2000010c

080006c4 <setTimer4>:
void setTimer4(int duration) {
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	timer4_counter = duration / TIMER_CYCLE;
 80006cc:	4b07      	ldr	r3, [pc, #28]	; (80006ec <setTimer4+0x28>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	687a      	ldr	r2, [r7, #4]
 80006d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80006d6:	4a06      	ldr	r2, [pc, #24]	; (80006f0 <setTimer4+0x2c>)
 80006d8:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <setTimer4+0x30>)
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bc80      	pop	{r7}
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	2000003c 	.word	0x2000003c
 80006f0:	20000124 	.word	0x20000124
 80006f4:	20000110 	.word	0x20000110

080006f8 <setTimer5>:

void setTimer5(int duration) {
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	timer5_counter = duration / TIMER_CYCLE;
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <setTimer5+0x28>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	687a      	ldr	r2, [r7, #4]
 8000706:	fb92 f3f3 	sdiv	r3, r2, r3
 800070a:	4a06      	ldr	r2, [pc, #24]	; (8000724 <setTimer5+0x2c>)
 800070c:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <setTimer5+0x30>)
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
}
 8000714:	bf00      	nop
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	bc80      	pop	{r7}
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	2000003c 	.word	0x2000003c
 8000724:	20000128 	.word	0x20000128
 8000728:	20000114 	.word	0x20000114

0800072c <timerRun>:

void timerRun() {
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 8000730:	4b29      	ldr	r3, [pc, #164]	; (80007d8 <timerRun+0xac>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	dd0b      	ble.n	8000750 <timerRun+0x24>
		timer1_counter--;
 8000738:	4b27      	ldr	r3, [pc, #156]	; (80007d8 <timerRun+0xac>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	3b01      	subs	r3, #1
 800073e:	4a26      	ldr	r2, [pc, #152]	; (80007d8 <timerRun+0xac>)
 8000740:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0) {
 8000742:	4b25      	ldr	r3, [pc, #148]	; (80007d8 <timerRun+0xac>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	dc02      	bgt.n	8000750 <timerRun+0x24>
			timer1_flag = 1;
 800074a:	4b24      	ldr	r3, [pc, #144]	; (80007dc <timerRun+0xb0>)
 800074c:	2201      	movs	r2, #1
 800074e:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter > 0) {
 8000750:	4b23      	ldr	r3, [pc, #140]	; (80007e0 <timerRun+0xb4>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	dd0b      	ble.n	8000770 <timerRun+0x44>
		timer2_counter--;
 8000758:	4b21      	ldr	r3, [pc, #132]	; (80007e0 <timerRun+0xb4>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	3b01      	subs	r3, #1
 800075e:	4a20      	ldr	r2, [pc, #128]	; (80007e0 <timerRun+0xb4>)
 8000760:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0) {
 8000762:	4b1f      	ldr	r3, [pc, #124]	; (80007e0 <timerRun+0xb4>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	2b00      	cmp	r3, #0
 8000768:	dc02      	bgt.n	8000770 <timerRun+0x44>
			timer2_flag = 1;
 800076a:	4b1e      	ldr	r3, [pc, #120]	; (80007e4 <timerRun+0xb8>)
 800076c:	2201      	movs	r2, #1
 800076e:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_counter > 0) {
 8000770:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <timerRun+0xbc>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	dd0b      	ble.n	8000790 <timerRun+0x64>
		timer3_counter--;
 8000778:	4b1b      	ldr	r3, [pc, #108]	; (80007e8 <timerRun+0xbc>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	3b01      	subs	r3, #1
 800077e:	4a1a      	ldr	r2, [pc, #104]	; (80007e8 <timerRun+0xbc>)
 8000780:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0) {
 8000782:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <timerRun+0xbc>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	dc02      	bgt.n	8000790 <timerRun+0x64>
			timer3_flag = 1;
 800078a:	4b18      	ldr	r3, [pc, #96]	; (80007ec <timerRun+0xc0>)
 800078c:	2201      	movs	r2, #1
 800078e:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer4_counter > 0) {
 8000790:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <timerRun+0xc4>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	dd0b      	ble.n	80007b0 <timerRun+0x84>
		timer4_counter--;
 8000798:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <timerRun+0xc4>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	3b01      	subs	r3, #1
 800079e:	4a14      	ldr	r2, [pc, #80]	; (80007f0 <timerRun+0xc4>)
 80007a0:	6013      	str	r3, [r2, #0]
		if (timer4_counter <= 0) {
 80007a2:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <timerRun+0xc4>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	dc02      	bgt.n	80007b0 <timerRun+0x84>
			timer4_flag = 1;
 80007aa:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <timerRun+0xc8>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer5_counter > 0) {
 80007b0:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <timerRun+0xcc>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	dd0b      	ble.n	80007d0 <timerRun+0xa4>
		timer5_counter--;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <timerRun+0xcc>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	3b01      	subs	r3, #1
 80007be:	4a0e      	ldr	r2, [pc, #56]	; (80007f8 <timerRun+0xcc>)
 80007c0:	6013      	str	r3, [r2, #0]
		if (timer5_counter <= 0) {
 80007c2:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <timerRun+0xcc>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	dc02      	bgt.n	80007d0 <timerRun+0xa4>
			timer5_flag = 1;
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <timerRun+0xd0>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	601a      	str	r2, [r3, #0]
		}
	}
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr
 80007d8:	20000118 	.word	0x20000118
 80007dc:	20000104 	.word	0x20000104
 80007e0:	2000011c 	.word	0x2000011c
 80007e4:	20000108 	.word	0x20000108
 80007e8:	20000120 	.word	0x20000120
 80007ec:	2000010c 	.word	0x2000010c
 80007f0:	20000124 	.word	0x20000124
 80007f4:	20000110 	.word	0x20000110
 80007f8:	20000128 	.word	0x20000128
 80007fc:	20000114 	.word	0x20000114

08000800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000806:	4b15      	ldr	r3, [pc, #84]	; (800085c <HAL_MspInit+0x5c>)
 8000808:	699b      	ldr	r3, [r3, #24]
 800080a:	4a14      	ldr	r2, [pc, #80]	; (800085c <HAL_MspInit+0x5c>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6193      	str	r3, [r2, #24]
 8000812:	4b12      	ldr	r3, [pc, #72]	; (800085c <HAL_MspInit+0x5c>)
 8000814:	699b      	ldr	r3, [r3, #24]
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081e:	4b0f      	ldr	r3, [pc, #60]	; (800085c <HAL_MspInit+0x5c>)
 8000820:	69db      	ldr	r3, [r3, #28]
 8000822:	4a0e      	ldr	r2, [pc, #56]	; (800085c <HAL_MspInit+0x5c>)
 8000824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000828:	61d3      	str	r3, [r2, #28]
 800082a:	4b0c      	ldr	r3, [pc, #48]	; (800085c <HAL_MspInit+0x5c>)
 800082c:	69db      	ldr	r3, [r3, #28]
 800082e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000836:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <HAL_MspInit+0x60>)
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	4a04      	ldr	r2, [pc, #16]	; (8000860 <HAL_MspInit+0x60>)
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000852:	bf00      	nop
 8000854:	3714      	adds	r7, #20
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr
 800085c:	40021000 	.word	0x40021000
 8000860:	40010000 	.word	0x40010000

08000864 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000874:	d113      	bne.n	800089e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000876:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <HAL_TIM_Base_MspInit+0x44>)
 8000878:	69db      	ldr	r3, [r3, #28]
 800087a:	4a0b      	ldr	r2, [pc, #44]	; (80008a8 <HAL_TIM_Base_MspInit+0x44>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	61d3      	str	r3, [r2, #28]
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <HAL_TIM_Base_MspInit+0x44>)
 8000884:	69db      	ldr	r3, [r3, #28]
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2100      	movs	r1, #0
 8000892:	201c      	movs	r0, #28
 8000894:	f000 fab9 	bl	8000e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000898:	201c      	movs	r0, #28
 800089a:	f000 fad2 	bl	8000e42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800089e:	bf00      	nop
 80008a0:	3710      	adds	r7, #16
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40021000 	.word	0x40021000

080008ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b088      	sub	sp, #32
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	f107 0310 	add.w	r3, r7, #16
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a1f      	ldr	r2, [pc, #124]	; (8000944 <HAL_UART_MspInit+0x98>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d137      	bne.n	800093c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008cc:	4b1e      	ldr	r3, [pc, #120]	; (8000948 <HAL_UART_MspInit+0x9c>)
 80008ce:	69db      	ldr	r3, [r3, #28]
 80008d0:	4a1d      	ldr	r2, [pc, #116]	; (8000948 <HAL_UART_MspInit+0x9c>)
 80008d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d6:	61d3      	str	r3, [r2, #28]
 80008d8:	4b1b      	ldr	r3, [pc, #108]	; (8000948 <HAL_UART_MspInit+0x9c>)
 80008da:	69db      	ldr	r3, [r3, #28]
 80008dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e4:	4b18      	ldr	r3, [pc, #96]	; (8000948 <HAL_UART_MspInit+0x9c>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	4a17      	ldr	r2, [pc, #92]	; (8000948 <HAL_UART_MspInit+0x9c>)
 80008ea:	f043 0304 	orr.w	r3, r3, #4
 80008ee:	6193      	str	r3, [r2, #24]
 80008f0:	4b15      	ldr	r3, [pc, #84]	; (8000948 <HAL_UART_MspInit+0x9c>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	f003 0304 	and.w	r3, r3, #4
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008fc:	2304      	movs	r3, #4
 80008fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000900:	2302      	movs	r3, #2
 8000902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000904:	2303      	movs	r3, #3
 8000906:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000908:	f107 0310 	add.w	r3, r7, #16
 800090c:	4619      	mov	r1, r3
 800090e:	480f      	ldr	r0, [pc, #60]	; (800094c <HAL_UART_MspInit+0xa0>)
 8000910:	f000 fb64 	bl	8000fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000914:	2308      	movs	r3, #8
 8000916:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000920:	f107 0310 	add.w	r3, r7, #16
 8000924:	4619      	mov	r1, r3
 8000926:	4809      	ldr	r0, [pc, #36]	; (800094c <HAL_UART_MspInit+0xa0>)
 8000928:	f000 fb58 	bl	8000fdc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800092c:	2200      	movs	r2, #0
 800092e:	2100      	movs	r1, #0
 8000930:	2026      	movs	r0, #38	; 0x26
 8000932:	f000 fa6a 	bl	8000e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000936:	2026      	movs	r0, #38	; 0x26
 8000938:	f000 fa83 	bl	8000e42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800093c:	bf00      	nop
 800093e:	3720      	adds	r7, #32
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40004400 	.word	0x40004400
 8000948:	40021000 	.word	0x40021000
 800094c:	40010800 	.word	0x40010800

08000950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <NMI_Handler+0x4>

08000956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <HardFault_Handler+0x4>

0800095c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <MemManage_Handler+0x4>

08000962 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000966:	e7fe      	b.n	8000966 <BusFault_Handler+0x4>

08000968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800096c:	e7fe      	b.n	800096c <UsageFault_Handler+0x4>

0800096e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	bc80      	pop	{r7}
 8000978:	4770      	bx	lr

0800097a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	46bd      	mov	sp, r7
 8000982:	bc80      	pop	{r7}
 8000984:	4770      	bx	lr

08000986 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	46bd      	mov	sp, r7
 800098e:	bc80      	pop	{r7}
 8000990:	4770      	bx	lr

08000992 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000996:	f000 f945 	bl	8000c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
	...

080009a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009a4:	4802      	ldr	r0, [pc, #8]	; (80009b0 <TIM2_IRQHandler+0x10>)
 80009a6:	f001 f96d 	bl	8001c84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000138 	.word	0x20000138

080009b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009b8:	4802      	ldr	r0, [pc, #8]	; (80009c4 <USART2_IRQHandler+0x10>)
 80009ba:	f001 fd83 	bl	80024c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000180 	.word	0x20000180

080009c8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]
 80009d8:	e00a      	b.n	80009f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009da:	f3af 8000 	nop.w
 80009de:	4601      	mov	r1, r0
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	1c5a      	adds	r2, r3, #1
 80009e4:	60ba      	str	r2, [r7, #8]
 80009e6:	b2ca      	uxtb	r2, r1
 80009e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	3301      	adds	r3, #1
 80009ee:	617b      	str	r3, [r7, #20]
 80009f0:	697a      	ldr	r2, [r7, #20]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	dbf0      	blt.n	80009da <_read+0x12>
	}

return len;
 80009f8:	687b      	ldr	r3, [r7, #4]
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3718      	adds	r7, #24
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000a02:	b480      	push	{r7}
 8000a04:	b083      	sub	sp, #12
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
	return -1;
 8000a0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr

08000a18 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a28:	605a      	str	r2, [r3, #4]
	return 0;
 8000a2a:	2300      	movs	r3, #0
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bc80      	pop	{r7}
 8000a34:	4770      	bx	lr

08000a36 <_isatty>:

int _isatty(int file)
{
 8000a36:	b480      	push	{r7}
 8000a38:	b083      	sub	sp, #12
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
	return 1;
 8000a3e:	2301      	movs	r3, #1
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bc80      	pop	{r7}
 8000a48:	4770      	bx	lr

08000a4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b085      	sub	sp, #20
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	60f8      	str	r0, [r7, #12]
 8000a52:	60b9      	str	r1, [r7, #8]
 8000a54:	607a      	str	r2, [r7, #4]
	return 0;
 8000a56:	2300      	movs	r3, #0
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3714      	adds	r7, #20
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bc80      	pop	{r7}
 8000a60:	4770      	bx	lr
	...

08000a64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a6c:	4a14      	ldr	r2, [pc, #80]	; (8000ac0 <_sbrk+0x5c>)
 8000a6e:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <_sbrk+0x60>)
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a78:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <_sbrk+0x64>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d102      	bne.n	8000a86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a80:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <_sbrk+0x64>)
 8000a82:	4a12      	ldr	r2, [pc, #72]	; (8000acc <_sbrk+0x68>)
 8000a84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a86:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <_sbrk+0x64>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d207      	bcs.n	8000aa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a94:	f002 fa66 	bl	8002f64 <__errno>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	220c      	movs	r2, #12
 8000a9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa2:	e009      	b.n	8000ab8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aa4:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <_sbrk+0x64>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aaa:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <_sbrk+0x64>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	4a05      	ldr	r2, [pc, #20]	; (8000ac8 <_sbrk+0x64>)
 8000ab4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3718      	adds	r7, #24
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20002800 	.word	0x20002800
 8000ac4:	00000400 	.word	0x00000400
 8000ac8:	2000012c 	.word	0x2000012c
 8000acc:	200001e0 	.word	0x200001e0

08000ad0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr

08000adc <HAL_TIM_PeriodElapsedCallback>:
#include "main.h"
#include "input_processing.h"
#include "input_reading.h"
#include "software_timer.h"
#include "button.h"
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim ) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000aec:	d105      	bne.n	8000afa <HAL_TIM_PeriodElapsedCallback+0x1e>
		button_reading();
 8000aee:	f7ff fb87 	bl	8000200 <button_reading>
		timerRun();
 8000af2:	f7ff fe1b 	bl	800072c <timerRun>
		getKeyInput();
 8000af6:	f7ff fb35 	bl	8000164 <getKeyInput>
	}
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
	...

08000b04 <traffic_init>:
#include "input_processing.h"
#include "global.h"
#include "led7seg.h"
#include "software_timer.h"

void traffic_init() {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	light_time = man_green_time;
 8000b08:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <traffic_init+0x34>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a0b      	ldr	r2, [pc, #44]	; (8000b3c <traffic_init+0x38>)
 8000b0e:	6013      	str	r3, [r2, #0]
	light_time1 = man_red_time;
 8000b10:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <traffic_init+0x3c>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a0b      	ldr	r2, [pc, #44]	; (8000b44 <traffic_init+0x40>)
 8000b16:	6013      	str	r3, [r2, #0]
	led_init();
 8000b18:	f7ff fc18 	bl	800034c <led_init>
	HAL_GPIO_WritePin(GPIOB, D1_Pin, 0); // On ROAD 1, turn on the RED light. 
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b22:	4809      	ldr	r0, [pc, #36]	; (8000b48 <traffic_init+0x44>)
 8000b24:	f000 fbeb 	bl	80012fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D6_Pin, 0); // On ROAD 2, turn on the GREEN light. 
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b2e:	4806      	ldr	r0, [pc, #24]	; (8000b48 <traffic_init+0x44>)
 8000b30:	f000 fbe5 	bl	80012fe <HAL_GPIO_WritePin>
}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000018 	.word	0x20000018
 8000b3c:	2000001c 	.word	0x2000001c
 8000b40:	20000014 	.word	0x20000014
 8000b44:	20000020 	.word	0x20000020
 8000b48:	40010c00 	.word	0x40010c00

08000b4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b4c:	f7ff ffc0 	bl	8000ad0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b50:	480b      	ldr	r0, [pc, #44]	; (8000b80 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b52:	490c      	ldr	r1, [pc, #48]	; (8000b84 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b54:	4a0c      	ldr	r2, [pc, #48]	; (8000b88 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b58:	e002      	b.n	8000b60 <LoopCopyDataInit>

08000b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b5e:	3304      	adds	r3, #4

08000b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b64:	d3f9      	bcc.n	8000b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b66:	4a09      	ldr	r2, [pc, #36]	; (8000b8c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b68:	4c09      	ldr	r4, [pc, #36]	; (8000b90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b6c:	e001      	b.n	8000b72 <LoopFillZerobss>

08000b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b70:	3204      	adds	r2, #4

08000b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b74:	d3fb      	bcc.n	8000b6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b76:	f002 f9fb 	bl	8002f70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b7a:	f7ff fbf3 	bl	8000364 <main>
  bx lr
 8000b7e:	4770      	bx	lr
  ldr r0, =_sdata
 8000b80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b84:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8000b88:	08003a28 	.word	0x08003a28
  ldr r2, =_sbss
 8000b8c:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8000b90:	200001dc 	.word	0x200001dc

08000b94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b94:	e7fe      	b.n	8000b94 <ADC1_2_IRQHandler>
	...

08000b98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b9c:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <HAL_Init+0x28>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a07      	ldr	r2, [pc, #28]	; (8000bc0 <HAL_Init+0x28>)
 8000ba2:	f043 0310 	orr.w	r3, r3, #16
 8000ba6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba8:	2003      	movs	r0, #3
 8000baa:	f000 f923 	bl	8000df4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bae:	200f      	movs	r0, #15
 8000bb0:	f000 f808 	bl	8000bc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bb4:	f7ff fe24 	bl	8000800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40022000 	.word	0x40022000

08000bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <HAL_InitTick+0x54>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <HAL_InitTick+0x58>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 f93b 	bl	8000e5e <HAL_SYSTICK_Config>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e00e      	b.n	8000c10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2b0f      	cmp	r3, #15
 8000bf6:	d80a      	bhi.n	8000c0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	6879      	ldr	r1, [r7, #4]
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	f000 f903 	bl	8000e0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c04:	4a06      	ldr	r2, [pc, #24]	; (8000c20 <HAL_InitTick+0x5c>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e000      	b.n	8000c10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000040 	.word	0x20000040
 8000c1c:	20000048 	.word	0x20000048
 8000c20:	20000044 	.word	0x20000044

08000c24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c28:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <HAL_IncTick+0x1c>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <HAL_IncTick+0x20>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4413      	add	r3, r2
 8000c34:	4a03      	ldr	r2, [pc, #12]	; (8000c44 <HAL_IncTick+0x20>)
 8000c36:	6013      	str	r3, [r2, #0]
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr
 8000c40:	20000048 	.word	0x20000048
 8000c44:	200001c8 	.word	0x200001c8

08000c48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c4c:	4b02      	ldr	r3, [pc, #8]	; (8000c58 <HAL_GetTick+0x10>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc80      	pop	{r7}
 8000c56:	4770      	bx	lr
 8000c58:	200001c8 	.word	0x200001c8

08000c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c72:	68ba      	ldr	r2, [r7, #8]
 8000c74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c78:	4013      	ands	r3, r2
 8000c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c8e:	4a04      	ldr	r2, [pc, #16]	; (8000ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	60d3      	str	r3, [r2, #12]
}
 8000c94:	bf00      	nop
 8000c96:	3714      	adds	r7, #20
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bc80      	pop	{r7}
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca8:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <__NVIC_GetPriorityGrouping+0x18>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	0a1b      	lsrs	r3, r3, #8
 8000cae:	f003 0307 	and.w	r3, r3, #7
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	db0b      	blt.n	8000cea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	f003 021f 	and.w	r2, r3, #31
 8000cd8:	4906      	ldr	r1, [pc, #24]	; (8000cf4 <__NVIC_EnableIRQ+0x34>)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	095b      	lsrs	r3, r3, #5
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr
 8000cf4:	e000e100 	.word	0xe000e100

08000cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	6039      	str	r1, [r7, #0]
 8000d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	db0a      	blt.n	8000d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	490c      	ldr	r1, [pc, #48]	; (8000d44 <__NVIC_SetPriority+0x4c>)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	0112      	lsls	r2, r2, #4
 8000d18:	b2d2      	uxtb	r2, r2
 8000d1a:	440b      	add	r3, r1
 8000d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d20:	e00a      	b.n	8000d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	4908      	ldr	r1, [pc, #32]	; (8000d48 <__NVIC_SetPriority+0x50>)
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	f003 030f 	and.w	r3, r3, #15
 8000d2e:	3b04      	subs	r3, #4
 8000d30:	0112      	lsls	r2, r2, #4
 8000d32:	b2d2      	uxtb	r2, r2
 8000d34:	440b      	add	r3, r1
 8000d36:	761a      	strb	r2, [r3, #24]
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000e100 	.word	0xe000e100
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b089      	sub	sp, #36	; 0x24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	f1c3 0307 	rsb	r3, r3, #7
 8000d66:	2b04      	cmp	r3, #4
 8000d68:	bf28      	it	cs
 8000d6a:	2304      	movcs	r3, #4
 8000d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3304      	adds	r3, #4
 8000d72:	2b06      	cmp	r3, #6
 8000d74:	d902      	bls.n	8000d7c <NVIC_EncodePriority+0x30>
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3b03      	subs	r3, #3
 8000d7a:	e000      	b.n	8000d7e <NVIC_EncodePriority+0x32>
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d80:	f04f 32ff 	mov.w	r2, #4294967295
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43da      	mvns	r2, r3
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	401a      	ands	r2, r3
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d94:	f04f 31ff 	mov.w	r1, #4294967295
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9e:	43d9      	mvns	r1, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da4:	4313      	orrs	r3, r2
         );
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3724      	adds	r7, #36	; 0x24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr

08000db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dc0:	d301      	bcc.n	8000dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e00f      	b.n	8000de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <SysTick_Config+0x40>)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dce:	210f      	movs	r1, #15
 8000dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd4:	f7ff ff90 	bl	8000cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <SysTick_Config+0x40>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dde:	4b04      	ldr	r3, [pc, #16]	; (8000df0 <SysTick_Config+0x40>)
 8000de0:	2207      	movs	r2, #7
 8000de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	e000e010 	.word	0xe000e010

08000df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f7ff ff2d 	bl	8000c5c <__NVIC_SetPriorityGrouping>
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b086      	sub	sp, #24
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	4603      	mov	r3, r0
 8000e12:	60b9      	str	r1, [r7, #8]
 8000e14:	607a      	str	r2, [r7, #4]
 8000e16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e1c:	f7ff ff42 	bl	8000ca4 <__NVIC_GetPriorityGrouping>
 8000e20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	68b9      	ldr	r1, [r7, #8]
 8000e26:	6978      	ldr	r0, [r7, #20]
 8000e28:	f7ff ff90 	bl	8000d4c <NVIC_EncodePriority>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e32:	4611      	mov	r1, r2
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff5f 	bl	8000cf8 <__NVIC_SetPriority>
}
 8000e3a:	bf00      	nop
 8000e3c:	3718      	adds	r7, #24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	4603      	mov	r3, r0
 8000e4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff35 	bl	8000cc0 <__NVIC_EnableIRQ>
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff ffa2 	bl	8000db0 <SysTick_Config>
 8000e6c:	4603      	mov	r3, r0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e76:	b480      	push	{r7}
 8000e78:	b085      	sub	sp, #20
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d008      	beq.n	8000ea0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2204      	movs	r2, #4
 8000e92:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2200      	movs	r2, #0
 8000e98:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e020      	b.n	8000ee2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f022 020e 	bic.w	r2, r2, #14
 8000eae:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f022 0201 	bic.w	r2, r2, #1
 8000ebe:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ec8:	2101      	movs	r1, #1
 8000eca:	fa01 f202 	lsl.w	r2, r1, r2
 8000ece:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3714      	adds	r7, #20
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr

08000eec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d005      	beq.n	8000f10 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2204      	movs	r2, #4
 8000f08:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	73fb      	strb	r3, [r7, #15]
 8000f0e:	e051      	b.n	8000fb4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f022 020e 	bic.w	r2, r2, #14
 8000f1e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f022 0201 	bic.w	r2, r2, #1
 8000f2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a22      	ldr	r2, [pc, #136]	; (8000fc0 <HAL_DMA_Abort_IT+0xd4>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d029      	beq.n	8000f8e <HAL_DMA_Abort_IT+0xa2>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a21      	ldr	r2, [pc, #132]	; (8000fc4 <HAL_DMA_Abort_IT+0xd8>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d022      	beq.n	8000f8a <HAL_DMA_Abort_IT+0x9e>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a1f      	ldr	r2, [pc, #124]	; (8000fc8 <HAL_DMA_Abort_IT+0xdc>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d01a      	beq.n	8000f84 <HAL_DMA_Abort_IT+0x98>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a1e      	ldr	r2, [pc, #120]	; (8000fcc <HAL_DMA_Abort_IT+0xe0>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d012      	beq.n	8000f7e <HAL_DMA_Abort_IT+0x92>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a1c      	ldr	r2, [pc, #112]	; (8000fd0 <HAL_DMA_Abort_IT+0xe4>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d00a      	beq.n	8000f78 <HAL_DMA_Abort_IT+0x8c>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a1b      	ldr	r2, [pc, #108]	; (8000fd4 <HAL_DMA_Abort_IT+0xe8>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d102      	bne.n	8000f72 <HAL_DMA_Abort_IT+0x86>
 8000f6c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f70:	e00e      	b.n	8000f90 <HAL_DMA_Abort_IT+0xa4>
 8000f72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f76:	e00b      	b.n	8000f90 <HAL_DMA_Abort_IT+0xa4>
 8000f78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f7c:	e008      	b.n	8000f90 <HAL_DMA_Abort_IT+0xa4>
 8000f7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f82:	e005      	b.n	8000f90 <HAL_DMA_Abort_IT+0xa4>
 8000f84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f88:	e002      	b.n	8000f90 <HAL_DMA_Abort_IT+0xa4>
 8000f8a:	2310      	movs	r3, #16
 8000f8c:	e000      	b.n	8000f90 <HAL_DMA_Abort_IT+0xa4>
 8000f8e:	2301      	movs	r3, #1
 8000f90:	4a11      	ldr	r2, [pc, #68]	; (8000fd8 <HAL_DMA_Abort_IT+0xec>)
 8000f92:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2201      	movs	r2, #1
 8000f98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d003      	beq.n	8000fb4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	4798      	blx	r3
    } 
  }
  return status;
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40020008 	.word	0x40020008
 8000fc4:	4002001c 	.word	0x4002001c
 8000fc8:	40020030 	.word	0x40020030
 8000fcc:	40020044 	.word	0x40020044
 8000fd0:	40020058 	.word	0x40020058
 8000fd4:	4002006c 	.word	0x4002006c
 8000fd8:	40020000 	.word	0x40020000

08000fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b08b      	sub	sp, #44	; 0x2c
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fea:	2300      	movs	r3, #0
 8000fec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fee:	e148      	b.n	8001282 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	69fa      	ldr	r2, [r7, #28]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	429a      	cmp	r2, r3
 800100a:	f040 8137 	bne.w	800127c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	4aa3      	ldr	r2, [pc, #652]	; (80012a0 <HAL_GPIO_Init+0x2c4>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d05e      	beq.n	80010d6 <HAL_GPIO_Init+0xfa>
 8001018:	4aa1      	ldr	r2, [pc, #644]	; (80012a0 <HAL_GPIO_Init+0x2c4>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d875      	bhi.n	800110a <HAL_GPIO_Init+0x12e>
 800101e:	4aa1      	ldr	r2, [pc, #644]	; (80012a4 <HAL_GPIO_Init+0x2c8>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d058      	beq.n	80010d6 <HAL_GPIO_Init+0xfa>
 8001024:	4a9f      	ldr	r2, [pc, #636]	; (80012a4 <HAL_GPIO_Init+0x2c8>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d86f      	bhi.n	800110a <HAL_GPIO_Init+0x12e>
 800102a:	4a9f      	ldr	r2, [pc, #636]	; (80012a8 <HAL_GPIO_Init+0x2cc>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d052      	beq.n	80010d6 <HAL_GPIO_Init+0xfa>
 8001030:	4a9d      	ldr	r2, [pc, #628]	; (80012a8 <HAL_GPIO_Init+0x2cc>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d869      	bhi.n	800110a <HAL_GPIO_Init+0x12e>
 8001036:	4a9d      	ldr	r2, [pc, #628]	; (80012ac <HAL_GPIO_Init+0x2d0>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d04c      	beq.n	80010d6 <HAL_GPIO_Init+0xfa>
 800103c:	4a9b      	ldr	r2, [pc, #620]	; (80012ac <HAL_GPIO_Init+0x2d0>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d863      	bhi.n	800110a <HAL_GPIO_Init+0x12e>
 8001042:	4a9b      	ldr	r2, [pc, #620]	; (80012b0 <HAL_GPIO_Init+0x2d4>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d046      	beq.n	80010d6 <HAL_GPIO_Init+0xfa>
 8001048:	4a99      	ldr	r2, [pc, #612]	; (80012b0 <HAL_GPIO_Init+0x2d4>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d85d      	bhi.n	800110a <HAL_GPIO_Init+0x12e>
 800104e:	2b12      	cmp	r3, #18
 8001050:	d82a      	bhi.n	80010a8 <HAL_GPIO_Init+0xcc>
 8001052:	2b12      	cmp	r3, #18
 8001054:	d859      	bhi.n	800110a <HAL_GPIO_Init+0x12e>
 8001056:	a201      	add	r2, pc, #4	; (adr r2, 800105c <HAL_GPIO_Init+0x80>)
 8001058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800105c:	080010d7 	.word	0x080010d7
 8001060:	080010b1 	.word	0x080010b1
 8001064:	080010c3 	.word	0x080010c3
 8001068:	08001105 	.word	0x08001105
 800106c:	0800110b 	.word	0x0800110b
 8001070:	0800110b 	.word	0x0800110b
 8001074:	0800110b 	.word	0x0800110b
 8001078:	0800110b 	.word	0x0800110b
 800107c:	0800110b 	.word	0x0800110b
 8001080:	0800110b 	.word	0x0800110b
 8001084:	0800110b 	.word	0x0800110b
 8001088:	0800110b 	.word	0x0800110b
 800108c:	0800110b 	.word	0x0800110b
 8001090:	0800110b 	.word	0x0800110b
 8001094:	0800110b 	.word	0x0800110b
 8001098:	0800110b 	.word	0x0800110b
 800109c:	0800110b 	.word	0x0800110b
 80010a0:	080010b9 	.word	0x080010b9
 80010a4:	080010cd 	.word	0x080010cd
 80010a8:	4a82      	ldr	r2, [pc, #520]	; (80012b4 <HAL_GPIO_Init+0x2d8>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d013      	beq.n	80010d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010ae:	e02c      	b.n	800110a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	623b      	str	r3, [r7, #32]
          break;
 80010b6:	e029      	b.n	800110c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	3304      	adds	r3, #4
 80010be:	623b      	str	r3, [r7, #32]
          break;
 80010c0:	e024      	b.n	800110c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	3308      	adds	r3, #8
 80010c8:	623b      	str	r3, [r7, #32]
          break;
 80010ca:	e01f      	b.n	800110c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	330c      	adds	r3, #12
 80010d2:	623b      	str	r3, [r7, #32]
          break;
 80010d4:	e01a      	b.n	800110c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d102      	bne.n	80010e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010de:	2304      	movs	r3, #4
 80010e0:	623b      	str	r3, [r7, #32]
          break;
 80010e2:	e013      	b.n	800110c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d105      	bne.n	80010f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010ec:	2308      	movs	r3, #8
 80010ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	69fa      	ldr	r2, [r7, #28]
 80010f4:	611a      	str	r2, [r3, #16]
          break;
 80010f6:	e009      	b.n	800110c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010f8:	2308      	movs	r3, #8
 80010fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	69fa      	ldr	r2, [r7, #28]
 8001100:	615a      	str	r2, [r3, #20]
          break;
 8001102:	e003      	b.n	800110c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001104:	2300      	movs	r3, #0
 8001106:	623b      	str	r3, [r7, #32]
          break;
 8001108:	e000      	b.n	800110c <HAL_GPIO_Init+0x130>
          break;
 800110a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	2bff      	cmp	r3, #255	; 0xff
 8001110:	d801      	bhi.n	8001116 <HAL_GPIO_Init+0x13a>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	e001      	b.n	800111a <HAL_GPIO_Init+0x13e>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3304      	adds	r3, #4
 800111a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	2bff      	cmp	r3, #255	; 0xff
 8001120:	d802      	bhi.n	8001128 <HAL_GPIO_Init+0x14c>
 8001122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	e002      	b.n	800112e <HAL_GPIO_Init+0x152>
 8001128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112a:	3b08      	subs	r3, #8
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	210f      	movs	r1, #15
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	fa01 f303 	lsl.w	r3, r1, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	401a      	ands	r2, r3
 8001140:	6a39      	ldr	r1, [r7, #32]
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	fa01 f303 	lsl.w	r3, r1, r3
 8001148:	431a      	orrs	r2, r3
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001156:	2b00      	cmp	r3, #0
 8001158:	f000 8090 	beq.w	800127c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800115c:	4b56      	ldr	r3, [pc, #344]	; (80012b8 <HAL_GPIO_Init+0x2dc>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	4a55      	ldr	r2, [pc, #340]	; (80012b8 <HAL_GPIO_Init+0x2dc>)
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	6193      	str	r3, [r2, #24]
 8001168:	4b53      	ldr	r3, [pc, #332]	; (80012b8 <HAL_GPIO_Init+0x2dc>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001174:	4a51      	ldr	r2, [pc, #324]	; (80012bc <HAL_GPIO_Init+0x2e0>)
 8001176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001178:	089b      	lsrs	r3, r3, #2
 800117a:	3302      	adds	r3, #2
 800117c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001180:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001184:	f003 0303 	and.w	r3, r3, #3
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	220f      	movs	r2, #15
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	4013      	ands	r3, r2
 8001196:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4a49      	ldr	r2, [pc, #292]	; (80012c0 <HAL_GPIO_Init+0x2e4>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d00d      	beq.n	80011bc <HAL_GPIO_Init+0x1e0>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a48      	ldr	r2, [pc, #288]	; (80012c4 <HAL_GPIO_Init+0x2e8>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d007      	beq.n	80011b8 <HAL_GPIO_Init+0x1dc>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4a47      	ldr	r2, [pc, #284]	; (80012c8 <HAL_GPIO_Init+0x2ec>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d101      	bne.n	80011b4 <HAL_GPIO_Init+0x1d8>
 80011b0:	2302      	movs	r3, #2
 80011b2:	e004      	b.n	80011be <HAL_GPIO_Init+0x1e2>
 80011b4:	2303      	movs	r3, #3
 80011b6:	e002      	b.n	80011be <HAL_GPIO_Init+0x1e2>
 80011b8:	2301      	movs	r3, #1
 80011ba:	e000      	b.n	80011be <HAL_GPIO_Init+0x1e2>
 80011bc:	2300      	movs	r3, #0
 80011be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011c0:	f002 0203 	and.w	r2, r2, #3
 80011c4:	0092      	lsls	r2, r2, #2
 80011c6:	4093      	lsls	r3, r2
 80011c8:	68fa      	ldr	r2, [r7, #12]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011ce:	493b      	ldr	r1, [pc, #236]	; (80012bc <HAL_GPIO_Init+0x2e0>)
 80011d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d2:	089b      	lsrs	r3, r3, #2
 80011d4:	3302      	adds	r3, #2
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d006      	beq.n	80011f6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011e8:	4b38      	ldr	r3, [pc, #224]	; (80012cc <HAL_GPIO_Init+0x2f0>)
 80011ea:	689a      	ldr	r2, [r3, #8]
 80011ec:	4937      	ldr	r1, [pc, #220]	; (80012cc <HAL_GPIO_Init+0x2f0>)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	608b      	str	r3, [r1, #8]
 80011f4:	e006      	b.n	8001204 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011f6:	4b35      	ldr	r3, [pc, #212]	; (80012cc <HAL_GPIO_Init+0x2f0>)
 80011f8:	689a      	ldr	r2, [r3, #8]
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	4933      	ldr	r1, [pc, #204]	; (80012cc <HAL_GPIO_Init+0x2f0>)
 8001200:	4013      	ands	r3, r2
 8001202:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d006      	beq.n	800121e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001210:	4b2e      	ldr	r3, [pc, #184]	; (80012cc <HAL_GPIO_Init+0x2f0>)
 8001212:	68da      	ldr	r2, [r3, #12]
 8001214:	492d      	ldr	r1, [pc, #180]	; (80012cc <HAL_GPIO_Init+0x2f0>)
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	4313      	orrs	r3, r2
 800121a:	60cb      	str	r3, [r1, #12]
 800121c:	e006      	b.n	800122c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800121e:	4b2b      	ldr	r3, [pc, #172]	; (80012cc <HAL_GPIO_Init+0x2f0>)
 8001220:	68da      	ldr	r2, [r3, #12]
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	43db      	mvns	r3, r3
 8001226:	4929      	ldr	r1, [pc, #164]	; (80012cc <HAL_GPIO_Init+0x2f0>)
 8001228:	4013      	ands	r3, r2
 800122a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d006      	beq.n	8001246 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001238:	4b24      	ldr	r3, [pc, #144]	; (80012cc <HAL_GPIO_Init+0x2f0>)
 800123a:	685a      	ldr	r2, [r3, #4]
 800123c:	4923      	ldr	r1, [pc, #140]	; (80012cc <HAL_GPIO_Init+0x2f0>)
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	4313      	orrs	r3, r2
 8001242:	604b      	str	r3, [r1, #4]
 8001244:	e006      	b.n	8001254 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001246:	4b21      	ldr	r3, [pc, #132]	; (80012cc <HAL_GPIO_Init+0x2f0>)
 8001248:	685a      	ldr	r2, [r3, #4]
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	43db      	mvns	r3, r3
 800124e:	491f      	ldr	r1, [pc, #124]	; (80012cc <HAL_GPIO_Init+0x2f0>)
 8001250:	4013      	ands	r3, r2
 8001252:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d006      	beq.n	800126e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001260:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <HAL_GPIO_Init+0x2f0>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	4919      	ldr	r1, [pc, #100]	; (80012cc <HAL_GPIO_Init+0x2f0>)
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	4313      	orrs	r3, r2
 800126a:	600b      	str	r3, [r1, #0]
 800126c:	e006      	b.n	800127c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800126e:	4b17      	ldr	r3, [pc, #92]	; (80012cc <HAL_GPIO_Init+0x2f0>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	43db      	mvns	r3, r3
 8001276:	4915      	ldr	r1, [pc, #84]	; (80012cc <HAL_GPIO_Init+0x2f0>)
 8001278:	4013      	ands	r3, r2
 800127a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800127c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127e:	3301      	adds	r3, #1
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001288:	fa22 f303 	lsr.w	r3, r2, r3
 800128c:	2b00      	cmp	r3, #0
 800128e:	f47f aeaf 	bne.w	8000ff0 <HAL_GPIO_Init+0x14>
  }
}
 8001292:	bf00      	nop
 8001294:	bf00      	nop
 8001296:	372c      	adds	r7, #44	; 0x2c
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	10320000 	.word	0x10320000
 80012a4:	10310000 	.word	0x10310000
 80012a8:	10220000 	.word	0x10220000
 80012ac:	10210000 	.word	0x10210000
 80012b0:	10120000 	.word	0x10120000
 80012b4:	10110000 	.word	0x10110000
 80012b8:	40021000 	.word	0x40021000
 80012bc:	40010000 	.word	0x40010000
 80012c0:	40010800 	.word	0x40010800
 80012c4:	40010c00 	.word	0x40010c00
 80012c8:	40011000 	.word	0x40011000
 80012cc:	40010400 	.word	0x40010400

080012d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689a      	ldr	r2, [r3, #8]
 80012e0:	887b      	ldrh	r3, [r7, #2]
 80012e2:	4013      	ands	r3, r2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d002      	beq.n	80012ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012e8:	2301      	movs	r3, #1
 80012ea:	73fb      	strb	r3, [r7, #15]
 80012ec:	e001      	b.n	80012f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012ee:	2300      	movs	r3, #0
 80012f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr

080012fe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	460b      	mov	r3, r1
 8001308:	807b      	strh	r3, [r7, #2]
 800130a:	4613      	mov	r3, r2
 800130c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800130e:	787b      	ldrb	r3, [r7, #1]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d003      	beq.n	800131c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001314:	887a      	ldrh	r2, [r7, #2]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800131a:	e003      	b.n	8001324 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800131c:	887b      	ldrh	r3, [r7, #2]
 800131e:	041a      	lsls	r2, r3, #16
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	611a      	str	r2, [r3, #16]
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr
	...

08001330 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d101      	bne.n	8001342 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e26c      	b.n	800181c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	2b00      	cmp	r3, #0
 800134c:	f000 8087 	beq.w	800145e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001350:	4b92      	ldr	r3, [pc, #584]	; (800159c <HAL_RCC_OscConfig+0x26c>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 030c 	and.w	r3, r3, #12
 8001358:	2b04      	cmp	r3, #4
 800135a:	d00c      	beq.n	8001376 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800135c:	4b8f      	ldr	r3, [pc, #572]	; (800159c <HAL_RCC_OscConfig+0x26c>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 030c 	and.w	r3, r3, #12
 8001364:	2b08      	cmp	r3, #8
 8001366:	d112      	bne.n	800138e <HAL_RCC_OscConfig+0x5e>
 8001368:	4b8c      	ldr	r3, [pc, #560]	; (800159c <HAL_RCC_OscConfig+0x26c>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001374:	d10b      	bne.n	800138e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001376:	4b89      	ldr	r3, [pc, #548]	; (800159c <HAL_RCC_OscConfig+0x26c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d06c      	beq.n	800145c <HAL_RCC_OscConfig+0x12c>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d168      	bne.n	800145c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e246      	b.n	800181c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001396:	d106      	bne.n	80013a6 <HAL_RCC_OscConfig+0x76>
 8001398:	4b80      	ldr	r3, [pc, #512]	; (800159c <HAL_RCC_OscConfig+0x26c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a7f      	ldr	r2, [pc, #508]	; (800159c <HAL_RCC_OscConfig+0x26c>)
 800139e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013a2:	6013      	str	r3, [r2, #0]
 80013a4:	e02e      	b.n	8001404 <HAL_RCC_OscConfig+0xd4>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d10c      	bne.n	80013c8 <HAL_RCC_OscConfig+0x98>
 80013ae:	4b7b      	ldr	r3, [pc, #492]	; (800159c <HAL_RCC_OscConfig+0x26c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a7a      	ldr	r2, [pc, #488]	; (800159c <HAL_RCC_OscConfig+0x26c>)
 80013b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013b8:	6013      	str	r3, [r2, #0]
 80013ba:	4b78      	ldr	r3, [pc, #480]	; (800159c <HAL_RCC_OscConfig+0x26c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a77      	ldr	r2, [pc, #476]	; (800159c <HAL_RCC_OscConfig+0x26c>)
 80013c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	e01d      	b.n	8001404 <HAL_RCC_OscConfig+0xd4>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013d0:	d10c      	bne.n	80013ec <HAL_RCC_OscConfig+0xbc>
 80013d2:	4b72      	ldr	r3, [pc, #456]	; (800159c <HAL_RCC_OscConfig+0x26c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a71      	ldr	r2, [pc, #452]	; (800159c <HAL_RCC_OscConfig+0x26c>)
 80013d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	4b6f      	ldr	r3, [pc, #444]	; (800159c <HAL_RCC_OscConfig+0x26c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a6e      	ldr	r2, [pc, #440]	; (800159c <HAL_RCC_OscConfig+0x26c>)
 80013e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013e8:	6013      	str	r3, [r2, #0]
 80013ea:	e00b      	b.n	8001404 <HAL_RCC_OscConfig+0xd4>
 80013ec:	4b6b      	ldr	r3, [pc, #428]	; (800159c <HAL_RCC_OscConfig+0x26c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a6a      	ldr	r2, [pc, #424]	; (800159c <HAL_RCC_OscConfig+0x26c>)
 80013f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013f6:	6013      	str	r3, [r2, #0]
 80013f8:	4b68      	ldr	r3, [pc, #416]	; (800159c <HAL_RCC_OscConfig+0x26c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a67      	ldr	r2, [pc, #412]	; (800159c <HAL_RCC_OscConfig+0x26c>)
 80013fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001402:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d013      	beq.n	8001434 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140c:	f7ff fc1c 	bl	8000c48 <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001414:	f7ff fc18 	bl	8000c48 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b64      	cmp	r3, #100	; 0x64
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e1fa      	b.n	800181c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001426:	4b5d      	ldr	r3, [pc, #372]	; (800159c <HAL_RCC_OscConfig+0x26c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d0f0      	beq.n	8001414 <HAL_RCC_OscConfig+0xe4>
 8001432:	e014      	b.n	800145e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001434:	f7ff fc08 	bl	8000c48 <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800143c:	f7ff fc04 	bl	8000c48 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b64      	cmp	r3, #100	; 0x64
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e1e6      	b.n	800181c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800144e:	4b53      	ldr	r3, [pc, #332]	; (800159c <HAL_RCC_OscConfig+0x26c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1f0      	bne.n	800143c <HAL_RCC_OscConfig+0x10c>
 800145a:	e000      	b.n	800145e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800145c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d063      	beq.n	8001532 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800146a:	4b4c      	ldr	r3, [pc, #304]	; (800159c <HAL_RCC_OscConfig+0x26c>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f003 030c 	and.w	r3, r3, #12
 8001472:	2b00      	cmp	r3, #0
 8001474:	d00b      	beq.n	800148e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001476:	4b49      	ldr	r3, [pc, #292]	; (800159c <HAL_RCC_OscConfig+0x26c>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f003 030c 	and.w	r3, r3, #12
 800147e:	2b08      	cmp	r3, #8
 8001480:	d11c      	bne.n	80014bc <HAL_RCC_OscConfig+0x18c>
 8001482:	4b46      	ldr	r3, [pc, #280]	; (800159c <HAL_RCC_OscConfig+0x26c>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d116      	bne.n	80014bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800148e:	4b43      	ldr	r3, [pc, #268]	; (800159c <HAL_RCC_OscConfig+0x26c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d005      	beq.n	80014a6 <HAL_RCC_OscConfig+0x176>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d001      	beq.n	80014a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e1ba      	b.n	800181c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a6:	4b3d      	ldr	r3, [pc, #244]	; (800159c <HAL_RCC_OscConfig+0x26c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	4939      	ldr	r1, [pc, #228]	; (800159c <HAL_RCC_OscConfig+0x26c>)
 80014b6:	4313      	orrs	r3, r2
 80014b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ba:	e03a      	b.n	8001532 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	691b      	ldr	r3, [r3, #16]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d020      	beq.n	8001506 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014c4:	4b36      	ldr	r3, [pc, #216]	; (80015a0 <HAL_RCC_OscConfig+0x270>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ca:	f7ff fbbd 	bl	8000c48 <HAL_GetTick>
 80014ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d0:	e008      	b.n	80014e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014d2:	f7ff fbb9 	bl	8000c48 <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e19b      	b.n	800181c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e4:	4b2d      	ldr	r3, [pc, #180]	; (800159c <HAL_RCC_OscConfig+0x26c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d0f0      	beq.n	80014d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f0:	4b2a      	ldr	r3, [pc, #168]	; (800159c <HAL_RCC_OscConfig+0x26c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	695b      	ldr	r3, [r3, #20]
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	4927      	ldr	r1, [pc, #156]	; (800159c <HAL_RCC_OscConfig+0x26c>)
 8001500:	4313      	orrs	r3, r2
 8001502:	600b      	str	r3, [r1, #0]
 8001504:	e015      	b.n	8001532 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001506:	4b26      	ldr	r3, [pc, #152]	; (80015a0 <HAL_RCC_OscConfig+0x270>)
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150c:	f7ff fb9c 	bl	8000c48 <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001512:	e008      	b.n	8001526 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001514:	f7ff fb98 	bl	8000c48 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b02      	cmp	r3, #2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e17a      	b.n	800181c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001526:	4b1d      	ldr	r3, [pc, #116]	; (800159c <HAL_RCC_OscConfig+0x26c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1f0      	bne.n	8001514 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0308 	and.w	r3, r3, #8
 800153a:	2b00      	cmp	r3, #0
 800153c:	d03a      	beq.n	80015b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d019      	beq.n	800157a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001546:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <HAL_RCC_OscConfig+0x274>)
 8001548:	2201      	movs	r2, #1
 800154a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800154c:	f7ff fb7c 	bl	8000c48 <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001554:	f7ff fb78 	bl	8000c48 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e15a      	b.n	800181c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001566:	4b0d      	ldr	r3, [pc, #52]	; (800159c <HAL_RCC_OscConfig+0x26c>)
 8001568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d0f0      	beq.n	8001554 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001572:	2001      	movs	r0, #1
 8001574:	f000 facc 	bl	8001b10 <RCC_Delay>
 8001578:	e01c      	b.n	80015b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800157a:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <HAL_RCC_OscConfig+0x274>)
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001580:	f7ff fb62 	bl	8000c48 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001586:	e00f      	b.n	80015a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001588:	f7ff fb5e 	bl	8000c48 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d908      	bls.n	80015a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e140      	b.n	800181c <HAL_RCC_OscConfig+0x4ec>
 800159a:	bf00      	nop
 800159c:	40021000 	.word	0x40021000
 80015a0:	42420000 	.word	0x42420000
 80015a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015a8:	4b9e      	ldr	r3, [pc, #632]	; (8001824 <HAL_RCC_OscConfig+0x4f4>)
 80015aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d1e9      	bne.n	8001588 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0304 	and.w	r3, r3, #4
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f000 80a6 	beq.w	800170e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015c2:	2300      	movs	r3, #0
 80015c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015c6:	4b97      	ldr	r3, [pc, #604]	; (8001824 <HAL_RCC_OscConfig+0x4f4>)
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d10d      	bne.n	80015ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015d2:	4b94      	ldr	r3, [pc, #592]	; (8001824 <HAL_RCC_OscConfig+0x4f4>)
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	4a93      	ldr	r2, [pc, #588]	; (8001824 <HAL_RCC_OscConfig+0x4f4>)
 80015d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015dc:	61d3      	str	r3, [r2, #28]
 80015de:	4b91      	ldr	r3, [pc, #580]	; (8001824 <HAL_RCC_OscConfig+0x4f4>)
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015ea:	2301      	movs	r3, #1
 80015ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ee:	4b8e      	ldr	r3, [pc, #568]	; (8001828 <HAL_RCC_OscConfig+0x4f8>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d118      	bne.n	800162c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015fa:	4b8b      	ldr	r3, [pc, #556]	; (8001828 <HAL_RCC_OscConfig+0x4f8>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a8a      	ldr	r2, [pc, #552]	; (8001828 <HAL_RCC_OscConfig+0x4f8>)
 8001600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001604:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001606:	f7ff fb1f 	bl	8000c48 <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800160e:	f7ff fb1b 	bl	8000c48 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b64      	cmp	r3, #100	; 0x64
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e0fd      	b.n	800181c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001620:	4b81      	ldr	r3, [pc, #516]	; (8001828 <HAL_RCC_OscConfig+0x4f8>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001628:	2b00      	cmp	r3, #0
 800162a:	d0f0      	beq.n	800160e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d106      	bne.n	8001642 <HAL_RCC_OscConfig+0x312>
 8001634:	4b7b      	ldr	r3, [pc, #492]	; (8001824 <HAL_RCC_OscConfig+0x4f4>)
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	4a7a      	ldr	r2, [pc, #488]	; (8001824 <HAL_RCC_OscConfig+0x4f4>)
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	6213      	str	r3, [r2, #32]
 8001640:	e02d      	b.n	800169e <HAL_RCC_OscConfig+0x36e>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d10c      	bne.n	8001664 <HAL_RCC_OscConfig+0x334>
 800164a:	4b76      	ldr	r3, [pc, #472]	; (8001824 <HAL_RCC_OscConfig+0x4f4>)
 800164c:	6a1b      	ldr	r3, [r3, #32]
 800164e:	4a75      	ldr	r2, [pc, #468]	; (8001824 <HAL_RCC_OscConfig+0x4f4>)
 8001650:	f023 0301 	bic.w	r3, r3, #1
 8001654:	6213      	str	r3, [r2, #32]
 8001656:	4b73      	ldr	r3, [pc, #460]	; (8001824 <HAL_RCC_OscConfig+0x4f4>)
 8001658:	6a1b      	ldr	r3, [r3, #32]
 800165a:	4a72      	ldr	r2, [pc, #456]	; (8001824 <HAL_RCC_OscConfig+0x4f4>)
 800165c:	f023 0304 	bic.w	r3, r3, #4
 8001660:	6213      	str	r3, [r2, #32]
 8001662:	e01c      	b.n	800169e <HAL_RCC_OscConfig+0x36e>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	2b05      	cmp	r3, #5
 800166a:	d10c      	bne.n	8001686 <HAL_RCC_OscConfig+0x356>
 800166c:	4b6d      	ldr	r3, [pc, #436]	; (8001824 <HAL_RCC_OscConfig+0x4f4>)
 800166e:	6a1b      	ldr	r3, [r3, #32]
 8001670:	4a6c      	ldr	r2, [pc, #432]	; (8001824 <HAL_RCC_OscConfig+0x4f4>)
 8001672:	f043 0304 	orr.w	r3, r3, #4
 8001676:	6213      	str	r3, [r2, #32]
 8001678:	4b6a      	ldr	r3, [pc, #424]	; (8001824 <HAL_RCC_OscConfig+0x4f4>)
 800167a:	6a1b      	ldr	r3, [r3, #32]
 800167c:	4a69      	ldr	r2, [pc, #420]	; (8001824 <HAL_RCC_OscConfig+0x4f4>)
 800167e:	f043 0301 	orr.w	r3, r3, #1
 8001682:	6213      	str	r3, [r2, #32]
 8001684:	e00b      	b.n	800169e <HAL_RCC_OscConfig+0x36e>
 8001686:	4b67      	ldr	r3, [pc, #412]	; (8001824 <HAL_RCC_OscConfig+0x4f4>)
 8001688:	6a1b      	ldr	r3, [r3, #32]
 800168a:	4a66      	ldr	r2, [pc, #408]	; (8001824 <HAL_RCC_OscConfig+0x4f4>)
 800168c:	f023 0301 	bic.w	r3, r3, #1
 8001690:	6213      	str	r3, [r2, #32]
 8001692:	4b64      	ldr	r3, [pc, #400]	; (8001824 <HAL_RCC_OscConfig+0x4f4>)
 8001694:	6a1b      	ldr	r3, [r3, #32]
 8001696:	4a63      	ldr	r2, [pc, #396]	; (8001824 <HAL_RCC_OscConfig+0x4f4>)
 8001698:	f023 0304 	bic.w	r3, r3, #4
 800169c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d015      	beq.n	80016d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a6:	f7ff facf 	bl	8000c48 <HAL_GetTick>
 80016aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ac:	e00a      	b.n	80016c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ae:	f7ff facb 	bl	8000c48 <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016bc:	4293      	cmp	r3, r2
 80016be:	d901      	bls.n	80016c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e0ab      	b.n	800181c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c4:	4b57      	ldr	r3, [pc, #348]	; (8001824 <HAL_RCC_OscConfig+0x4f4>)
 80016c6:	6a1b      	ldr	r3, [r3, #32]
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d0ee      	beq.n	80016ae <HAL_RCC_OscConfig+0x37e>
 80016d0:	e014      	b.n	80016fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d2:	f7ff fab9 	bl	8000c48 <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016d8:	e00a      	b.n	80016f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016da:	f7ff fab5 	bl	8000c48 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e095      	b.n	800181c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016f0:	4b4c      	ldr	r3, [pc, #304]	; (8001824 <HAL_RCC_OscConfig+0x4f4>)
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d1ee      	bne.n	80016da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016fc:	7dfb      	ldrb	r3, [r7, #23]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d105      	bne.n	800170e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001702:	4b48      	ldr	r3, [pc, #288]	; (8001824 <HAL_RCC_OscConfig+0x4f4>)
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	4a47      	ldr	r2, [pc, #284]	; (8001824 <HAL_RCC_OscConfig+0x4f4>)
 8001708:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800170c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	2b00      	cmp	r3, #0
 8001714:	f000 8081 	beq.w	800181a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001718:	4b42      	ldr	r3, [pc, #264]	; (8001824 <HAL_RCC_OscConfig+0x4f4>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 030c 	and.w	r3, r3, #12
 8001720:	2b08      	cmp	r3, #8
 8001722:	d061      	beq.n	80017e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	69db      	ldr	r3, [r3, #28]
 8001728:	2b02      	cmp	r3, #2
 800172a:	d146      	bne.n	80017ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800172c:	4b3f      	ldr	r3, [pc, #252]	; (800182c <HAL_RCC_OscConfig+0x4fc>)
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001732:	f7ff fa89 	bl	8000c48 <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800173a:	f7ff fa85 	bl	8000c48 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e067      	b.n	800181c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800174c:	4b35      	ldr	r3, [pc, #212]	; (8001824 <HAL_RCC_OscConfig+0x4f4>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1f0      	bne.n	800173a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001760:	d108      	bne.n	8001774 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001762:	4b30      	ldr	r3, [pc, #192]	; (8001824 <HAL_RCC_OscConfig+0x4f4>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	492d      	ldr	r1, [pc, #180]	; (8001824 <HAL_RCC_OscConfig+0x4f4>)
 8001770:	4313      	orrs	r3, r2
 8001772:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001774:	4b2b      	ldr	r3, [pc, #172]	; (8001824 <HAL_RCC_OscConfig+0x4f4>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a19      	ldr	r1, [r3, #32]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001784:	430b      	orrs	r3, r1
 8001786:	4927      	ldr	r1, [pc, #156]	; (8001824 <HAL_RCC_OscConfig+0x4f4>)
 8001788:	4313      	orrs	r3, r2
 800178a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800178c:	4b27      	ldr	r3, [pc, #156]	; (800182c <HAL_RCC_OscConfig+0x4fc>)
 800178e:	2201      	movs	r2, #1
 8001790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001792:	f7ff fa59 	bl	8000c48 <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800179a:	f7ff fa55 	bl	8000c48 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e037      	b.n	800181c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017ac:	4b1d      	ldr	r3, [pc, #116]	; (8001824 <HAL_RCC_OscConfig+0x4f4>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0f0      	beq.n	800179a <HAL_RCC_OscConfig+0x46a>
 80017b8:	e02f      	b.n	800181a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ba:	4b1c      	ldr	r3, [pc, #112]	; (800182c <HAL_RCC_OscConfig+0x4fc>)
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c0:	f7ff fa42 	bl	8000c48 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c8:	f7ff fa3e 	bl	8000c48 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e020      	b.n	800181c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017da:	4b12      	ldr	r3, [pc, #72]	; (8001824 <HAL_RCC_OscConfig+0x4f4>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1f0      	bne.n	80017c8 <HAL_RCC_OscConfig+0x498>
 80017e6:	e018      	b.n	800181a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	69db      	ldr	r3, [r3, #28]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d101      	bne.n	80017f4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e013      	b.n	800181c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017f4:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <HAL_RCC_OscConfig+0x4f4>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a1b      	ldr	r3, [r3, #32]
 8001804:	429a      	cmp	r2, r3
 8001806:	d106      	bne.n	8001816 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001812:	429a      	cmp	r2, r3
 8001814:	d001      	beq.n	800181a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e000      	b.n	800181c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40021000 	.word	0x40021000
 8001828:	40007000 	.word	0x40007000
 800182c:	42420060 	.word	0x42420060

08001830 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d101      	bne.n	8001844 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e0d0      	b.n	80019e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001844:	4b6a      	ldr	r3, [pc, #424]	; (80019f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0307 	and.w	r3, r3, #7
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	429a      	cmp	r2, r3
 8001850:	d910      	bls.n	8001874 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001852:	4b67      	ldr	r3, [pc, #412]	; (80019f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f023 0207 	bic.w	r2, r3, #7
 800185a:	4965      	ldr	r1, [pc, #404]	; (80019f0 <HAL_RCC_ClockConfig+0x1c0>)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	4313      	orrs	r3, r2
 8001860:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001862:	4b63      	ldr	r3, [pc, #396]	; (80019f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	429a      	cmp	r2, r3
 800186e:	d001      	beq.n	8001874 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e0b8      	b.n	80019e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d020      	beq.n	80018c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	2b00      	cmp	r3, #0
 800188a:	d005      	beq.n	8001898 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800188c:	4b59      	ldr	r3, [pc, #356]	; (80019f4 <HAL_RCC_ClockConfig+0x1c4>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	4a58      	ldr	r2, [pc, #352]	; (80019f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001892:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001896:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0308 	and.w	r3, r3, #8
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d005      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018a4:	4b53      	ldr	r3, [pc, #332]	; (80019f4 <HAL_RCC_ClockConfig+0x1c4>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	4a52      	ldr	r2, [pc, #328]	; (80019f4 <HAL_RCC_ClockConfig+0x1c4>)
 80018aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018b0:	4b50      	ldr	r3, [pc, #320]	; (80019f4 <HAL_RCC_ClockConfig+0x1c4>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	494d      	ldr	r1, [pc, #308]	; (80019f4 <HAL_RCC_ClockConfig+0x1c4>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d040      	beq.n	8001950 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d107      	bne.n	80018e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d6:	4b47      	ldr	r3, [pc, #284]	; (80019f4 <HAL_RCC_ClockConfig+0x1c4>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d115      	bne.n	800190e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e07f      	b.n	80019e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d107      	bne.n	80018fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ee:	4b41      	ldr	r3, [pc, #260]	; (80019f4 <HAL_RCC_ClockConfig+0x1c4>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d109      	bne.n	800190e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e073      	b.n	80019e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018fe:	4b3d      	ldr	r3, [pc, #244]	; (80019f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e06b      	b.n	80019e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800190e:	4b39      	ldr	r3, [pc, #228]	; (80019f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f023 0203 	bic.w	r2, r3, #3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	4936      	ldr	r1, [pc, #216]	; (80019f4 <HAL_RCC_ClockConfig+0x1c4>)
 800191c:	4313      	orrs	r3, r2
 800191e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001920:	f7ff f992 	bl	8000c48 <HAL_GetTick>
 8001924:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001926:	e00a      	b.n	800193e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001928:	f7ff f98e 	bl	8000c48 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	f241 3288 	movw	r2, #5000	; 0x1388
 8001936:	4293      	cmp	r3, r2
 8001938:	d901      	bls.n	800193e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e053      	b.n	80019e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800193e:	4b2d      	ldr	r3, [pc, #180]	; (80019f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f003 020c 	and.w	r2, r3, #12
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	429a      	cmp	r2, r3
 800194e:	d1eb      	bne.n	8001928 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001950:	4b27      	ldr	r3, [pc, #156]	; (80019f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0307 	and.w	r3, r3, #7
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	429a      	cmp	r2, r3
 800195c:	d210      	bcs.n	8001980 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800195e:	4b24      	ldr	r3, [pc, #144]	; (80019f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f023 0207 	bic.w	r2, r3, #7
 8001966:	4922      	ldr	r1, [pc, #136]	; (80019f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	4313      	orrs	r3, r2
 800196c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800196e:	4b20      	ldr	r3, [pc, #128]	; (80019f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	429a      	cmp	r2, r3
 800197a:	d001      	beq.n	8001980 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e032      	b.n	80019e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0304 	and.w	r3, r3, #4
 8001988:	2b00      	cmp	r3, #0
 800198a:	d008      	beq.n	800199e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800198c:	4b19      	ldr	r3, [pc, #100]	; (80019f4 <HAL_RCC_ClockConfig+0x1c4>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	4916      	ldr	r1, [pc, #88]	; (80019f4 <HAL_RCC_ClockConfig+0x1c4>)
 800199a:	4313      	orrs	r3, r2
 800199c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0308 	and.w	r3, r3, #8
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d009      	beq.n	80019be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019aa:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <HAL_RCC_ClockConfig+0x1c4>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	490e      	ldr	r1, [pc, #56]	; (80019f4 <HAL_RCC_ClockConfig+0x1c4>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019be:	f000 f821 	bl	8001a04 <HAL_RCC_GetSysClockFreq>
 80019c2:	4602      	mov	r2, r0
 80019c4:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <HAL_RCC_ClockConfig+0x1c4>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	091b      	lsrs	r3, r3, #4
 80019ca:	f003 030f 	and.w	r3, r3, #15
 80019ce:	490a      	ldr	r1, [pc, #40]	; (80019f8 <HAL_RCC_ClockConfig+0x1c8>)
 80019d0:	5ccb      	ldrb	r3, [r1, r3]
 80019d2:	fa22 f303 	lsr.w	r3, r2, r3
 80019d6:	4a09      	ldr	r2, [pc, #36]	; (80019fc <HAL_RCC_ClockConfig+0x1cc>)
 80019d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019da:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <HAL_RCC_ClockConfig+0x1d0>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff f8f0 	bl	8000bc4 <HAL_InitTick>

  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40022000 	.word	0x40022000
 80019f4:	40021000 	.word	0x40021000
 80019f8:	08003990 	.word	0x08003990
 80019fc:	20000040 	.word	0x20000040
 8001a00:	20000044 	.word	0x20000044

08001a04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b087      	sub	sp, #28
 8001a08:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60bb      	str	r3, [r7, #8]
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
 8001a16:	2300      	movs	r3, #0
 8001a18:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a1e:	4b1e      	ldr	r3, [pc, #120]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f003 030c 	and.w	r3, r3, #12
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	d002      	beq.n	8001a34 <HAL_RCC_GetSysClockFreq+0x30>
 8001a2e:	2b08      	cmp	r3, #8
 8001a30:	d003      	beq.n	8001a3a <HAL_RCC_GetSysClockFreq+0x36>
 8001a32:	e027      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a34:	4b19      	ldr	r3, [pc, #100]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x98>)
 8001a36:	613b      	str	r3, [r7, #16]
      break;
 8001a38:	e027      	b.n	8001a8a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	0c9b      	lsrs	r3, r3, #18
 8001a3e:	f003 030f 	and.w	r3, r3, #15
 8001a42:	4a17      	ldr	r2, [pc, #92]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a44:	5cd3      	ldrb	r3, [r2, r3]
 8001a46:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d010      	beq.n	8001a74 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a52:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	0c5b      	lsrs	r3, r3, #17
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	4a11      	ldr	r2, [pc, #68]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a5e:	5cd3      	ldrb	r3, [r2, r3]
 8001a60:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a0d      	ldr	r2, [pc, #52]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x98>)
 8001a66:	fb02 f203 	mul.w	r2, r2, r3
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	e004      	b.n	8001a7e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a0c      	ldr	r2, [pc, #48]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a78:	fb02 f303 	mul.w	r3, r2, r3
 8001a7c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	613b      	str	r3, [r7, #16]
      break;
 8001a82:	e002      	b.n	8001a8a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x98>)
 8001a86:	613b      	str	r3, [r7, #16]
      break;
 8001a88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a8a:	693b      	ldr	r3, [r7, #16]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	371c      	adds	r7, #28
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc80      	pop	{r7}
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	007a1200 	.word	0x007a1200
 8001aa0:	080039a8 	.word	0x080039a8
 8001aa4:	080039b8 	.word	0x080039b8
 8001aa8:	003d0900 	.word	0x003d0900

08001aac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ab0:	4b02      	ldr	r3, [pc, #8]	; (8001abc <HAL_RCC_GetHCLKFreq+0x10>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr
 8001abc:	20000040 	.word	0x20000040

08001ac0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ac4:	f7ff fff2 	bl	8001aac <HAL_RCC_GetHCLKFreq>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	0a1b      	lsrs	r3, r3, #8
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	4903      	ldr	r1, [pc, #12]	; (8001ae4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ad6:	5ccb      	ldrb	r3, [r1, r3]
 8001ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	080039a0 	.word	0x080039a0

08001ae8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001aec:	f7ff ffde 	bl	8001aac <HAL_RCC_GetHCLKFreq>
 8001af0:	4602      	mov	r2, r0
 8001af2:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	0adb      	lsrs	r3, r3, #11
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	4903      	ldr	r1, [pc, #12]	; (8001b0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001afe:	5ccb      	ldrb	r3, [r1, r3]
 8001b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	080039a0 	.word	0x080039a0

08001b10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b18:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <RCC_Delay+0x34>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a0a      	ldr	r2, [pc, #40]	; (8001b48 <RCC_Delay+0x38>)
 8001b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b22:	0a5b      	lsrs	r3, r3, #9
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	fb02 f303 	mul.w	r3, r2, r3
 8001b2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b2c:	bf00      	nop
  }
  while (Delay --);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	1e5a      	subs	r2, r3, #1
 8001b32:	60fa      	str	r2, [r7, #12]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1f9      	bne.n	8001b2c <RCC_Delay+0x1c>
}
 8001b38:	bf00      	nop
 8001b3a:	bf00      	nop
 8001b3c:	3714      	adds	r7, #20
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr
 8001b44:	20000040 	.word	0x20000040
 8001b48:	10624dd3 	.word	0x10624dd3

08001b4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e041      	b.n	8001be2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d106      	bne.n	8001b78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7fe fe76 	bl	8000864 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3304      	adds	r3, #4
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4610      	mov	r0, r2
 8001b8c:	f000 fa6e 	bl	800206c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d001      	beq.n	8001c04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e035      	b.n	8001c70 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2202      	movs	r2, #2
 8001c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	68da      	ldr	r2, [r3, #12]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 0201 	orr.w	r2, r2, #1
 8001c1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a16      	ldr	r2, [pc, #88]	; (8001c7c <HAL_TIM_Base_Start_IT+0x90>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d009      	beq.n	8001c3a <HAL_TIM_Base_Start_IT+0x4e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c2e:	d004      	beq.n	8001c3a <HAL_TIM_Base_Start_IT+0x4e>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a12      	ldr	r2, [pc, #72]	; (8001c80 <HAL_TIM_Base_Start_IT+0x94>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d111      	bne.n	8001c5e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2b06      	cmp	r3, #6
 8001c4a:	d010      	beq.n	8001c6e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f042 0201 	orr.w	r2, r2, #1
 8001c5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c5c:	e007      	b.n	8001c6e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f042 0201 	orr.w	r2, r2, #1
 8001c6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	40012c00 	.word	0x40012c00
 8001c80:	40000400 	.word	0x40000400

08001c84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d122      	bne.n	8001ce0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d11b      	bne.n	8001ce0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f06f 0202 	mvn.w	r2, #2
 8001cb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	f003 0303 	and.w	r3, r3, #3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f9b4 	bl	8002034 <HAL_TIM_IC_CaptureCallback>
 8001ccc:	e005      	b.n	8001cda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f9a7 	bl	8002022 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 f9b6 	bl	8002046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	f003 0304 	and.w	r3, r3, #4
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	d122      	bne.n	8001d34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b04      	cmp	r3, #4
 8001cfa:	d11b      	bne.n	8001d34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f06f 0204 	mvn.w	r2, #4
 8001d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2202      	movs	r2, #2
 8001d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f98a 	bl	8002034 <HAL_TIM_IC_CaptureCallback>
 8001d20:	e005      	b.n	8001d2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f97d 	bl	8002022 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 f98c 	bl	8002046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	f003 0308 	and.w	r3, r3, #8
 8001d3e:	2b08      	cmp	r3, #8
 8001d40:	d122      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	f003 0308 	and.w	r3, r3, #8
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d11b      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f06f 0208 	mvn.w	r2, #8
 8001d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2204      	movs	r2, #4
 8001d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f960 	bl	8002034 <HAL_TIM_IC_CaptureCallback>
 8001d74:	e005      	b.n	8001d82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f953 	bl	8002022 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 f962 	bl	8002046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	f003 0310 	and.w	r3, r3, #16
 8001d92:	2b10      	cmp	r3, #16
 8001d94:	d122      	bne.n	8001ddc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	f003 0310 	and.w	r3, r3, #16
 8001da0:	2b10      	cmp	r3, #16
 8001da2:	d11b      	bne.n	8001ddc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f06f 0210 	mvn.w	r2, #16
 8001dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2208      	movs	r2, #8
 8001db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f936 	bl	8002034 <HAL_TIM_IC_CaptureCallback>
 8001dc8:	e005      	b.n	8001dd6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f929 	bl	8002022 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 f938 	bl	8002046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d10e      	bne.n	8001e08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d107      	bne.n	8001e08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f06f 0201 	mvn.w	r2, #1
 8001e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7fe fe6a 	bl	8000adc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e12:	2b80      	cmp	r3, #128	; 0x80
 8001e14:	d10e      	bne.n	8001e34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e20:	2b80      	cmp	r3, #128	; 0x80
 8001e22:	d107      	bne.n	8001e34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 fa6b 	bl	800230a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e3e:	2b40      	cmp	r3, #64	; 0x40
 8001e40:	d10e      	bne.n	8001e60 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e4c:	2b40      	cmp	r3, #64	; 0x40
 8001e4e:	d107      	bne.n	8001e60 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f8fc 	bl	8002058 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	f003 0320 	and.w	r3, r3, #32
 8001e6a:	2b20      	cmp	r3, #32
 8001e6c:	d10e      	bne.n	8001e8c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	f003 0320 	and.w	r3, r3, #32
 8001e78:	2b20      	cmp	r3, #32
 8001e7a:	d107      	bne.n	8001e8c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f06f 0220 	mvn.w	r2, #32
 8001e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 fa36 	bl	80022f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e8c:	bf00      	nop
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d101      	bne.n	8001eb0 <HAL_TIM_ConfigClockSource+0x1c>
 8001eac:	2302      	movs	r3, #2
 8001eae:	e0b4      	b.n	800201a <HAL_TIM_ConfigClockSource+0x186>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2202      	movs	r2, #2
 8001ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001ece:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ed6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68ba      	ldr	r2, [r7, #8]
 8001ede:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ee8:	d03e      	beq.n	8001f68 <HAL_TIM_ConfigClockSource+0xd4>
 8001eea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001eee:	f200 8087 	bhi.w	8002000 <HAL_TIM_ConfigClockSource+0x16c>
 8001ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ef6:	f000 8086 	beq.w	8002006 <HAL_TIM_ConfigClockSource+0x172>
 8001efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001efe:	d87f      	bhi.n	8002000 <HAL_TIM_ConfigClockSource+0x16c>
 8001f00:	2b70      	cmp	r3, #112	; 0x70
 8001f02:	d01a      	beq.n	8001f3a <HAL_TIM_ConfigClockSource+0xa6>
 8001f04:	2b70      	cmp	r3, #112	; 0x70
 8001f06:	d87b      	bhi.n	8002000 <HAL_TIM_ConfigClockSource+0x16c>
 8001f08:	2b60      	cmp	r3, #96	; 0x60
 8001f0a:	d050      	beq.n	8001fae <HAL_TIM_ConfigClockSource+0x11a>
 8001f0c:	2b60      	cmp	r3, #96	; 0x60
 8001f0e:	d877      	bhi.n	8002000 <HAL_TIM_ConfigClockSource+0x16c>
 8001f10:	2b50      	cmp	r3, #80	; 0x50
 8001f12:	d03c      	beq.n	8001f8e <HAL_TIM_ConfigClockSource+0xfa>
 8001f14:	2b50      	cmp	r3, #80	; 0x50
 8001f16:	d873      	bhi.n	8002000 <HAL_TIM_ConfigClockSource+0x16c>
 8001f18:	2b40      	cmp	r3, #64	; 0x40
 8001f1a:	d058      	beq.n	8001fce <HAL_TIM_ConfigClockSource+0x13a>
 8001f1c:	2b40      	cmp	r3, #64	; 0x40
 8001f1e:	d86f      	bhi.n	8002000 <HAL_TIM_ConfigClockSource+0x16c>
 8001f20:	2b30      	cmp	r3, #48	; 0x30
 8001f22:	d064      	beq.n	8001fee <HAL_TIM_ConfigClockSource+0x15a>
 8001f24:	2b30      	cmp	r3, #48	; 0x30
 8001f26:	d86b      	bhi.n	8002000 <HAL_TIM_ConfigClockSource+0x16c>
 8001f28:	2b20      	cmp	r3, #32
 8001f2a:	d060      	beq.n	8001fee <HAL_TIM_ConfigClockSource+0x15a>
 8001f2c:	2b20      	cmp	r3, #32
 8001f2e:	d867      	bhi.n	8002000 <HAL_TIM_ConfigClockSource+0x16c>
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d05c      	beq.n	8001fee <HAL_TIM_ConfigClockSource+0x15a>
 8001f34:	2b10      	cmp	r3, #16
 8001f36:	d05a      	beq.n	8001fee <HAL_TIM_ConfigClockSource+0x15a>
 8001f38:	e062      	b.n	8002000 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6818      	ldr	r0, [r3, #0]
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	6899      	ldr	r1, [r3, #8]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	f000 f95e 	bl	800220a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001f5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68ba      	ldr	r2, [r7, #8]
 8001f64:	609a      	str	r2, [r3, #8]
      break;
 8001f66:	e04f      	b.n	8002008 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6818      	ldr	r0, [r3, #0]
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	6899      	ldr	r1, [r3, #8]
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	f000 f947 	bl	800220a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	689a      	ldr	r2, [r3, #8]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f8a:	609a      	str	r2, [r3, #8]
      break;
 8001f8c:	e03c      	b.n	8002008 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6818      	ldr	r0, [r3, #0]
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	6859      	ldr	r1, [r3, #4]
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	f000 f8be 	bl	800211c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2150      	movs	r1, #80	; 0x50
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 f915 	bl	80021d6 <TIM_ITRx_SetConfig>
      break;
 8001fac:	e02c      	b.n	8002008 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6818      	ldr	r0, [r3, #0]
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	6859      	ldr	r1, [r3, #4]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	f000 f8dc 	bl	8002178 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2160      	movs	r1, #96	; 0x60
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f000 f905 	bl	80021d6 <TIM_ITRx_SetConfig>
      break;
 8001fcc:	e01c      	b.n	8002008 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6818      	ldr	r0, [r3, #0]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	6859      	ldr	r1, [r3, #4]
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	f000 f89e 	bl	800211c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2140      	movs	r1, #64	; 0x40
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f000 f8f5 	bl	80021d6 <TIM_ITRx_SetConfig>
      break;
 8001fec:	e00c      	b.n	8002008 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4610      	mov	r0, r2
 8001ffa:	f000 f8ec 	bl	80021d6 <TIM_ITRx_SetConfig>
      break;
 8001ffe:	e003      	b.n	8002008 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	73fb      	strb	r3, [r7, #15]
      break;
 8002004:	e000      	b.n	8002008 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002006:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002018:	7bfb      	ldrb	r3, [r7, #15]
}
 800201a:	4618      	mov	r0, r3
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002022:	b480      	push	{r7}
 8002024:	b083      	sub	sp, #12
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr

08002034 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	bc80      	pop	{r7}
 8002044:	4770      	bx	lr

08002046 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr

08002058 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	bc80      	pop	{r7}
 8002068:	4770      	bx	lr
	...

0800206c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a25      	ldr	r2, [pc, #148]	; (8002114 <TIM_Base_SetConfig+0xa8>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d007      	beq.n	8002094 <TIM_Base_SetConfig+0x28>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800208a:	d003      	beq.n	8002094 <TIM_Base_SetConfig+0x28>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a22      	ldr	r2, [pc, #136]	; (8002118 <TIM_Base_SetConfig+0xac>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d108      	bne.n	80020a6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800209a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a1a      	ldr	r2, [pc, #104]	; (8002114 <TIM_Base_SetConfig+0xa8>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d007      	beq.n	80020be <TIM_Base_SetConfig+0x52>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020b4:	d003      	beq.n	80020be <TIM_Base_SetConfig+0x52>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a17      	ldr	r2, [pc, #92]	; (8002118 <TIM_Base_SetConfig+0xac>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d108      	bne.n	80020d0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	4313      	orrs	r3, r2
 80020dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a07      	ldr	r2, [pc, #28]	; (8002114 <TIM_Base_SetConfig+0xa8>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d103      	bne.n	8002104 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	691a      	ldr	r2, [r3, #16]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	615a      	str	r2, [r3, #20]
}
 800210a:	bf00      	nop
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr
 8002114:	40012c00 	.word	0x40012c00
 8002118:	40000400 	.word	0x40000400

0800211c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800211c:	b480      	push	{r7}
 800211e:	b087      	sub	sp, #28
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	f023 0201 	bic.w	r2, r3, #1
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002146:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	011b      	lsls	r3, r3, #4
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	4313      	orrs	r3, r2
 8002150:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f023 030a 	bic.w	r3, r3, #10
 8002158:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	4313      	orrs	r3, r2
 8002160:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	621a      	str	r2, [r3, #32]
}
 800216e:	bf00      	nop
 8002170:	371c      	adds	r7, #28
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr

08002178 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002178:	b480      	push	{r7}
 800217a:	b087      	sub	sp, #28
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	f023 0210 	bic.w	r2, r3, #16
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80021a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	031b      	lsls	r3, r3, #12
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80021b4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	011b      	lsls	r3, r3, #4
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	4313      	orrs	r3, r2
 80021be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	621a      	str	r2, [r3, #32]
}
 80021cc:	bf00      	nop
 80021ce:	371c      	adds	r7, #28
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bc80      	pop	{r7}
 80021d4:	4770      	bx	lr

080021d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b085      	sub	sp, #20
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
 80021de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	f043 0307 	orr.w	r3, r3, #7
 80021f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	609a      	str	r2, [r3, #8]
}
 8002200:	bf00      	nop
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	bc80      	pop	{r7}
 8002208:	4770      	bx	lr

0800220a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800220a:	b480      	push	{r7}
 800220c:	b087      	sub	sp, #28
 800220e:	af00      	add	r7, sp, #0
 8002210:	60f8      	str	r0, [r7, #12]
 8002212:	60b9      	str	r1, [r7, #8]
 8002214:	607a      	str	r2, [r7, #4]
 8002216:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002224:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	021a      	lsls	r2, r3, #8
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	431a      	orrs	r2, r3
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	4313      	orrs	r3, r2
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	4313      	orrs	r3, r2
 8002236:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	609a      	str	r2, [r3, #8]
}
 800223e:	bf00      	nop
 8002240:	371c      	adds	r7, #28
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr

08002248 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002258:	2b01      	cmp	r3, #1
 800225a:	d101      	bne.n	8002260 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800225c:	2302      	movs	r3, #2
 800225e:	e041      	b.n	80022e4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2202      	movs	r2, #2
 800226c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002286:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	4313      	orrs	r3, r2
 8002290:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a14      	ldr	r2, [pc, #80]	; (80022f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d009      	beq.n	80022b8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ac:	d004      	beq.n	80022b8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a10      	ldr	r2, [pc, #64]	; (80022f4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d10c      	bne.n	80022d2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	68ba      	ldr	r2, [r7, #8]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bc80      	pop	{r7}
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	40012c00 	.word	0x40012c00
 80022f4:	40000400 	.word	0x40000400

080022f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	bc80      	pop	{r7}
 8002308:	4770      	bx	lr

0800230a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr

0800231c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e042      	b.n	80023b4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d106      	bne.n	8002348 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7fe fab2 	bl	80008ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2224      	movs	r2, #36	; 0x24
 800234c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68da      	ldr	r2, [r3, #12]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800235e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 fd71 	bl	8002e48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	691a      	ldr	r2, [r3, #16]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002374:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	695a      	ldr	r2, [r3, #20]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002384:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68da      	ldr	r2, [r3, #12]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002394:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2220      	movs	r2, #32
 80023a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2220      	movs	r2, #32
 80023a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b08a      	sub	sp, #40	; 0x28
 80023c0:	af02      	add	r7, sp, #8
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	603b      	str	r3, [r7, #0]
 80023c8:	4613      	mov	r3, r2
 80023ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2b20      	cmp	r3, #32
 80023da:	d16d      	bne.n	80024b8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d002      	beq.n	80023e8 <HAL_UART_Transmit+0x2c>
 80023e2:	88fb      	ldrh	r3, [r7, #6]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e066      	b.n	80024ba <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2221      	movs	r2, #33	; 0x21
 80023f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023fa:	f7fe fc25 	bl	8000c48 <HAL_GetTick>
 80023fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	88fa      	ldrh	r2, [r7, #6]
 8002404:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	88fa      	ldrh	r2, [r7, #6]
 800240a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002414:	d108      	bne.n	8002428 <HAL_UART_Transmit+0x6c>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d104      	bne.n	8002428 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800241e:	2300      	movs	r3, #0
 8002420:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	61bb      	str	r3, [r7, #24]
 8002426:	e003      	b.n	8002430 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800242c:	2300      	movs	r3, #0
 800242e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002430:	e02a      	b.n	8002488 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	2200      	movs	r2, #0
 800243a:	2180      	movs	r1, #128	; 0x80
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f000 faf9 	bl	8002a34 <UART_WaitOnFlagUntilTimeout>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e036      	b.n	80024ba <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10b      	bne.n	800246a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	461a      	mov	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002460:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	3302      	adds	r3, #2
 8002466:	61bb      	str	r3, [r7, #24]
 8002468:	e007      	b.n	800247a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	781a      	ldrb	r2, [r3, #0]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	3301      	adds	r3, #1
 8002478:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800247e:	b29b      	uxth	r3, r3
 8002480:	3b01      	subs	r3, #1
 8002482:	b29a      	uxth	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800248c:	b29b      	uxth	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1cf      	bne.n	8002432 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	2200      	movs	r2, #0
 800249a:	2140      	movs	r1, #64	; 0x40
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f000 fac9 	bl	8002a34 <UART_WaitOnFlagUntilTimeout>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e006      	b.n	80024ba <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2220      	movs	r2, #32
 80024b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	e000      	b.n	80024ba <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80024b8:	2302      	movs	r3, #2
  }
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3720      	adds	r7, #32
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b0ba      	sub	sp, #232	; 0xe8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80024f0:	2300      	movs	r3, #0
 80024f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80024f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002502:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10f      	bne.n	800252a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800250a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800250e:	f003 0320 	and.w	r3, r3, #32
 8002512:	2b00      	cmp	r3, #0
 8002514:	d009      	beq.n	800252a <HAL_UART_IRQHandler+0x66>
 8002516:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800251a:	f003 0320 	and.w	r3, r3, #32
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 fbd1 	bl	8002cca <UART_Receive_IT>
      return;
 8002528:	e25b      	b.n	80029e2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800252a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800252e:	2b00      	cmp	r3, #0
 8002530:	f000 80de 	beq.w	80026f0 <HAL_UART_IRQHandler+0x22c>
 8002534:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	2b00      	cmp	r3, #0
 800253e:	d106      	bne.n	800254e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002544:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002548:	2b00      	cmp	r3, #0
 800254a:	f000 80d1 	beq.w	80026f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800254e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00b      	beq.n	8002572 <HAL_UART_IRQHandler+0xae>
 800255a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800255e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002562:	2b00      	cmp	r3, #0
 8002564:	d005      	beq.n	8002572 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256a:	f043 0201 	orr.w	r2, r3, #1
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002576:	f003 0304 	and.w	r3, r3, #4
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00b      	beq.n	8002596 <HAL_UART_IRQHandler+0xd2>
 800257e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b00      	cmp	r3, #0
 8002588:	d005      	beq.n	8002596 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258e:	f043 0202 	orr.w	r2, r3, #2
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00b      	beq.n	80025ba <HAL_UART_IRQHandler+0xf6>
 80025a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d005      	beq.n	80025ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	f043 0204 	orr.w	r2, r3, #4
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80025ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d011      	beq.n	80025ea <HAL_UART_IRQHandler+0x126>
 80025c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025ca:	f003 0320 	and.w	r3, r3, #32
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d105      	bne.n	80025de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80025d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d005      	beq.n	80025ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e2:	f043 0208 	orr.w	r2, r3, #8
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f000 81f2 	beq.w	80029d8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025f8:	f003 0320 	and.w	r3, r3, #32
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d008      	beq.n	8002612 <HAL_UART_IRQHandler+0x14e>
 8002600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002604:	f003 0320 	and.w	r3, r3, #32
 8002608:	2b00      	cmp	r3, #0
 800260a:	d002      	beq.n	8002612 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 fb5c 	bl	8002cca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800261c:	2b00      	cmp	r3, #0
 800261e:	bf14      	ite	ne
 8002620:	2301      	movne	r3, #1
 8002622:	2300      	moveq	r3, #0
 8002624:	b2db      	uxtb	r3, r3
 8002626:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262e:	f003 0308 	and.w	r3, r3, #8
 8002632:	2b00      	cmp	r3, #0
 8002634:	d103      	bne.n	800263e <HAL_UART_IRQHandler+0x17a>
 8002636:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800263a:	2b00      	cmp	r3, #0
 800263c:	d04f      	beq.n	80026de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 fa66 	bl	8002b10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800264e:	2b00      	cmp	r3, #0
 8002650:	d041      	beq.n	80026d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	3314      	adds	r3, #20
 8002658:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800265c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002660:	e853 3f00 	ldrex	r3, [r3]
 8002664:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002668:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800266c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002670:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	3314      	adds	r3, #20
 800267a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800267e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002682:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002686:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800268a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800268e:	e841 2300 	strex	r3, r2, [r1]
 8002692:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002696:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1d9      	bne.n	8002652 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d013      	beq.n	80026ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026aa:	4a7e      	ldr	r2, [pc, #504]	; (80028a4 <HAL_UART_IRQHandler+0x3e0>)
 80026ac:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7fe fc1a 	bl	8000eec <HAL_DMA_Abort_IT>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d016      	beq.n	80026ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80026c8:	4610      	mov	r0, r2
 80026ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026cc:	e00e      	b.n	80026ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f99c 	bl	8002a0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026d4:	e00a      	b.n	80026ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f998 	bl	8002a0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026dc:	e006      	b.n	80026ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f994 	bl	8002a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80026ea:	e175      	b.n	80029d8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026ec:	bf00      	nop
    return;
 80026ee:	e173      	b.n	80029d8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	f040 814f 	bne.w	8002998 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80026fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026fe:	f003 0310 	and.w	r3, r3, #16
 8002702:	2b00      	cmp	r3, #0
 8002704:	f000 8148 	beq.w	8002998 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800270c:	f003 0310 	and.w	r3, r3, #16
 8002710:	2b00      	cmp	r3, #0
 8002712:	f000 8141 	beq.w	8002998 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002716:	2300      	movs	r3, #0
 8002718:	60bb      	str	r3, [r7, #8]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	60bb      	str	r3, [r7, #8]
 800272a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002736:	2b00      	cmp	r3, #0
 8002738:	f000 80b6 	beq.w	80028a8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002748:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800274c:	2b00      	cmp	r3, #0
 800274e:	f000 8145 	beq.w	80029dc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002756:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800275a:	429a      	cmp	r2, r3
 800275c:	f080 813e 	bcs.w	80029dc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002766:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	2b20      	cmp	r3, #32
 8002770:	f000 8088 	beq.w	8002884 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	330c      	adds	r3, #12
 800277a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800277e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002782:	e853 3f00 	ldrex	r3, [r3]
 8002786:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800278a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800278e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002792:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	330c      	adds	r3, #12
 800279c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80027a0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80027a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027a8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80027ac:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80027b0:	e841 2300 	strex	r3, r2, [r1]
 80027b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80027b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1d9      	bne.n	8002774 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	3314      	adds	r3, #20
 80027c6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027ca:	e853 3f00 	ldrex	r3, [r3]
 80027ce:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80027d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027d2:	f023 0301 	bic.w	r3, r3, #1
 80027d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	3314      	adds	r3, #20
 80027e0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80027e4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80027e8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ea:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80027ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80027f0:	e841 2300 	strex	r3, r2, [r1]
 80027f4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80027f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1e1      	bne.n	80027c0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	3314      	adds	r3, #20
 8002802:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002804:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002806:	e853 3f00 	ldrex	r3, [r3]
 800280a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800280c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800280e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002812:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	3314      	adds	r3, #20
 800281c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002820:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002822:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002824:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002826:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002828:	e841 2300 	strex	r3, r2, [r1]
 800282c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800282e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1e3      	bne.n	80027fc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2220      	movs	r2, #32
 8002838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	330c      	adds	r3, #12
 8002848:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800284a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800284c:	e853 3f00 	ldrex	r3, [r3]
 8002850:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002854:	f023 0310 	bic.w	r3, r3, #16
 8002858:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	330c      	adds	r3, #12
 8002862:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002866:	65ba      	str	r2, [r7, #88]	; 0x58
 8002868:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800286a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800286c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800286e:	e841 2300 	strex	r3, r2, [r1]
 8002872:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1e3      	bne.n	8002842 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800287e:	4618      	mov	r0, r3
 8002880:	f7fe faf9 	bl	8000e76 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2202      	movs	r2, #2
 8002888:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002892:	b29b      	uxth	r3, r3
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	b29b      	uxth	r3, r3
 8002898:	4619      	mov	r1, r3
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 f8bf 	bl	8002a1e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80028a0:	e09c      	b.n	80029dc <HAL_UART_IRQHandler+0x518>
 80028a2:	bf00      	nop
 80028a4:	08002bd5 	.word	0x08002bd5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028bc:	b29b      	uxth	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f000 808e 	beq.w	80029e0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80028c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 8089 	beq.w	80029e0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	330c      	adds	r3, #12
 80028d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d8:	e853 3f00 	ldrex	r3, [r3]
 80028dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80028de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80028e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	330c      	adds	r3, #12
 80028ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80028f2:	647a      	str	r2, [r7, #68]	; 0x44
 80028f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80028f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028fa:	e841 2300 	strex	r3, r2, [r1]
 80028fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1e3      	bne.n	80028ce <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	3314      	adds	r3, #20
 800290c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	e853 3f00 	ldrex	r3, [r3]
 8002914:	623b      	str	r3, [r7, #32]
   return(result);
 8002916:	6a3b      	ldr	r3, [r7, #32]
 8002918:	f023 0301 	bic.w	r3, r3, #1
 800291c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	3314      	adds	r3, #20
 8002926:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800292a:	633a      	str	r2, [r7, #48]	; 0x30
 800292c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800292e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002932:	e841 2300 	strex	r3, r2, [r1]
 8002936:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1e3      	bne.n	8002906 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2220      	movs	r2, #32
 8002942:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	330c      	adds	r3, #12
 8002952:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	e853 3f00 	ldrex	r3, [r3]
 800295a:	60fb      	str	r3, [r7, #12]
   return(result);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f023 0310 	bic.w	r3, r3, #16
 8002962:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	330c      	adds	r3, #12
 800296c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002970:	61fa      	str	r2, [r7, #28]
 8002972:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002974:	69b9      	ldr	r1, [r7, #24]
 8002976:	69fa      	ldr	r2, [r7, #28]
 8002978:	e841 2300 	strex	r3, r2, [r1]
 800297c:	617b      	str	r3, [r7, #20]
   return(result);
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1e3      	bne.n	800294c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2202      	movs	r2, #2
 8002988:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800298a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800298e:	4619      	mov	r1, r3
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 f844 	bl	8002a1e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002996:	e023      	b.n	80029e0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800299c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d009      	beq.n	80029b8 <HAL_UART_IRQHandler+0x4f4>
 80029a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d003      	beq.n	80029b8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f000 f923 	bl	8002bfc <UART_Transmit_IT>
    return;
 80029b6:	e014      	b.n	80029e2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80029b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00e      	beq.n	80029e2 <HAL_UART_IRQHandler+0x51e>
 80029c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d008      	beq.n	80029e2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 f962 	bl	8002c9a <UART_EndTransmit_IT>
    return;
 80029d6:	e004      	b.n	80029e2 <HAL_UART_IRQHandler+0x51e>
    return;
 80029d8:	bf00      	nop
 80029da:	e002      	b.n	80029e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80029dc:	bf00      	nop
 80029de:	e000      	b.n	80029e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80029e0:	bf00      	nop
  }
}
 80029e2:	37e8      	adds	r7, #232	; 0xe8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr

080029fa <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr

08002a0c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bc80      	pop	{r7}
 8002a1c:	4770      	bx	lr

08002a1e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
 8002a26:	460b      	mov	r3, r1
 8002a28:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr

08002a34 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b090      	sub	sp, #64	; 0x40
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	603b      	str	r3, [r7, #0]
 8002a40:	4613      	mov	r3, r2
 8002a42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a44:	e050      	b.n	8002ae8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a4c:	d04c      	beq.n	8002ae8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d007      	beq.n	8002a64 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a54:	f7fe f8f8 	bl	8000c48 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d241      	bcs.n	8002ae8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	330c      	adds	r3, #12
 8002a6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6e:	e853 3f00 	ldrex	r3, [r3]
 8002a72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	330c      	adds	r3, #12
 8002a82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a84:	637a      	str	r2, [r7, #52]	; 0x34
 8002a86:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a8c:	e841 2300 	strex	r3, r2, [r1]
 8002a90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1e5      	bne.n	8002a64 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	3314      	adds	r3, #20
 8002a9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	e853 3f00 	ldrex	r3, [r3]
 8002aa6:	613b      	str	r3, [r7, #16]
   return(result);
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	f023 0301 	bic.w	r3, r3, #1
 8002aae:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	3314      	adds	r3, #20
 8002ab6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ab8:	623a      	str	r2, [r7, #32]
 8002aba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002abc:	69f9      	ldr	r1, [r7, #28]
 8002abe:	6a3a      	ldr	r2, [r7, #32]
 8002ac0:	e841 2300 	strex	r3, r2, [r1]
 8002ac4:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1e5      	bne.n	8002a98 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2220      	movs	r2, #32
 8002ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e00f      	b.n	8002b08 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	4013      	ands	r3, r2
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	bf0c      	ite	eq
 8002af8:	2301      	moveq	r3, #1
 8002afa:	2300      	movne	r3, #0
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	461a      	mov	r2, r3
 8002b00:	79fb      	ldrb	r3, [r7, #7]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d09f      	beq.n	8002a46 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3740      	adds	r7, #64	; 0x40
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b095      	sub	sp, #84	; 0x54
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	330c      	adds	r3, #12
 8002b1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b22:	e853 3f00 	ldrex	r3, [r3]
 8002b26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	330c      	adds	r3, #12
 8002b36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b38:	643a      	str	r2, [r7, #64]	; 0x40
 8002b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002b3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b40:	e841 2300 	strex	r3, r2, [r1]
 8002b44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1e5      	bne.n	8002b18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	3314      	adds	r3, #20
 8002b52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b54:	6a3b      	ldr	r3, [r7, #32]
 8002b56:	e853 3f00 	ldrex	r3, [r3]
 8002b5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	f023 0301 	bic.w	r3, r3, #1
 8002b62:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	3314      	adds	r3, #20
 8002b6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b74:	e841 2300 	strex	r3, r2, [r1]
 8002b78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1e5      	bne.n	8002b4c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d119      	bne.n	8002bbc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	330c      	adds	r3, #12
 8002b8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	e853 3f00 	ldrex	r3, [r3]
 8002b96:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	f023 0310 	bic.w	r3, r3, #16
 8002b9e:	647b      	str	r3, [r7, #68]	; 0x44
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	330c      	adds	r3, #12
 8002ba6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ba8:	61ba      	str	r2, [r7, #24]
 8002baa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bac:	6979      	ldr	r1, [r7, #20]
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	e841 2300 	strex	r3, r2, [r1]
 8002bb4:	613b      	str	r3, [r7, #16]
   return(result);
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1e5      	bne.n	8002b88 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002bca:	bf00      	nop
 8002bcc:	3754      	adds	r7, #84	; 0x54
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bc80      	pop	{r7}
 8002bd2:	4770      	bx	lr

08002bd4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f7ff ff0c 	bl	8002a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002bf4:	bf00      	nop
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b21      	cmp	r3, #33	; 0x21
 8002c0e:	d13e      	bne.n	8002c8e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c18:	d114      	bne.n	8002c44 <UART_Transmit_IT+0x48>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d110      	bne.n	8002c44 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	881b      	ldrh	r3, [r3, #0]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c36:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	1c9a      	adds	r2, r3, #2
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	621a      	str	r2, [r3, #32]
 8002c42:	e008      	b.n	8002c56 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	1c59      	adds	r1, r3, #1
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6211      	str	r1, [r2, #32]
 8002c4e:	781a      	ldrb	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	4619      	mov	r1, r3
 8002c64:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10f      	bne.n	8002c8a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68da      	ldr	r2, [r3, #12]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c78:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68da      	ldr	r2, [r3, #12]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c88:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	e000      	b.n	8002c90 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002c8e:	2302      	movs	r3, #2
  }
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3714      	adds	r7, #20
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc80      	pop	{r7}
 8002c98:	4770      	bx	lr

08002c9a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b082      	sub	sp, #8
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68da      	ldr	r2, [r3, #12]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cb0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7ff fe94 	bl	80029e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b08c      	sub	sp, #48	; 0x30
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b22      	cmp	r3, #34	; 0x22
 8002cdc:	f040 80ae 	bne.w	8002e3c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ce8:	d117      	bne.n	8002d1a <UART_Receive_IT+0x50>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d113      	bne.n	8002d1a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d0c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d12:	1c9a      	adds	r2, r3, #2
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	629a      	str	r2, [r3, #40]	; 0x28
 8002d18:	e026      	b.n	8002d68 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002d20:	2300      	movs	r3, #0
 8002d22:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d2c:	d007      	beq.n	8002d3e <UART_Receive_IT+0x74>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10a      	bne.n	8002d4c <UART_Receive_IT+0x82>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d106      	bne.n	8002d4c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d48:	701a      	strb	r2, [r3, #0]
 8002d4a:	e008      	b.n	8002d5e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d5c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d62:	1c5a      	adds	r2, r3, #1
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	4619      	mov	r1, r3
 8002d76:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d15d      	bne.n	8002e38 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68da      	ldr	r2, [r3, #12]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 0220 	bic.w	r2, r2, #32
 8002d8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68da      	ldr	r2, [r3, #12]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	695a      	ldr	r2, [r3, #20]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 0201 	bic.w	r2, r2, #1
 8002daa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2220      	movs	r2, #32
 8002db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d135      	bne.n	8002e2e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	330c      	adds	r3, #12
 8002dce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	e853 3f00 	ldrex	r3, [r3]
 8002dd6:	613b      	str	r3, [r7, #16]
   return(result);
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	f023 0310 	bic.w	r3, r3, #16
 8002dde:	627b      	str	r3, [r7, #36]	; 0x24
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	330c      	adds	r3, #12
 8002de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002de8:	623a      	str	r2, [r7, #32]
 8002dea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dec:	69f9      	ldr	r1, [r7, #28]
 8002dee:	6a3a      	ldr	r2, [r7, #32]
 8002df0:	e841 2300 	strex	r3, r2, [r1]
 8002df4:	61bb      	str	r3, [r7, #24]
   return(result);
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1e5      	bne.n	8002dc8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0310 	and.w	r3, r3, #16
 8002e06:	2b10      	cmp	r3, #16
 8002e08:	d10a      	bne.n	8002e20 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	60fb      	str	r3, [r7, #12]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e24:	4619      	mov	r1, r3
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7ff fdf9 	bl	8002a1e <HAL_UARTEx_RxEventCallback>
 8002e2c:	e002      	b.n	8002e34 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7ff fde3 	bl	80029fa <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002e34:	2300      	movs	r3, #0
 8002e36:	e002      	b.n	8002e3e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	e000      	b.n	8002e3e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002e3c:	2302      	movs	r3, #2
  }
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3730      	adds	r7, #48	; 0x30
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
	...

08002e48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68da      	ldr	r2, [r3, #12]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689a      	ldr	r2, [r3, #8]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002e82:	f023 030c 	bic.w	r3, r3, #12
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	6812      	ldr	r2, [r2, #0]
 8002e8a:	68b9      	ldr	r1, [r7, #8]
 8002e8c:	430b      	orrs	r3, r1
 8002e8e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	699a      	ldr	r2, [r3, #24]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a2c      	ldr	r2, [pc, #176]	; (8002f5c <UART_SetConfig+0x114>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d103      	bne.n	8002eb8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002eb0:	f7fe fe1a 	bl	8001ae8 <HAL_RCC_GetPCLK2Freq>
 8002eb4:	60f8      	str	r0, [r7, #12]
 8002eb6:	e002      	b.n	8002ebe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002eb8:	f7fe fe02 	bl	8001ac0 <HAL_RCC_GetPCLK1Freq>
 8002ebc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	009a      	lsls	r2, r3, #2
 8002ec8:	441a      	add	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed4:	4a22      	ldr	r2, [pc, #136]	; (8002f60 <UART_SetConfig+0x118>)
 8002ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eda:	095b      	lsrs	r3, r3, #5
 8002edc:	0119      	lsls	r1, r3, #4
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	4413      	add	r3, r2
 8002ee6:	009a      	lsls	r2, r3, #2
 8002ee8:	441a      	add	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ef4:	4b1a      	ldr	r3, [pc, #104]	; (8002f60 <UART_SetConfig+0x118>)
 8002ef6:	fba3 0302 	umull	r0, r3, r3, r2
 8002efa:	095b      	lsrs	r3, r3, #5
 8002efc:	2064      	movs	r0, #100	; 0x64
 8002efe:	fb00 f303 	mul.w	r3, r0, r3
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	011b      	lsls	r3, r3, #4
 8002f06:	3332      	adds	r3, #50	; 0x32
 8002f08:	4a15      	ldr	r2, [pc, #84]	; (8002f60 <UART_SetConfig+0x118>)
 8002f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0e:	095b      	lsrs	r3, r3, #5
 8002f10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f14:	4419      	add	r1, r3
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4413      	add	r3, r2
 8002f1e:	009a      	lsls	r2, r3, #2
 8002f20:	441a      	add	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f2c:	4b0c      	ldr	r3, [pc, #48]	; (8002f60 <UART_SetConfig+0x118>)
 8002f2e:	fba3 0302 	umull	r0, r3, r3, r2
 8002f32:	095b      	lsrs	r3, r3, #5
 8002f34:	2064      	movs	r0, #100	; 0x64
 8002f36:	fb00 f303 	mul.w	r3, r0, r3
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	011b      	lsls	r3, r3, #4
 8002f3e:	3332      	adds	r3, #50	; 0x32
 8002f40:	4a07      	ldr	r2, [pc, #28]	; (8002f60 <UART_SetConfig+0x118>)
 8002f42:	fba2 2303 	umull	r2, r3, r2, r3
 8002f46:	095b      	lsrs	r3, r3, #5
 8002f48:	f003 020f 	and.w	r2, r3, #15
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	440a      	add	r2, r1
 8002f52:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002f54:	bf00      	nop
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40013800 	.word	0x40013800
 8002f60:	51eb851f 	.word	0x51eb851f

08002f64 <__errno>:
 8002f64:	4b01      	ldr	r3, [pc, #4]	; (8002f6c <__errno+0x8>)
 8002f66:	6818      	ldr	r0, [r3, #0]
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	2000004c 	.word	0x2000004c

08002f70 <__libc_init_array>:
 8002f70:	b570      	push	{r4, r5, r6, lr}
 8002f72:	2600      	movs	r6, #0
 8002f74:	4d0c      	ldr	r5, [pc, #48]	; (8002fa8 <__libc_init_array+0x38>)
 8002f76:	4c0d      	ldr	r4, [pc, #52]	; (8002fac <__libc_init_array+0x3c>)
 8002f78:	1b64      	subs	r4, r4, r5
 8002f7a:	10a4      	asrs	r4, r4, #2
 8002f7c:	42a6      	cmp	r6, r4
 8002f7e:	d109      	bne.n	8002f94 <__libc_init_array+0x24>
 8002f80:	f000 fce4 	bl	800394c <_init>
 8002f84:	2600      	movs	r6, #0
 8002f86:	4d0a      	ldr	r5, [pc, #40]	; (8002fb0 <__libc_init_array+0x40>)
 8002f88:	4c0a      	ldr	r4, [pc, #40]	; (8002fb4 <__libc_init_array+0x44>)
 8002f8a:	1b64      	subs	r4, r4, r5
 8002f8c:	10a4      	asrs	r4, r4, #2
 8002f8e:	42a6      	cmp	r6, r4
 8002f90:	d105      	bne.n	8002f9e <__libc_init_array+0x2e>
 8002f92:	bd70      	pop	{r4, r5, r6, pc}
 8002f94:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f98:	4798      	blx	r3
 8002f9a:	3601      	adds	r6, #1
 8002f9c:	e7ee      	b.n	8002f7c <__libc_init_array+0xc>
 8002f9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fa2:	4798      	blx	r3
 8002fa4:	3601      	adds	r6, #1
 8002fa6:	e7f2      	b.n	8002f8e <__libc_init_array+0x1e>
 8002fa8:	08003a20 	.word	0x08003a20
 8002fac:	08003a20 	.word	0x08003a20
 8002fb0:	08003a20 	.word	0x08003a20
 8002fb4:	08003a24 	.word	0x08003a24

08002fb8 <memset>:
 8002fb8:	4603      	mov	r3, r0
 8002fba:	4402      	add	r2, r0
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d100      	bne.n	8002fc2 <memset+0xa>
 8002fc0:	4770      	bx	lr
 8002fc2:	f803 1b01 	strb.w	r1, [r3], #1
 8002fc6:	e7f9      	b.n	8002fbc <memset+0x4>

08002fc8 <_puts_r>:
 8002fc8:	b570      	push	{r4, r5, r6, lr}
 8002fca:	460e      	mov	r6, r1
 8002fcc:	4605      	mov	r5, r0
 8002fce:	b118      	cbz	r0, 8002fd8 <_puts_r+0x10>
 8002fd0:	6983      	ldr	r3, [r0, #24]
 8002fd2:	b90b      	cbnz	r3, 8002fd8 <_puts_r+0x10>
 8002fd4:	f000 fa48 	bl	8003468 <__sinit>
 8002fd8:	69ab      	ldr	r3, [r5, #24]
 8002fda:	68ac      	ldr	r4, [r5, #8]
 8002fdc:	b913      	cbnz	r3, 8002fe4 <_puts_r+0x1c>
 8002fde:	4628      	mov	r0, r5
 8002fe0:	f000 fa42 	bl	8003468 <__sinit>
 8002fe4:	4b2c      	ldr	r3, [pc, #176]	; (8003098 <_puts_r+0xd0>)
 8002fe6:	429c      	cmp	r4, r3
 8002fe8:	d120      	bne.n	800302c <_puts_r+0x64>
 8002fea:	686c      	ldr	r4, [r5, #4]
 8002fec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002fee:	07db      	lsls	r3, r3, #31
 8002ff0:	d405      	bmi.n	8002ffe <_puts_r+0x36>
 8002ff2:	89a3      	ldrh	r3, [r4, #12]
 8002ff4:	0598      	lsls	r0, r3, #22
 8002ff6:	d402      	bmi.n	8002ffe <_puts_r+0x36>
 8002ff8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ffa:	f000 fad3 	bl	80035a4 <__retarget_lock_acquire_recursive>
 8002ffe:	89a3      	ldrh	r3, [r4, #12]
 8003000:	0719      	lsls	r1, r3, #28
 8003002:	d51d      	bpl.n	8003040 <_puts_r+0x78>
 8003004:	6923      	ldr	r3, [r4, #16]
 8003006:	b1db      	cbz	r3, 8003040 <_puts_r+0x78>
 8003008:	3e01      	subs	r6, #1
 800300a:	68a3      	ldr	r3, [r4, #8]
 800300c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003010:	3b01      	subs	r3, #1
 8003012:	60a3      	str	r3, [r4, #8]
 8003014:	bb39      	cbnz	r1, 8003066 <_puts_r+0x9e>
 8003016:	2b00      	cmp	r3, #0
 8003018:	da38      	bge.n	800308c <_puts_r+0xc4>
 800301a:	4622      	mov	r2, r4
 800301c:	210a      	movs	r1, #10
 800301e:	4628      	mov	r0, r5
 8003020:	f000 f848 	bl	80030b4 <__swbuf_r>
 8003024:	3001      	adds	r0, #1
 8003026:	d011      	beq.n	800304c <_puts_r+0x84>
 8003028:	250a      	movs	r5, #10
 800302a:	e011      	b.n	8003050 <_puts_r+0x88>
 800302c:	4b1b      	ldr	r3, [pc, #108]	; (800309c <_puts_r+0xd4>)
 800302e:	429c      	cmp	r4, r3
 8003030:	d101      	bne.n	8003036 <_puts_r+0x6e>
 8003032:	68ac      	ldr	r4, [r5, #8]
 8003034:	e7da      	b.n	8002fec <_puts_r+0x24>
 8003036:	4b1a      	ldr	r3, [pc, #104]	; (80030a0 <_puts_r+0xd8>)
 8003038:	429c      	cmp	r4, r3
 800303a:	bf08      	it	eq
 800303c:	68ec      	ldreq	r4, [r5, #12]
 800303e:	e7d5      	b.n	8002fec <_puts_r+0x24>
 8003040:	4621      	mov	r1, r4
 8003042:	4628      	mov	r0, r5
 8003044:	f000 f888 	bl	8003158 <__swsetup_r>
 8003048:	2800      	cmp	r0, #0
 800304a:	d0dd      	beq.n	8003008 <_puts_r+0x40>
 800304c:	f04f 35ff 	mov.w	r5, #4294967295
 8003050:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003052:	07da      	lsls	r2, r3, #31
 8003054:	d405      	bmi.n	8003062 <_puts_r+0x9a>
 8003056:	89a3      	ldrh	r3, [r4, #12]
 8003058:	059b      	lsls	r3, r3, #22
 800305a:	d402      	bmi.n	8003062 <_puts_r+0x9a>
 800305c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800305e:	f000 faa2 	bl	80035a6 <__retarget_lock_release_recursive>
 8003062:	4628      	mov	r0, r5
 8003064:	bd70      	pop	{r4, r5, r6, pc}
 8003066:	2b00      	cmp	r3, #0
 8003068:	da04      	bge.n	8003074 <_puts_r+0xac>
 800306a:	69a2      	ldr	r2, [r4, #24]
 800306c:	429a      	cmp	r2, r3
 800306e:	dc06      	bgt.n	800307e <_puts_r+0xb6>
 8003070:	290a      	cmp	r1, #10
 8003072:	d004      	beq.n	800307e <_puts_r+0xb6>
 8003074:	6823      	ldr	r3, [r4, #0]
 8003076:	1c5a      	adds	r2, r3, #1
 8003078:	6022      	str	r2, [r4, #0]
 800307a:	7019      	strb	r1, [r3, #0]
 800307c:	e7c5      	b.n	800300a <_puts_r+0x42>
 800307e:	4622      	mov	r2, r4
 8003080:	4628      	mov	r0, r5
 8003082:	f000 f817 	bl	80030b4 <__swbuf_r>
 8003086:	3001      	adds	r0, #1
 8003088:	d1bf      	bne.n	800300a <_puts_r+0x42>
 800308a:	e7df      	b.n	800304c <_puts_r+0x84>
 800308c:	250a      	movs	r5, #10
 800308e:	6823      	ldr	r3, [r4, #0]
 8003090:	1c5a      	adds	r2, r3, #1
 8003092:	6022      	str	r2, [r4, #0]
 8003094:	701d      	strb	r5, [r3, #0]
 8003096:	e7db      	b.n	8003050 <_puts_r+0x88>
 8003098:	080039e0 	.word	0x080039e0
 800309c:	08003a00 	.word	0x08003a00
 80030a0:	080039c0 	.word	0x080039c0

080030a4 <puts>:
 80030a4:	4b02      	ldr	r3, [pc, #8]	; (80030b0 <puts+0xc>)
 80030a6:	4601      	mov	r1, r0
 80030a8:	6818      	ldr	r0, [r3, #0]
 80030aa:	f7ff bf8d 	b.w	8002fc8 <_puts_r>
 80030ae:	bf00      	nop
 80030b0:	2000004c 	.word	0x2000004c

080030b4 <__swbuf_r>:
 80030b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030b6:	460e      	mov	r6, r1
 80030b8:	4614      	mov	r4, r2
 80030ba:	4605      	mov	r5, r0
 80030bc:	b118      	cbz	r0, 80030c6 <__swbuf_r+0x12>
 80030be:	6983      	ldr	r3, [r0, #24]
 80030c0:	b90b      	cbnz	r3, 80030c6 <__swbuf_r+0x12>
 80030c2:	f000 f9d1 	bl	8003468 <__sinit>
 80030c6:	4b21      	ldr	r3, [pc, #132]	; (800314c <__swbuf_r+0x98>)
 80030c8:	429c      	cmp	r4, r3
 80030ca:	d12b      	bne.n	8003124 <__swbuf_r+0x70>
 80030cc:	686c      	ldr	r4, [r5, #4]
 80030ce:	69a3      	ldr	r3, [r4, #24]
 80030d0:	60a3      	str	r3, [r4, #8]
 80030d2:	89a3      	ldrh	r3, [r4, #12]
 80030d4:	071a      	lsls	r2, r3, #28
 80030d6:	d52f      	bpl.n	8003138 <__swbuf_r+0x84>
 80030d8:	6923      	ldr	r3, [r4, #16]
 80030da:	b36b      	cbz	r3, 8003138 <__swbuf_r+0x84>
 80030dc:	6923      	ldr	r3, [r4, #16]
 80030de:	6820      	ldr	r0, [r4, #0]
 80030e0:	b2f6      	uxtb	r6, r6
 80030e2:	1ac0      	subs	r0, r0, r3
 80030e4:	6963      	ldr	r3, [r4, #20]
 80030e6:	4637      	mov	r7, r6
 80030e8:	4283      	cmp	r3, r0
 80030ea:	dc04      	bgt.n	80030f6 <__swbuf_r+0x42>
 80030ec:	4621      	mov	r1, r4
 80030ee:	4628      	mov	r0, r5
 80030f0:	f000 f926 	bl	8003340 <_fflush_r>
 80030f4:	bb30      	cbnz	r0, 8003144 <__swbuf_r+0x90>
 80030f6:	68a3      	ldr	r3, [r4, #8]
 80030f8:	3001      	adds	r0, #1
 80030fa:	3b01      	subs	r3, #1
 80030fc:	60a3      	str	r3, [r4, #8]
 80030fe:	6823      	ldr	r3, [r4, #0]
 8003100:	1c5a      	adds	r2, r3, #1
 8003102:	6022      	str	r2, [r4, #0]
 8003104:	701e      	strb	r6, [r3, #0]
 8003106:	6963      	ldr	r3, [r4, #20]
 8003108:	4283      	cmp	r3, r0
 800310a:	d004      	beq.n	8003116 <__swbuf_r+0x62>
 800310c:	89a3      	ldrh	r3, [r4, #12]
 800310e:	07db      	lsls	r3, r3, #31
 8003110:	d506      	bpl.n	8003120 <__swbuf_r+0x6c>
 8003112:	2e0a      	cmp	r6, #10
 8003114:	d104      	bne.n	8003120 <__swbuf_r+0x6c>
 8003116:	4621      	mov	r1, r4
 8003118:	4628      	mov	r0, r5
 800311a:	f000 f911 	bl	8003340 <_fflush_r>
 800311e:	b988      	cbnz	r0, 8003144 <__swbuf_r+0x90>
 8003120:	4638      	mov	r0, r7
 8003122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003124:	4b0a      	ldr	r3, [pc, #40]	; (8003150 <__swbuf_r+0x9c>)
 8003126:	429c      	cmp	r4, r3
 8003128:	d101      	bne.n	800312e <__swbuf_r+0x7a>
 800312a:	68ac      	ldr	r4, [r5, #8]
 800312c:	e7cf      	b.n	80030ce <__swbuf_r+0x1a>
 800312e:	4b09      	ldr	r3, [pc, #36]	; (8003154 <__swbuf_r+0xa0>)
 8003130:	429c      	cmp	r4, r3
 8003132:	bf08      	it	eq
 8003134:	68ec      	ldreq	r4, [r5, #12]
 8003136:	e7ca      	b.n	80030ce <__swbuf_r+0x1a>
 8003138:	4621      	mov	r1, r4
 800313a:	4628      	mov	r0, r5
 800313c:	f000 f80c 	bl	8003158 <__swsetup_r>
 8003140:	2800      	cmp	r0, #0
 8003142:	d0cb      	beq.n	80030dc <__swbuf_r+0x28>
 8003144:	f04f 37ff 	mov.w	r7, #4294967295
 8003148:	e7ea      	b.n	8003120 <__swbuf_r+0x6c>
 800314a:	bf00      	nop
 800314c:	080039e0 	.word	0x080039e0
 8003150:	08003a00 	.word	0x08003a00
 8003154:	080039c0 	.word	0x080039c0

08003158 <__swsetup_r>:
 8003158:	4b32      	ldr	r3, [pc, #200]	; (8003224 <__swsetup_r+0xcc>)
 800315a:	b570      	push	{r4, r5, r6, lr}
 800315c:	681d      	ldr	r5, [r3, #0]
 800315e:	4606      	mov	r6, r0
 8003160:	460c      	mov	r4, r1
 8003162:	b125      	cbz	r5, 800316e <__swsetup_r+0x16>
 8003164:	69ab      	ldr	r3, [r5, #24]
 8003166:	b913      	cbnz	r3, 800316e <__swsetup_r+0x16>
 8003168:	4628      	mov	r0, r5
 800316a:	f000 f97d 	bl	8003468 <__sinit>
 800316e:	4b2e      	ldr	r3, [pc, #184]	; (8003228 <__swsetup_r+0xd0>)
 8003170:	429c      	cmp	r4, r3
 8003172:	d10f      	bne.n	8003194 <__swsetup_r+0x3c>
 8003174:	686c      	ldr	r4, [r5, #4]
 8003176:	89a3      	ldrh	r3, [r4, #12]
 8003178:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800317c:	0719      	lsls	r1, r3, #28
 800317e:	d42c      	bmi.n	80031da <__swsetup_r+0x82>
 8003180:	06dd      	lsls	r5, r3, #27
 8003182:	d411      	bmi.n	80031a8 <__swsetup_r+0x50>
 8003184:	2309      	movs	r3, #9
 8003186:	6033      	str	r3, [r6, #0]
 8003188:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800318c:	f04f 30ff 	mov.w	r0, #4294967295
 8003190:	81a3      	strh	r3, [r4, #12]
 8003192:	e03e      	b.n	8003212 <__swsetup_r+0xba>
 8003194:	4b25      	ldr	r3, [pc, #148]	; (800322c <__swsetup_r+0xd4>)
 8003196:	429c      	cmp	r4, r3
 8003198:	d101      	bne.n	800319e <__swsetup_r+0x46>
 800319a:	68ac      	ldr	r4, [r5, #8]
 800319c:	e7eb      	b.n	8003176 <__swsetup_r+0x1e>
 800319e:	4b24      	ldr	r3, [pc, #144]	; (8003230 <__swsetup_r+0xd8>)
 80031a0:	429c      	cmp	r4, r3
 80031a2:	bf08      	it	eq
 80031a4:	68ec      	ldreq	r4, [r5, #12]
 80031a6:	e7e6      	b.n	8003176 <__swsetup_r+0x1e>
 80031a8:	0758      	lsls	r0, r3, #29
 80031aa:	d512      	bpl.n	80031d2 <__swsetup_r+0x7a>
 80031ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80031ae:	b141      	cbz	r1, 80031c2 <__swsetup_r+0x6a>
 80031b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80031b4:	4299      	cmp	r1, r3
 80031b6:	d002      	beq.n	80031be <__swsetup_r+0x66>
 80031b8:	4630      	mov	r0, r6
 80031ba:	f000 fa59 	bl	8003670 <_free_r>
 80031be:	2300      	movs	r3, #0
 80031c0:	6363      	str	r3, [r4, #52]	; 0x34
 80031c2:	89a3      	ldrh	r3, [r4, #12]
 80031c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80031c8:	81a3      	strh	r3, [r4, #12]
 80031ca:	2300      	movs	r3, #0
 80031cc:	6063      	str	r3, [r4, #4]
 80031ce:	6923      	ldr	r3, [r4, #16]
 80031d0:	6023      	str	r3, [r4, #0]
 80031d2:	89a3      	ldrh	r3, [r4, #12]
 80031d4:	f043 0308 	orr.w	r3, r3, #8
 80031d8:	81a3      	strh	r3, [r4, #12]
 80031da:	6923      	ldr	r3, [r4, #16]
 80031dc:	b94b      	cbnz	r3, 80031f2 <__swsetup_r+0x9a>
 80031de:	89a3      	ldrh	r3, [r4, #12]
 80031e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80031e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031e8:	d003      	beq.n	80031f2 <__swsetup_r+0x9a>
 80031ea:	4621      	mov	r1, r4
 80031ec:	4630      	mov	r0, r6
 80031ee:	f000 f9ff 	bl	80035f0 <__smakebuf_r>
 80031f2:	89a0      	ldrh	r0, [r4, #12]
 80031f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80031f8:	f010 0301 	ands.w	r3, r0, #1
 80031fc:	d00a      	beq.n	8003214 <__swsetup_r+0xbc>
 80031fe:	2300      	movs	r3, #0
 8003200:	60a3      	str	r3, [r4, #8]
 8003202:	6963      	ldr	r3, [r4, #20]
 8003204:	425b      	negs	r3, r3
 8003206:	61a3      	str	r3, [r4, #24]
 8003208:	6923      	ldr	r3, [r4, #16]
 800320a:	b943      	cbnz	r3, 800321e <__swsetup_r+0xc6>
 800320c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003210:	d1ba      	bne.n	8003188 <__swsetup_r+0x30>
 8003212:	bd70      	pop	{r4, r5, r6, pc}
 8003214:	0781      	lsls	r1, r0, #30
 8003216:	bf58      	it	pl
 8003218:	6963      	ldrpl	r3, [r4, #20]
 800321a:	60a3      	str	r3, [r4, #8]
 800321c:	e7f4      	b.n	8003208 <__swsetup_r+0xb0>
 800321e:	2000      	movs	r0, #0
 8003220:	e7f7      	b.n	8003212 <__swsetup_r+0xba>
 8003222:	bf00      	nop
 8003224:	2000004c 	.word	0x2000004c
 8003228:	080039e0 	.word	0x080039e0
 800322c:	08003a00 	.word	0x08003a00
 8003230:	080039c0 	.word	0x080039c0

08003234 <__sflush_r>:
 8003234:	898a      	ldrh	r2, [r1, #12]
 8003236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800323a:	4605      	mov	r5, r0
 800323c:	0710      	lsls	r0, r2, #28
 800323e:	460c      	mov	r4, r1
 8003240:	d458      	bmi.n	80032f4 <__sflush_r+0xc0>
 8003242:	684b      	ldr	r3, [r1, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	dc05      	bgt.n	8003254 <__sflush_r+0x20>
 8003248:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800324a:	2b00      	cmp	r3, #0
 800324c:	dc02      	bgt.n	8003254 <__sflush_r+0x20>
 800324e:	2000      	movs	r0, #0
 8003250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003254:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003256:	2e00      	cmp	r6, #0
 8003258:	d0f9      	beq.n	800324e <__sflush_r+0x1a>
 800325a:	2300      	movs	r3, #0
 800325c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003260:	682f      	ldr	r7, [r5, #0]
 8003262:	602b      	str	r3, [r5, #0]
 8003264:	d032      	beq.n	80032cc <__sflush_r+0x98>
 8003266:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003268:	89a3      	ldrh	r3, [r4, #12]
 800326a:	075a      	lsls	r2, r3, #29
 800326c:	d505      	bpl.n	800327a <__sflush_r+0x46>
 800326e:	6863      	ldr	r3, [r4, #4]
 8003270:	1ac0      	subs	r0, r0, r3
 8003272:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003274:	b10b      	cbz	r3, 800327a <__sflush_r+0x46>
 8003276:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003278:	1ac0      	subs	r0, r0, r3
 800327a:	2300      	movs	r3, #0
 800327c:	4602      	mov	r2, r0
 800327e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003280:	4628      	mov	r0, r5
 8003282:	6a21      	ldr	r1, [r4, #32]
 8003284:	47b0      	blx	r6
 8003286:	1c43      	adds	r3, r0, #1
 8003288:	89a3      	ldrh	r3, [r4, #12]
 800328a:	d106      	bne.n	800329a <__sflush_r+0x66>
 800328c:	6829      	ldr	r1, [r5, #0]
 800328e:	291d      	cmp	r1, #29
 8003290:	d82c      	bhi.n	80032ec <__sflush_r+0xb8>
 8003292:	4a2a      	ldr	r2, [pc, #168]	; (800333c <__sflush_r+0x108>)
 8003294:	40ca      	lsrs	r2, r1
 8003296:	07d6      	lsls	r6, r2, #31
 8003298:	d528      	bpl.n	80032ec <__sflush_r+0xb8>
 800329a:	2200      	movs	r2, #0
 800329c:	6062      	str	r2, [r4, #4]
 800329e:	6922      	ldr	r2, [r4, #16]
 80032a0:	04d9      	lsls	r1, r3, #19
 80032a2:	6022      	str	r2, [r4, #0]
 80032a4:	d504      	bpl.n	80032b0 <__sflush_r+0x7c>
 80032a6:	1c42      	adds	r2, r0, #1
 80032a8:	d101      	bne.n	80032ae <__sflush_r+0x7a>
 80032aa:	682b      	ldr	r3, [r5, #0]
 80032ac:	b903      	cbnz	r3, 80032b0 <__sflush_r+0x7c>
 80032ae:	6560      	str	r0, [r4, #84]	; 0x54
 80032b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032b2:	602f      	str	r7, [r5, #0]
 80032b4:	2900      	cmp	r1, #0
 80032b6:	d0ca      	beq.n	800324e <__sflush_r+0x1a>
 80032b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80032bc:	4299      	cmp	r1, r3
 80032be:	d002      	beq.n	80032c6 <__sflush_r+0x92>
 80032c0:	4628      	mov	r0, r5
 80032c2:	f000 f9d5 	bl	8003670 <_free_r>
 80032c6:	2000      	movs	r0, #0
 80032c8:	6360      	str	r0, [r4, #52]	; 0x34
 80032ca:	e7c1      	b.n	8003250 <__sflush_r+0x1c>
 80032cc:	6a21      	ldr	r1, [r4, #32]
 80032ce:	2301      	movs	r3, #1
 80032d0:	4628      	mov	r0, r5
 80032d2:	47b0      	blx	r6
 80032d4:	1c41      	adds	r1, r0, #1
 80032d6:	d1c7      	bne.n	8003268 <__sflush_r+0x34>
 80032d8:	682b      	ldr	r3, [r5, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d0c4      	beq.n	8003268 <__sflush_r+0x34>
 80032de:	2b1d      	cmp	r3, #29
 80032e0:	d001      	beq.n	80032e6 <__sflush_r+0xb2>
 80032e2:	2b16      	cmp	r3, #22
 80032e4:	d101      	bne.n	80032ea <__sflush_r+0xb6>
 80032e6:	602f      	str	r7, [r5, #0]
 80032e8:	e7b1      	b.n	800324e <__sflush_r+0x1a>
 80032ea:	89a3      	ldrh	r3, [r4, #12]
 80032ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032f0:	81a3      	strh	r3, [r4, #12]
 80032f2:	e7ad      	b.n	8003250 <__sflush_r+0x1c>
 80032f4:	690f      	ldr	r7, [r1, #16]
 80032f6:	2f00      	cmp	r7, #0
 80032f8:	d0a9      	beq.n	800324e <__sflush_r+0x1a>
 80032fa:	0793      	lsls	r3, r2, #30
 80032fc:	bf18      	it	ne
 80032fe:	2300      	movne	r3, #0
 8003300:	680e      	ldr	r6, [r1, #0]
 8003302:	bf08      	it	eq
 8003304:	694b      	ldreq	r3, [r1, #20]
 8003306:	eba6 0807 	sub.w	r8, r6, r7
 800330a:	600f      	str	r7, [r1, #0]
 800330c:	608b      	str	r3, [r1, #8]
 800330e:	f1b8 0f00 	cmp.w	r8, #0
 8003312:	dd9c      	ble.n	800324e <__sflush_r+0x1a>
 8003314:	4643      	mov	r3, r8
 8003316:	463a      	mov	r2, r7
 8003318:	4628      	mov	r0, r5
 800331a:	6a21      	ldr	r1, [r4, #32]
 800331c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800331e:	47b0      	blx	r6
 8003320:	2800      	cmp	r0, #0
 8003322:	dc06      	bgt.n	8003332 <__sflush_r+0xfe>
 8003324:	89a3      	ldrh	r3, [r4, #12]
 8003326:	f04f 30ff 	mov.w	r0, #4294967295
 800332a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800332e:	81a3      	strh	r3, [r4, #12]
 8003330:	e78e      	b.n	8003250 <__sflush_r+0x1c>
 8003332:	4407      	add	r7, r0
 8003334:	eba8 0800 	sub.w	r8, r8, r0
 8003338:	e7e9      	b.n	800330e <__sflush_r+0xda>
 800333a:	bf00      	nop
 800333c:	20400001 	.word	0x20400001

08003340 <_fflush_r>:
 8003340:	b538      	push	{r3, r4, r5, lr}
 8003342:	690b      	ldr	r3, [r1, #16]
 8003344:	4605      	mov	r5, r0
 8003346:	460c      	mov	r4, r1
 8003348:	b913      	cbnz	r3, 8003350 <_fflush_r+0x10>
 800334a:	2500      	movs	r5, #0
 800334c:	4628      	mov	r0, r5
 800334e:	bd38      	pop	{r3, r4, r5, pc}
 8003350:	b118      	cbz	r0, 800335a <_fflush_r+0x1a>
 8003352:	6983      	ldr	r3, [r0, #24]
 8003354:	b90b      	cbnz	r3, 800335a <_fflush_r+0x1a>
 8003356:	f000 f887 	bl	8003468 <__sinit>
 800335a:	4b14      	ldr	r3, [pc, #80]	; (80033ac <_fflush_r+0x6c>)
 800335c:	429c      	cmp	r4, r3
 800335e:	d11b      	bne.n	8003398 <_fflush_r+0x58>
 8003360:	686c      	ldr	r4, [r5, #4]
 8003362:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d0ef      	beq.n	800334a <_fflush_r+0xa>
 800336a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800336c:	07d0      	lsls	r0, r2, #31
 800336e:	d404      	bmi.n	800337a <_fflush_r+0x3a>
 8003370:	0599      	lsls	r1, r3, #22
 8003372:	d402      	bmi.n	800337a <_fflush_r+0x3a>
 8003374:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003376:	f000 f915 	bl	80035a4 <__retarget_lock_acquire_recursive>
 800337a:	4628      	mov	r0, r5
 800337c:	4621      	mov	r1, r4
 800337e:	f7ff ff59 	bl	8003234 <__sflush_r>
 8003382:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003384:	4605      	mov	r5, r0
 8003386:	07da      	lsls	r2, r3, #31
 8003388:	d4e0      	bmi.n	800334c <_fflush_r+0xc>
 800338a:	89a3      	ldrh	r3, [r4, #12]
 800338c:	059b      	lsls	r3, r3, #22
 800338e:	d4dd      	bmi.n	800334c <_fflush_r+0xc>
 8003390:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003392:	f000 f908 	bl	80035a6 <__retarget_lock_release_recursive>
 8003396:	e7d9      	b.n	800334c <_fflush_r+0xc>
 8003398:	4b05      	ldr	r3, [pc, #20]	; (80033b0 <_fflush_r+0x70>)
 800339a:	429c      	cmp	r4, r3
 800339c:	d101      	bne.n	80033a2 <_fflush_r+0x62>
 800339e:	68ac      	ldr	r4, [r5, #8]
 80033a0:	e7df      	b.n	8003362 <_fflush_r+0x22>
 80033a2:	4b04      	ldr	r3, [pc, #16]	; (80033b4 <_fflush_r+0x74>)
 80033a4:	429c      	cmp	r4, r3
 80033a6:	bf08      	it	eq
 80033a8:	68ec      	ldreq	r4, [r5, #12]
 80033aa:	e7da      	b.n	8003362 <_fflush_r+0x22>
 80033ac:	080039e0 	.word	0x080039e0
 80033b0:	08003a00 	.word	0x08003a00
 80033b4:	080039c0 	.word	0x080039c0

080033b8 <std>:
 80033b8:	2300      	movs	r3, #0
 80033ba:	b510      	push	{r4, lr}
 80033bc:	4604      	mov	r4, r0
 80033be:	e9c0 3300 	strd	r3, r3, [r0]
 80033c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80033c6:	6083      	str	r3, [r0, #8]
 80033c8:	8181      	strh	r1, [r0, #12]
 80033ca:	6643      	str	r3, [r0, #100]	; 0x64
 80033cc:	81c2      	strh	r2, [r0, #14]
 80033ce:	6183      	str	r3, [r0, #24]
 80033d0:	4619      	mov	r1, r3
 80033d2:	2208      	movs	r2, #8
 80033d4:	305c      	adds	r0, #92	; 0x5c
 80033d6:	f7ff fdef 	bl	8002fb8 <memset>
 80033da:	4b05      	ldr	r3, [pc, #20]	; (80033f0 <std+0x38>)
 80033dc:	6224      	str	r4, [r4, #32]
 80033de:	6263      	str	r3, [r4, #36]	; 0x24
 80033e0:	4b04      	ldr	r3, [pc, #16]	; (80033f4 <std+0x3c>)
 80033e2:	62a3      	str	r3, [r4, #40]	; 0x28
 80033e4:	4b04      	ldr	r3, [pc, #16]	; (80033f8 <std+0x40>)
 80033e6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80033e8:	4b04      	ldr	r3, [pc, #16]	; (80033fc <std+0x44>)
 80033ea:	6323      	str	r3, [r4, #48]	; 0x30
 80033ec:	bd10      	pop	{r4, pc}
 80033ee:	bf00      	nop
 80033f0:	080037dd 	.word	0x080037dd
 80033f4:	080037ff 	.word	0x080037ff
 80033f8:	08003837 	.word	0x08003837
 80033fc:	0800385b 	.word	0x0800385b

08003400 <_cleanup_r>:
 8003400:	4901      	ldr	r1, [pc, #4]	; (8003408 <_cleanup_r+0x8>)
 8003402:	f000 b8af 	b.w	8003564 <_fwalk_reent>
 8003406:	bf00      	nop
 8003408:	08003341 	.word	0x08003341

0800340c <__sfmoreglue>:
 800340c:	b570      	push	{r4, r5, r6, lr}
 800340e:	2568      	movs	r5, #104	; 0x68
 8003410:	1e4a      	subs	r2, r1, #1
 8003412:	4355      	muls	r5, r2
 8003414:	460e      	mov	r6, r1
 8003416:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800341a:	f000 f975 	bl	8003708 <_malloc_r>
 800341e:	4604      	mov	r4, r0
 8003420:	b140      	cbz	r0, 8003434 <__sfmoreglue+0x28>
 8003422:	2100      	movs	r1, #0
 8003424:	e9c0 1600 	strd	r1, r6, [r0]
 8003428:	300c      	adds	r0, #12
 800342a:	60a0      	str	r0, [r4, #8]
 800342c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003430:	f7ff fdc2 	bl	8002fb8 <memset>
 8003434:	4620      	mov	r0, r4
 8003436:	bd70      	pop	{r4, r5, r6, pc}

08003438 <__sfp_lock_acquire>:
 8003438:	4801      	ldr	r0, [pc, #4]	; (8003440 <__sfp_lock_acquire+0x8>)
 800343a:	f000 b8b3 	b.w	80035a4 <__retarget_lock_acquire_recursive>
 800343e:	bf00      	nop
 8003440:	200001d4 	.word	0x200001d4

08003444 <__sfp_lock_release>:
 8003444:	4801      	ldr	r0, [pc, #4]	; (800344c <__sfp_lock_release+0x8>)
 8003446:	f000 b8ae 	b.w	80035a6 <__retarget_lock_release_recursive>
 800344a:	bf00      	nop
 800344c:	200001d4 	.word	0x200001d4

08003450 <__sinit_lock_acquire>:
 8003450:	4801      	ldr	r0, [pc, #4]	; (8003458 <__sinit_lock_acquire+0x8>)
 8003452:	f000 b8a7 	b.w	80035a4 <__retarget_lock_acquire_recursive>
 8003456:	bf00      	nop
 8003458:	200001cf 	.word	0x200001cf

0800345c <__sinit_lock_release>:
 800345c:	4801      	ldr	r0, [pc, #4]	; (8003464 <__sinit_lock_release+0x8>)
 800345e:	f000 b8a2 	b.w	80035a6 <__retarget_lock_release_recursive>
 8003462:	bf00      	nop
 8003464:	200001cf 	.word	0x200001cf

08003468 <__sinit>:
 8003468:	b510      	push	{r4, lr}
 800346a:	4604      	mov	r4, r0
 800346c:	f7ff fff0 	bl	8003450 <__sinit_lock_acquire>
 8003470:	69a3      	ldr	r3, [r4, #24]
 8003472:	b11b      	cbz	r3, 800347c <__sinit+0x14>
 8003474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003478:	f7ff bff0 	b.w	800345c <__sinit_lock_release>
 800347c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003480:	6523      	str	r3, [r4, #80]	; 0x50
 8003482:	4b13      	ldr	r3, [pc, #76]	; (80034d0 <__sinit+0x68>)
 8003484:	4a13      	ldr	r2, [pc, #76]	; (80034d4 <__sinit+0x6c>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	62a2      	str	r2, [r4, #40]	; 0x28
 800348a:	42a3      	cmp	r3, r4
 800348c:	bf08      	it	eq
 800348e:	2301      	moveq	r3, #1
 8003490:	4620      	mov	r0, r4
 8003492:	bf08      	it	eq
 8003494:	61a3      	streq	r3, [r4, #24]
 8003496:	f000 f81f 	bl	80034d8 <__sfp>
 800349a:	6060      	str	r0, [r4, #4]
 800349c:	4620      	mov	r0, r4
 800349e:	f000 f81b 	bl	80034d8 <__sfp>
 80034a2:	60a0      	str	r0, [r4, #8]
 80034a4:	4620      	mov	r0, r4
 80034a6:	f000 f817 	bl	80034d8 <__sfp>
 80034aa:	2200      	movs	r2, #0
 80034ac:	2104      	movs	r1, #4
 80034ae:	60e0      	str	r0, [r4, #12]
 80034b0:	6860      	ldr	r0, [r4, #4]
 80034b2:	f7ff ff81 	bl	80033b8 <std>
 80034b6:	2201      	movs	r2, #1
 80034b8:	2109      	movs	r1, #9
 80034ba:	68a0      	ldr	r0, [r4, #8]
 80034bc:	f7ff ff7c 	bl	80033b8 <std>
 80034c0:	2202      	movs	r2, #2
 80034c2:	2112      	movs	r1, #18
 80034c4:	68e0      	ldr	r0, [r4, #12]
 80034c6:	f7ff ff77 	bl	80033b8 <std>
 80034ca:	2301      	movs	r3, #1
 80034cc:	61a3      	str	r3, [r4, #24]
 80034ce:	e7d1      	b.n	8003474 <__sinit+0xc>
 80034d0:	080039bc 	.word	0x080039bc
 80034d4:	08003401 	.word	0x08003401

080034d8 <__sfp>:
 80034d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034da:	4607      	mov	r7, r0
 80034dc:	f7ff ffac 	bl	8003438 <__sfp_lock_acquire>
 80034e0:	4b1e      	ldr	r3, [pc, #120]	; (800355c <__sfp+0x84>)
 80034e2:	681e      	ldr	r6, [r3, #0]
 80034e4:	69b3      	ldr	r3, [r6, #24]
 80034e6:	b913      	cbnz	r3, 80034ee <__sfp+0x16>
 80034e8:	4630      	mov	r0, r6
 80034ea:	f7ff ffbd 	bl	8003468 <__sinit>
 80034ee:	3648      	adds	r6, #72	; 0x48
 80034f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80034f4:	3b01      	subs	r3, #1
 80034f6:	d503      	bpl.n	8003500 <__sfp+0x28>
 80034f8:	6833      	ldr	r3, [r6, #0]
 80034fa:	b30b      	cbz	r3, 8003540 <__sfp+0x68>
 80034fc:	6836      	ldr	r6, [r6, #0]
 80034fe:	e7f7      	b.n	80034f0 <__sfp+0x18>
 8003500:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003504:	b9d5      	cbnz	r5, 800353c <__sfp+0x64>
 8003506:	4b16      	ldr	r3, [pc, #88]	; (8003560 <__sfp+0x88>)
 8003508:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800350c:	60e3      	str	r3, [r4, #12]
 800350e:	6665      	str	r5, [r4, #100]	; 0x64
 8003510:	f000 f847 	bl	80035a2 <__retarget_lock_init_recursive>
 8003514:	f7ff ff96 	bl	8003444 <__sfp_lock_release>
 8003518:	2208      	movs	r2, #8
 800351a:	4629      	mov	r1, r5
 800351c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003520:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003524:	6025      	str	r5, [r4, #0]
 8003526:	61a5      	str	r5, [r4, #24]
 8003528:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800352c:	f7ff fd44 	bl	8002fb8 <memset>
 8003530:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003534:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003538:	4620      	mov	r0, r4
 800353a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800353c:	3468      	adds	r4, #104	; 0x68
 800353e:	e7d9      	b.n	80034f4 <__sfp+0x1c>
 8003540:	2104      	movs	r1, #4
 8003542:	4638      	mov	r0, r7
 8003544:	f7ff ff62 	bl	800340c <__sfmoreglue>
 8003548:	4604      	mov	r4, r0
 800354a:	6030      	str	r0, [r6, #0]
 800354c:	2800      	cmp	r0, #0
 800354e:	d1d5      	bne.n	80034fc <__sfp+0x24>
 8003550:	f7ff ff78 	bl	8003444 <__sfp_lock_release>
 8003554:	230c      	movs	r3, #12
 8003556:	603b      	str	r3, [r7, #0]
 8003558:	e7ee      	b.n	8003538 <__sfp+0x60>
 800355a:	bf00      	nop
 800355c:	080039bc 	.word	0x080039bc
 8003560:	ffff0001 	.word	0xffff0001

08003564 <_fwalk_reent>:
 8003564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003568:	4606      	mov	r6, r0
 800356a:	4688      	mov	r8, r1
 800356c:	2700      	movs	r7, #0
 800356e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003572:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003576:	f1b9 0901 	subs.w	r9, r9, #1
 800357a:	d505      	bpl.n	8003588 <_fwalk_reent+0x24>
 800357c:	6824      	ldr	r4, [r4, #0]
 800357e:	2c00      	cmp	r4, #0
 8003580:	d1f7      	bne.n	8003572 <_fwalk_reent+0xe>
 8003582:	4638      	mov	r0, r7
 8003584:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003588:	89ab      	ldrh	r3, [r5, #12]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d907      	bls.n	800359e <_fwalk_reent+0x3a>
 800358e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003592:	3301      	adds	r3, #1
 8003594:	d003      	beq.n	800359e <_fwalk_reent+0x3a>
 8003596:	4629      	mov	r1, r5
 8003598:	4630      	mov	r0, r6
 800359a:	47c0      	blx	r8
 800359c:	4307      	orrs	r7, r0
 800359e:	3568      	adds	r5, #104	; 0x68
 80035a0:	e7e9      	b.n	8003576 <_fwalk_reent+0x12>

080035a2 <__retarget_lock_init_recursive>:
 80035a2:	4770      	bx	lr

080035a4 <__retarget_lock_acquire_recursive>:
 80035a4:	4770      	bx	lr

080035a6 <__retarget_lock_release_recursive>:
 80035a6:	4770      	bx	lr

080035a8 <__swhatbuf_r>:
 80035a8:	b570      	push	{r4, r5, r6, lr}
 80035aa:	460e      	mov	r6, r1
 80035ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035b0:	4614      	mov	r4, r2
 80035b2:	2900      	cmp	r1, #0
 80035b4:	461d      	mov	r5, r3
 80035b6:	b096      	sub	sp, #88	; 0x58
 80035b8:	da07      	bge.n	80035ca <__swhatbuf_r+0x22>
 80035ba:	2300      	movs	r3, #0
 80035bc:	602b      	str	r3, [r5, #0]
 80035be:	89b3      	ldrh	r3, [r6, #12]
 80035c0:	061a      	lsls	r2, r3, #24
 80035c2:	d410      	bmi.n	80035e6 <__swhatbuf_r+0x3e>
 80035c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035c8:	e00e      	b.n	80035e8 <__swhatbuf_r+0x40>
 80035ca:	466a      	mov	r2, sp
 80035cc:	f000 f96c 	bl	80038a8 <_fstat_r>
 80035d0:	2800      	cmp	r0, #0
 80035d2:	dbf2      	blt.n	80035ba <__swhatbuf_r+0x12>
 80035d4:	9a01      	ldr	r2, [sp, #4]
 80035d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80035da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80035de:	425a      	negs	r2, r3
 80035e0:	415a      	adcs	r2, r3
 80035e2:	602a      	str	r2, [r5, #0]
 80035e4:	e7ee      	b.n	80035c4 <__swhatbuf_r+0x1c>
 80035e6:	2340      	movs	r3, #64	; 0x40
 80035e8:	2000      	movs	r0, #0
 80035ea:	6023      	str	r3, [r4, #0]
 80035ec:	b016      	add	sp, #88	; 0x58
 80035ee:	bd70      	pop	{r4, r5, r6, pc}

080035f0 <__smakebuf_r>:
 80035f0:	898b      	ldrh	r3, [r1, #12]
 80035f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80035f4:	079d      	lsls	r5, r3, #30
 80035f6:	4606      	mov	r6, r0
 80035f8:	460c      	mov	r4, r1
 80035fa:	d507      	bpl.n	800360c <__smakebuf_r+0x1c>
 80035fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003600:	6023      	str	r3, [r4, #0]
 8003602:	6123      	str	r3, [r4, #16]
 8003604:	2301      	movs	r3, #1
 8003606:	6163      	str	r3, [r4, #20]
 8003608:	b002      	add	sp, #8
 800360a:	bd70      	pop	{r4, r5, r6, pc}
 800360c:	466a      	mov	r2, sp
 800360e:	ab01      	add	r3, sp, #4
 8003610:	f7ff ffca 	bl	80035a8 <__swhatbuf_r>
 8003614:	9900      	ldr	r1, [sp, #0]
 8003616:	4605      	mov	r5, r0
 8003618:	4630      	mov	r0, r6
 800361a:	f000 f875 	bl	8003708 <_malloc_r>
 800361e:	b948      	cbnz	r0, 8003634 <__smakebuf_r+0x44>
 8003620:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003624:	059a      	lsls	r2, r3, #22
 8003626:	d4ef      	bmi.n	8003608 <__smakebuf_r+0x18>
 8003628:	f023 0303 	bic.w	r3, r3, #3
 800362c:	f043 0302 	orr.w	r3, r3, #2
 8003630:	81a3      	strh	r3, [r4, #12]
 8003632:	e7e3      	b.n	80035fc <__smakebuf_r+0xc>
 8003634:	4b0d      	ldr	r3, [pc, #52]	; (800366c <__smakebuf_r+0x7c>)
 8003636:	62b3      	str	r3, [r6, #40]	; 0x28
 8003638:	89a3      	ldrh	r3, [r4, #12]
 800363a:	6020      	str	r0, [r4, #0]
 800363c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003640:	81a3      	strh	r3, [r4, #12]
 8003642:	9b00      	ldr	r3, [sp, #0]
 8003644:	6120      	str	r0, [r4, #16]
 8003646:	6163      	str	r3, [r4, #20]
 8003648:	9b01      	ldr	r3, [sp, #4]
 800364a:	b15b      	cbz	r3, 8003664 <__smakebuf_r+0x74>
 800364c:	4630      	mov	r0, r6
 800364e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003652:	f000 f93b 	bl	80038cc <_isatty_r>
 8003656:	b128      	cbz	r0, 8003664 <__smakebuf_r+0x74>
 8003658:	89a3      	ldrh	r3, [r4, #12]
 800365a:	f023 0303 	bic.w	r3, r3, #3
 800365e:	f043 0301 	orr.w	r3, r3, #1
 8003662:	81a3      	strh	r3, [r4, #12]
 8003664:	89a0      	ldrh	r0, [r4, #12]
 8003666:	4305      	orrs	r5, r0
 8003668:	81a5      	strh	r5, [r4, #12]
 800366a:	e7cd      	b.n	8003608 <__smakebuf_r+0x18>
 800366c:	08003401 	.word	0x08003401

08003670 <_free_r>:
 8003670:	b538      	push	{r3, r4, r5, lr}
 8003672:	4605      	mov	r5, r0
 8003674:	2900      	cmp	r1, #0
 8003676:	d043      	beq.n	8003700 <_free_r+0x90>
 8003678:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800367c:	1f0c      	subs	r4, r1, #4
 800367e:	2b00      	cmp	r3, #0
 8003680:	bfb8      	it	lt
 8003682:	18e4      	addlt	r4, r4, r3
 8003684:	f000 f944 	bl	8003910 <__malloc_lock>
 8003688:	4a1e      	ldr	r2, [pc, #120]	; (8003704 <_free_r+0x94>)
 800368a:	6813      	ldr	r3, [r2, #0]
 800368c:	4610      	mov	r0, r2
 800368e:	b933      	cbnz	r3, 800369e <_free_r+0x2e>
 8003690:	6063      	str	r3, [r4, #4]
 8003692:	6014      	str	r4, [r2, #0]
 8003694:	4628      	mov	r0, r5
 8003696:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800369a:	f000 b93f 	b.w	800391c <__malloc_unlock>
 800369e:	42a3      	cmp	r3, r4
 80036a0:	d90a      	bls.n	80036b8 <_free_r+0x48>
 80036a2:	6821      	ldr	r1, [r4, #0]
 80036a4:	1862      	adds	r2, r4, r1
 80036a6:	4293      	cmp	r3, r2
 80036a8:	bf01      	itttt	eq
 80036aa:	681a      	ldreq	r2, [r3, #0]
 80036ac:	685b      	ldreq	r3, [r3, #4]
 80036ae:	1852      	addeq	r2, r2, r1
 80036b0:	6022      	streq	r2, [r4, #0]
 80036b2:	6063      	str	r3, [r4, #4]
 80036b4:	6004      	str	r4, [r0, #0]
 80036b6:	e7ed      	b.n	8003694 <_free_r+0x24>
 80036b8:	461a      	mov	r2, r3
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	b10b      	cbz	r3, 80036c2 <_free_r+0x52>
 80036be:	42a3      	cmp	r3, r4
 80036c0:	d9fa      	bls.n	80036b8 <_free_r+0x48>
 80036c2:	6811      	ldr	r1, [r2, #0]
 80036c4:	1850      	adds	r0, r2, r1
 80036c6:	42a0      	cmp	r0, r4
 80036c8:	d10b      	bne.n	80036e2 <_free_r+0x72>
 80036ca:	6820      	ldr	r0, [r4, #0]
 80036cc:	4401      	add	r1, r0
 80036ce:	1850      	adds	r0, r2, r1
 80036d0:	4283      	cmp	r3, r0
 80036d2:	6011      	str	r1, [r2, #0]
 80036d4:	d1de      	bne.n	8003694 <_free_r+0x24>
 80036d6:	6818      	ldr	r0, [r3, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	4401      	add	r1, r0
 80036dc:	6011      	str	r1, [r2, #0]
 80036de:	6053      	str	r3, [r2, #4]
 80036e0:	e7d8      	b.n	8003694 <_free_r+0x24>
 80036e2:	d902      	bls.n	80036ea <_free_r+0x7a>
 80036e4:	230c      	movs	r3, #12
 80036e6:	602b      	str	r3, [r5, #0]
 80036e8:	e7d4      	b.n	8003694 <_free_r+0x24>
 80036ea:	6820      	ldr	r0, [r4, #0]
 80036ec:	1821      	adds	r1, r4, r0
 80036ee:	428b      	cmp	r3, r1
 80036f0:	bf01      	itttt	eq
 80036f2:	6819      	ldreq	r1, [r3, #0]
 80036f4:	685b      	ldreq	r3, [r3, #4]
 80036f6:	1809      	addeq	r1, r1, r0
 80036f8:	6021      	streq	r1, [r4, #0]
 80036fa:	6063      	str	r3, [r4, #4]
 80036fc:	6054      	str	r4, [r2, #4]
 80036fe:	e7c9      	b.n	8003694 <_free_r+0x24>
 8003700:	bd38      	pop	{r3, r4, r5, pc}
 8003702:	bf00      	nop
 8003704:	20000130 	.word	0x20000130

08003708 <_malloc_r>:
 8003708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800370a:	1ccd      	adds	r5, r1, #3
 800370c:	f025 0503 	bic.w	r5, r5, #3
 8003710:	3508      	adds	r5, #8
 8003712:	2d0c      	cmp	r5, #12
 8003714:	bf38      	it	cc
 8003716:	250c      	movcc	r5, #12
 8003718:	2d00      	cmp	r5, #0
 800371a:	4606      	mov	r6, r0
 800371c:	db01      	blt.n	8003722 <_malloc_r+0x1a>
 800371e:	42a9      	cmp	r1, r5
 8003720:	d903      	bls.n	800372a <_malloc_r+0x22>
 8003722:	230c      	movs	r3, #12
 8003724:	6033      	str	r3, [r6, #0]
 8003726:	2000      	movs	r0, #0
 8003728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800372a:	f000 f8f1 	bl	8003910 <__malloc_lock>
 800372e:	4921      	ldr	r1, [pc, #132]	; (80037b4 <_malloc_r+0xac>)
 8003730:	680a      	ldr	r2, [r1, #0]
 8003732:	4614      	mov	r4, r2
 8003734:	b99c      	cbnz	r4, 800375e <_malloc_r+0x56>
 8003736:	4f20      	ldr	r7, [pc, #128]	; (80037b8 <_malloc_r+0xb0>)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	b923      	cbnz	r3, 8003746 <_malloc_r+0x3e>
 800373c:	4621      	mov	r1, r4
 800373e:	4630      	mov	r0, r6
 8003740:	f000 f83c 	bl	80037bc <_sbrk_r>
 8003744:	6038      	str	r0, [r7, #0]
 8003746:	4629      	mov	r1, r5
 8003748:	4630      	mov	r0, r6
 800374a:	f000 f837 	bl	80037bc <_sbrk_r>
 800374e:	1c43      	adds	r3, r0, #1
 8003750:	d123      	bne.n	800379a <_malloc_r+0x92>
 8003752:	230c      	movs	r3, #12
 8003754:	4630      	mov	r0, r6
 8003756:	6033      	str	r3, [r6, #0]
 8003758:	f000 f8e0 	bl	800391c <__malloc_unlock>
 800375c:	e7e3      	b.n	8003726 <_malloc_r+0x1e>
 800375e:	6823      	ldr	r3, [r4, #0]
 8003760:	1b5b      	subs	r3, r3, r5
 8003762:	d417      	bmi.n	8003794 <_malloc_r+0x8c>
 8003764:	2b0b      	cmp	r3, #11
 8003766:	d903      	bls.n	8003770 <_malloc_r+0x68>
 8003768:	6023      	str	r3, [r4, #0]
 800376a:	441c      	add	r4, r3
 800376c:	6025      	str	r5, [r4, #0]
 800376e:	e004      	b.n	800377a <_malloc_r+0x72>
 8003770:	6863      	ldr	r3, [r4, #4]
 8003772:	42a2      	cmp	r2, r4
 8003774:	bf0c      	ite	eq
 8003776:	600b      	streq	r3, [r1, #0]
 8003778:	6053      	strne	r3, [r2, #4]
 800377a:	4630      	mov	r0, r6
 800377c:	f000 f8ce 	bl	800391c <__malloc_unlock>
 8003780:	f104 000b 	add.w	r0, r4, #11
 8003784:	1d23      	adds	r3, r4, #4
 8003786:	f020 0007 	bic.w	r0, r0, #7
 800378a:	1ac2      	subs	r2, r0, r3
 800378c:	d0cc      	beq.n	8003728 <_malloc_r+0x20>
 800378e:	1a1b      	subs	r3, r3, r0
 8003790:	50a3      	str	r3, [r4, r2]
 8003792:	e7c9      	b.n	8003728 <_malloc_r+0x20>
 8003794:	4622      	mov	r2, r4
 8003796:	6864      	ldr	r4, [r4, #4]
 8003798:	e7cc      	b.n	8003734 <_malloc_r+0x2c>
 800379a:	1cc4      	adds	r4, r0, #3
 800379c:	f024 0403 	bic.w	r4, r4, #3
 80037a0:	42a0      	cmp	r0, r4
 80037a2:	d0e3      	beq.n	800376c <_malloc_r+0x64>
 80037a4:	1a21      	subs	r1, r4, r0
 80037a6:	4630      	mov	r0, r6
 80037a8:	f000 f808 	bl	80037bc <_sbrk_r>
 80037ac:	3001      	adds	r0, #1
 80037ae:	d1dd      	bne.n	800376c <_malloc_r+0x64>
 80037b0:	e7cf      	b.n	8003752 <_malloc_r+0x4a>
 80037b2:	bf00      	nop
 80037b4:	20000130 	.word	0x20000130
 80037b8:	20000134 	.word	0x20000134

080037bc <_sbrk_r>:
 80037bc:	b538      	push	{r3, r4, r5, lr}
 80037be:	2300      	movs	r3, #0
 80037c0:	4d05      	ldr	r5, [pc, #20]	; (80037d8 <_sbrk_r+0x1c>)
 80037c2:	4604      	mov	r4, r0
 80037c4:	4608      	mov	r0, r1
 80037c6:	602b      	str	r3, [r5, #0]
 80037c8:	f7fd f94c 	bl	8000a64 <_sbrk>
 80037cc:	1c43      	adds	r3, r0, #1
 80037ce:	d102      	bne.n	80037d6 <_sbrk_r+0x1a>
 80037d0:	682b      	ldr	r3, [r5, #0]
 80037d2:	b103      	cbz	r3, 80037d6 <_sbrk_r+0x1a>
 80037d4:	6023      	str	r3, [r4, #0]
 80037d6:	bd38      	pop	{r3, r4, r5, pc}
 80037d8:	200001d8 	.word	0x200001d8

080037dc <__sread>:
 80037dc:	b510      	push	{r4, lr}
 80037de:	460c      	mov	r4, r1
 80037e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037e4:	f000 f8a0 	bl	8003928 <_read_r>
 80037e8:	2800      	cmp	r0, #0
 80037ea:	bfab      	itete	ge
 80037ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80037ee:	89a3      	ldrhlt	r3, [r4, #12]
 80037f0:	181b      	addge	r3, r3, r0
 80037f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80037f6:	bfac      	ite	ge
 80037f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80037fa:	81a3      	strhlt	r3, [r4, #12]
 80037fc:	bd10      	pop	{r4, pc}

080037fe <__swrite>:
 80037fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003802:	461f      	mov	r7, r3
 8003804:	898b      	ldrh	r3, [r1, #12]
 8003806:	4605      	mov	r5, r0
 8003808:	05db      	lsls	r3, r3, #23
 800380a:	460c      	mov	r4, r1
 800380c:	4616      	mov	r6, r2
 800380e:	d505      	bpl.n	800381c <__swrite+0x1e>
 8003810:	2302      	movs	r3, #2
 8003812:	2200      	movs	r2, #0
 8003814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003818:	f000 f868 	bl	80038ec <_lseek_r>
 800381c:	89a3      	ldrh	r3, [r4, #12]
 800381e:	4632      	mov	r2, r6
 8003820:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003824:	81a3      	strh	r3, [r4, #12]
 8003826:	4628      	mov	r0, r5
 8003828:	463b      	mov	r3, r7
 800382a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800382e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003832:	f000 b817 	b.w	8003864 <_write_r>

08003836 <__sseek>:
 8003836:	b510      	push	{r4, lr}
 8003838:	460c      	mov	r4, r1
 800383a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800383e:	f000 f855 	bl	80038ec <_lseek_r>
 8003842:	1c43      	adds	r3, r0, #1
 8003844:	89a3      	ldrh	r3, [r4, #12]
 8003846:	bf15      	itete	ne
 8003848:	6560      	strne	r0, [r4, #84]	; 0x54
 800384a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800384e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003852:	81a3      	strheq	r3, [r4, #12]
 8003854:	bf18      	it	ne
 8003856:	81a3      	strhne	r3, [r4, #12]
 8003858:	bd10      	pop	{r4, pc}

0800385a <__sclose>:
 800385a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800385e:	f000 b813 	b.w	8003888 <_close_r>
	...

08003864 <_write_r>:
 8003864:	b538      	push	{r3, r4, r5, lr}
 8003866:	4604      	mov	r4, r0
 8003868:	4608      	mov	r0, r1
 800386a:	4611      	mov	r1, r2
 800386c:	2200      	movs	r2, #0
 800386e:	4d05      	ldr	r5, [pc, #20]	; (8003884 <_write_r+0x20>)
 8003870:	602a      	str	r2, [r5, #0]
 8003872:	461a      	mov	r2, r3
 8003874:	f7fc fec2 	bl	80005fc <_write>
 8003878:	1c43      	adds	r3, r0, #1
 800387a:	d102      	bne.n	8003882 <_write_r+0x1e>
 800387c:	682b      	ldr	r3, [r5, #0]
 800387e:	b103      	cbz	r3, 8003882 <_write_r+0x1e>
 8003880:	6023      	str	r3, [r4, #0]
 8003882:	bd38      	pop	{r3, r4, r5, pc}
 8003884:	200001d8 	.word	0x200001d8

08003888 <_close_r>:
 8003888:	b538      	push	{r3, r4, r5, lr}
 800388a:	2300      	movs	r3, #0
 800388c:	4d05      	ldr	r5, [pc, #20]	; (80038a4 <_close_r+0x1c>)
 800388e:	4604      	mov	r4, r0
 8003890:	4608      	mov	r0, r1
 8003892:	602b      	str	r3, [r5, #0]
 8003894:	f7fd f8b5 	bl	8000a02 <_close>
 8003898:	1c43      	adds	r3, r0, #1
 800389a:	d102      	bne.n	80038a2 <_close_r+0x1a>
 800389c:	682b      	ldr	r3, [r5, #0]
 800389e:	b103      	cbz	r3, 80038a2 <_close_r+0x1a>
 80038a0:	6023      	str	r3, [r4, #0]
 80038a2:	bd38      	pop	{r3, r4, r5, pc}
 80038a4:	200001d8 	.word	0x200001d8

080038a8 <_fstat_r>:
 80038a8:	b538      	push	{r3, r4, r5, lr}
 80038aa:	2300      	movs	r3, #0
 80038ac:	4d06      	ldr	r5, [pc, #24]	; (80038c8 <_fstat_r+0x20>)
 80038ae:	4604      	mov	r4, r0
 80038b0:	4608      	mov	r0, r1
 80038b2:	4611      	mov	r1, r2
 80038b4:	602b      	str	r3, [r5, #0]
 80038b6:	f7fd f8af 	bl	8000a18 <_fstat>
 80038ba:	1c43      	adds	r3, r0, #1
 80038bc:	d102      	bne.n	80038c4 <_fstat_r+0x1c>
 80038be:	682b      	ldr	r3, [r5, #0]
 80038c0:	b103      	cbz	r3, 80038c4 <_fstat_r+0x1c>
 80038c2:	6023      	str	r3, [r4, #0]
 80038c4:	bd38      	pop	{r3, r4, r5, pc}
 80038c6:	bf00      	nop
 80038c8:	200001d8 	.word	0x200001d8

080038cc <_isatty_r>:
 80038cc:	b538      	push	{r3, r4, r5, lr}
 80038ce:	2300      	movs	r3, #0
 80038d0:	4d05      	ldr	r5, [pc, #20]	; (80038e8 <_isatty_r+0x1c>)
 80038d2:	4604      	mov	r4, r0
 80038d4:	4608      	mov	r0, r1
 80038d6:	602b      	str	r3, [r5, #0]
 80038d8:	f7fd f8ad 	bl	8000a36 <_isatty>
 80038dc:	1c43      	adds	r3, r0, #1
 80038de:	d102      	bne.n	80038e6 <_isatty_r+0x1a>
 80038e0:	682b      	ldr	r3, [r5, #0]
 80038e2:	b103      	cbz	r3, 80038e6 <_isatty_r+0x1a>
 80038e4:	6023      	str	r3, [r4, #0]
 80038e6:	bd38      	pop	{r3, r4, r5, pc}
 80038e8:	200001d8 	.word	0x200001d8

080038ec <_lseek_r>:
 80038ec:	b538      	push	{r3, r4, r5, lr}
 80038ee:	4604      	mov	r4, r0
 80038f0:	4608      	mov	r0, r1
 80038f2:	4611      	mov	r1, r2
 80038f4:	2200      	movs	r2, #0
 80038f6:	4d05      	ldr	r5, [pc, #20]	; (800390c <_lseek_r+0x20>)
 80038f8:	602a      	str	r2, [r5, #0]
 80038fa:	461a      	mov	r2, r3
 80038fc:	f7fd f8a5 	bl	8000a4a <_lseek>
 8003900:	1c43      	adds	r3, r0, #1
 8003902:	d102      	bne.n	800390a <_lseek_r+0x1e>
 8003904:	682b      	ldr	r3, [r5, #0]
 8003906:	b103      	cbz	r3, 800390a <_lseek_r+0x1e>
 8003908:	6023      	str	r3, [r4, #0]
 800390a:	bd38      	pop	{r3, r4, r5, pc}
 800390c:	200001d8 	.word	0x200001d8

08003910 <__malloc_lock>:
 8003910:	4801      	ldr	r0, [pc, #4]	; (8003918 <__malloc_lock+0x8>)
 8003912:	f7ff be47 	b.w	80035a4 <__retarget_lock_acquire_recursive>
 8003916:	bf00      	nop
 8003918:	200001d0 	.word	0x200001d0

0800391c <__malloc_unlock>:
 800391c:	4801      	ldr	r0, [pc, #4]	; (8003924 <__malloc_unlock+0x8>)
 800391e:	f7ff be42 	b.w	80035a6 <__retarget_lock_release_recursive>
 8003922:	bf00      	nop
 8003924:	200001d0 	.word	0x200001d0

08003928 <_read_r>:
 8003928:	b538      	push	{r3, r4, r5, lr}
 800392a:	4604      	mov	r4, r0
 800392c:	4608      	mov	r0, r1
 800392e:	4611      	mov	r1, r2
 8003930:	2200      	movs	r2, #0
 8003932:	4d05      	ldr	r5, [pc, #20]	; (8003948 <_read_r+0x20>)
 8003934:	602a      	str	r2, [r5, #0]
 8003936:	461a      	mov	r2, r3
 8003938:	f7fd f846 	bl	80009c8 <_read>
 800393c:	1c43      	adds	r3, r0, #1
 800393e:	d102      	bne.n	8003946 <_read_r+0x1e>
 8003940:	682b      	ldr	r3, [r5, #0]
 8003942:	b103      	cbz	r3, 8003946 <_read_r+0x1e>
 8003944:	6023      	str	r3, [r4, #0]
 8003946:	bd38      	pop	{r3, r4, r5, pc}
 8003948:	200001d8 	.word	0x200001d8

0800394c <_init>:
 800394c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800394e:	bf00      	nop
 8003950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003952:	bc08      	pop	{r3}
 8003954:	469e      	mov	lr, r3
 8003956:	4770      	bx	lr

08003958 <_fini>:
 8003958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800395a:	bf00      	nop
 800395c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800395e:	bc08      	pop	{r3}
 8003960:	469e      	mov	lr, r3
 8003962:	4770      	bx	lr
