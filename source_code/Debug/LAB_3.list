
LAB_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004560  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  0800466c  0800466c  0001466c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004834  08004834  000200cc  2**0
                  CONTENTS
  4 .ARM          00000000  08004834  08004834  000200cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004834  08004834  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004834  08004834  00014834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004838  08004838  00014838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  0800483c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  200000cc  08004908  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  08004908  00020208  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012108  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b7c  00000000  00000000  000321fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  00034d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d20  00000000  00000000  00035bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000198b7  00000000  00000000  00036910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011af5  00000000  00000000  000501c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a807  00000000  00000000  00061cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ec4c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f78  00000000  00000000  000ec518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000cc 	.word	0x200000cc
 8000128:	00000000 	.word	0x00000000
 800012c:	08004654 	.word	0x08004654

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d0 	.word	0x200000d0
 8000148:	08004654 	.word	0x08004654

0800014c <subKeyProcess>:

int TimeOutForKeyPress =  100;
int status_LED1 = 0;
int button1_flag = 0;

void subKeyProcess(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	button1_flag = 1;
 8000150:	4b03      	ldr	r3, [pc, #12]	; (8000160 <subKeyProcess+0x14>)
 8000152:	2201      	movs	r2, #1
 8000154:	601a      	str	r2, [r3, #0]
}
 8000156:	bf00      	nop
 8000158:	46bd      	mov	sp, r7
 800015a:	bc80      	pop	{r7}
 800015c:	4770      	bx	lr
 800015e:	bf00      	nop
 8000160:	200000e8 	.word	0x200000e8

08000164 <getKeyInput>:
void getKeyInput(){
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
  KeyReg2 = KeyReg1;
 8000168:	4b1f      	ldr	r3, [pc, #124]	; (80001e8 <getKeyInput+0x84>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	4a1f      	ldr	r2, [pc, #124]	; (80001ec <getKeyInput+0x88>)
 800016e:	6013      	str	r3, [r2, #0]
  KeyReg1 = KeyReg0;
 8000170:	4b1f      	ldr	r3, [pc, #124]	; (80001f0 <getKeyInput+0x8c>)
 8000172:	681b      	ldr	r3, [r3, #0]
 8000174:	4a1c      	ldr	r2, [pc, #112]	; (80001e8 <getKeyInput+0x84>)
 8000176:	6013      	str	r3, [r2, #0]
  KeyReg0 = HAL_GPIO_ReadPin(GPIOA, MODE_Pin);
 8000178:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800017c:	481d      	ldr	r0, [pc, #116]	; (80001f4 <getKeyInput+0x90>)
 800017e:	f001 ff13 	bl	8001fa8 <HAL_GPIO_ReadPin>
 8000182:	4603      	mov	r3, r0
 8000184:	461a      	mov	r2, r3
 8000186:	4b1a      	ldr	r3, [pc, #104]	; (80001f0 <getKeyInput+0x8c>)
 8000188:	601a      	str	r2, [r3, #0]
  if ((KeyReg1 == KeyReg0) && (KeyReg1 == KeyReg2)){
 800018a:	4b17      	ldr	r3, [pc, #92]	; (80001e8 <getKeyInput+0x84>)
 800018c:	681a      	ldr	r2, [r3, #0]
 800018e:	4b18      	ldr	r3, [pc, #96]	; (80001f0 <getKeyInput+0x8c>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	429a      	cmp	r2, r3
 8000194:	d125      	bne.n	80001e2 <getKeyInput+0x7e>
 8000196:	4b14      	ldr	r3, [pc, #80]	; (80001e8 <getKeyInput+0x84>)
 8000198:	681a      	ldr	r2, [r3, #0]
 800019a:	4b14      	ldr	r3, [pc, #80]	; (80001ec <getKeyInput+0x88>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	429a      	cmp	r2, r3
 80001a0:	d11f      	bne.n	80001e2 <getKeyInput+0x7e>
    if (KeyReg2 != KeyReg3){
 80001a2:	4b12      	ldr	r3, [pc, #72]	; (80001ec <getKeyInput+0x88>)
 80001a4:	681a      	ldr	r2, [r3, #0]
 80001a6:	4b14      	ldr	r3, [pc, #80]	; (80001f8 <getKeyInput+0x94>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	429a      	cmp	r2, r3
 80001ac:	d00d      	beq.n	80001ca <getKeyInput+0x66>
      KeyReg3 = KeyReg2;
 80001ae:	4b0f      	ldr	r3, [pc, #60]	; (80001ec <getKeyInput+0x88>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	4a11      	ldr	r2, [pc, #68]	; (80001f8 <getKeyInput+0x94>)
 80001b4:	6013      	str	r3, [r2, #0]

      if (KeyReg3 == PRESSED_STATE){
 80001b6:	4b10      	ldr	r3, [pc, #64]	; (80001f8 <getKeyInput+0x94>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d111      	bne.n	80001e2 <getKeyInput+0x7e>
        TimeOutForKeyPress = 100;
 80001be:	4b0f      	ldr	r3, [pc, #60]	; (80001fc <getKeyInput+0x98>)
 80001c0:	2264      	movs	r2, #100	; 0x64
 80001c2:	601a      	str	r2, [r3, #0]
        subKeyProcess();
 80001c4:	f7ff ffc2 	bl	800014c <subKeyProcess>
        if (TimeOutForKeyPress == 0){
          KeyReg3 = NORMAL_STATE;
        }
    }
  }
}
 80001c8:	e00b      	b.n	80001e2 <getKeyInput+0x7e>
       TimeOutForKeyPress --;
 80001ca:	4b0c      	ldr	r3, [pc, #48]	; (80001fc <getKeyInput+0x98>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	3b01      	subs	r3, #1
 80001d0:	4a0a      	ldr	r2, [pc, #40]	; (80001fc <getKeyInput+0x98>)
 80001d2:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress == 0){
 80001d4:	4b09      	ldr	r3, [pc, #36]	; (80001fc <getKeyInput+0x98>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d102      	bne.n	80001e2 <getKeyInput+0x7e>
          KeyReg3 = NORMAL_STATE;
 80001dc:	4b06      	ldr	r3, [pc, #24]	; (80001f8 <getKeyInput+0x94>)
 80001de:	2201      	movs	r2, #1
 80001e0:	601a      	str	r2, [r3, #0]
}
 80001e2:	bf00      	nop
 80001e4:	bd80      	pop	{r7, pc}
 80001e6:	bf00      	nop
 80001e8:	20000004 	.word	0x20000004
 80001ec:	20000008 	.word	0x20000008
 80001f0:	20000000 	.word	0x20000000
 80001f4:	40010800 	.word	0x40010800
 80001f8:	2000000c 	.word	0x2000000c
 80001fc:	20000010 	.word	0x20000010

08000200 <WhichButtonIsPressed>:
	BUTTON_PRESS_MORE_THAN_1S
};

enum ButtonState buttonState = BUTTON_RELEASED;

int WhichButtonIsPressed() {
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	if (is_button_pressed(3)) return button_reset_is_pressed;
 8000204:	2003      	movs	r0, #3
 8000206:	f000 faf1 	bl	80007ec <is_button_pressed>
 800020a:	4603      	mov	r3, r0
 800020c:	2b00      	cmp	r3, #0
 800020e:	d001      	beq.n	8000214 <WhichButtonIsPressed+0x14>
 8000210:	230d      	movs	r3, #13
 8000212:	e018      	b.n	8000246 <WhichButtonIsPressed+0x46>
	if (is_button_pressed(0)) return button_mode_is_pressed;
 8000214:	2000      	movs	r0, #0
 8000216:	f000 fae9 	bl	80007ec <is_button_pressed>
 800021a:	4603      	mov	r3, r0
 800021c:	2b00      	cmp	r3, #0
 800021e:	d001      	beq.n	8000224 <WhichButtonIsPressed+0x24>
 8000220:	230a      	movs	r3, #10
 8000222:	e010      	b.n	8000246 <WhichButtonIsPressed+0x46>
	if (is_button_pressed(1)) return button_add_is_pressed;
 8000224:	2001      	movs	r0, #1
 8000226:	f000 fae1 	bl	80007ec <is_button_pressed>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	d001      	beq.n	8000234 <WhichButtonIsPressed+0x34>
 8000230:	230b      	movs	r3, #11
 8000232:	e008      	b.n	8000246 <WhichButtonIsPressed+0x46>
	if (is_button_pressed(2)) return button_confirm_is_pressed;
 8000234:	2002      	movs	r0, #2
 8000236:	f000 fad9 	bl	80007ec <is_button_pressed>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d001      	beq.n	8000244 <WhichButtonIsPressed+0x44>
 8000240:	230c      	movs	r3, #12
 8000242:	e000      	b.n	8000246 <WhichButtonIsPressed+0x46>

	return 0; // None of these buttons are pressed
 8000244:	2300      	movs	r3, #0
}
 8000246:	4618      	mov	r0, r3
 8000248:	bd80      	pop	{r7, pc}

0800024a <WhichButtonIsPressed1s>:

int WhichButtonIsPressed1s() {
 800024a:	b580      	push	{r7, lr}
 800024c:	af00      	add	r7, sp, #0
	if (is_button_pressed_1s(3)) return button_reset_is_pressed_1s;
 800024e:	2003      	movs	r0, #3
 8000250:	f000 fae6 	bl	8000820 <is_button_pressed_1s>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <WhichButtonIsPressed1s+0x14>
 800025a:	2311      	movs	r3, #17
 800025c:	e018      	b.n	8000290 <WhichButtonIsPressed1s+0x46>
	if (is_button_pressed_1s(0)) return button_mode_is_pressed_1s;
 800025e:	2000      	movs	r0, #0
 8000260:	f000 fade 	bl	8000820 <is_button_pressed_1s>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <WhichButtonIsPressed1s+0x24>
 800026a:	230e      	movs	r3, #14
 800026c:	e010      	b.n	8000290 <WhichButtonIsPressed1s+0x46>
	if (is_button_pressed_1s(1)) return button_add_is_pressed_1s;
 800026e:	2001      	movs	r0, #1
 8000270:	f000 fad6 	bl	8000820 <is_button_pressed_1s>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <WhichButtonIsPressed1s+0x34>
 800027a:	230f      	movs	r3, #15
 800027c:	e008      	b.n	8000290 <WhichButtonIsPressed1s+0x46>
	if (is_button_pressed_1s(2)) return button_confirm_is_pressed_1s;
 800027e:	2002      	movs	r0, #2
 8000280:	f000 face 	bl	8000820 <is_button_pressed_1s>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <WhichButtonIsPressed1s+0x44>
 800028a:	2310      	movs	r3, #16
 800028c:	e000      	b.n	8000290 <WhichButtonIsPressed1s+0x46>

	return 0; // None of these buttons are pressed
 800028e:	2300      	movs	r3, #0
}
 8000290:	4618      	mov	r0, r3
 8000292:	bd80      	pop	{r7, pc}

08000294 <fsm_mode_running>:
void fsm_mode_running() {
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
	switch(WhichButtonIsPressed()) {
 8000298:	f7ff ffb2 	bl	8000200 <WhichButtonIsPressed>
 800029c:	4603      	mov	r3, r0
 800029e:	3b0a      	subs	r3, #10
 80002a0:	2b03      	cmp	r3, #3
 80002a2:	f200 8098 	bhi.w	80003d6 <fsm_mode_running+0x142>
 80002a6:	a201      	add	r2, pc, #4	; (adr r2, 80002ac <fsm_mode_running+0x18>)
 80002a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002ac:	080002bd 	.word	0x080002bd
 80002b0:	08000395 	.word	0x08000395
 80002b4:	080003cb 	.word	0x080003cb
 80002b8:	080003d1 	.word	0x080003d1
		// NORMAL MODE
		case button_mode_is_pressed:
			switch(status) {
 80002bc:	4b47      	ldr	r3, [pc, #284]	; (80003dc <fsm_mode_running+0x148>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	3b01      	subs	r3, #1
 80002c2:	2b06      	cmp	r3, #6
 80002c4:	d861      	bhi.n	800038a <fsm_mode_running+0xf6>
 80002c6:	a201      	add	r2, pc, #4	; (adr r2, 80002cc <fsm_mode_running+0x38>)
 80002c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002cc:	080002e9 	.word	0x080002e9
 80002d0:	08000313 	.word	0x08000313
 80002d4:	08000335 	.word	0x08000335
 80002d8:	0800035b 	.word	0x0800035b
 80002dc:	08000313 	.word	0x08000313
 80002e0:	08000335 	.word	0x08000335
 80002e4:	0800035b 	.word	0x0800035b
				// NORMAL MODE - Automatic Running
				case NORMAL_MODE:
					led_init();
 80002e8:	f000 fb2c 	bl	8000944 <led_init>
					status = RED_MODE;
 80002ec:	4b3b      	ldr	r3, [pc, #236]	; (80003dc <fsm_mode_running+0x148>)
 80002ee:	2202      	movs	r2, #2
 80002f0:	601a      	str	r2, [r3, #0]
					printf("The system is in MODE '2 - RED_MODE' \r\n");
 80002f2:	483b      	ldr	r0, [pc, #236]	; (80003e0 <fsm_mode_running+0x14c>)
 80002f4:	f003 fd5a 	bl	8003dac <puts>
					light_time = man_red_time;
 80002f8:	4b3a      	ldr	r3, [pc, #232]	; (80003e4 <fsm_mode_running+0x150>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a3a      	ldr	r2, [pc, #232]	; (80003e8 <fsm_mode_running+0x154>)
 80002fe:	6013      	str	r3, [r2, #0]
					temp_value = light_time;
 8000300:	4b39      	ldr	r3, [pc, #228]	; (80003e8 <fsm_mode_running+0x154>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a39      	ldr	r2, [pc, #228]	; (80003ec <fsm_mode_running+0x158>)
 8000306:	6013      	str	r3, [r2, #0]
					// Adjust frequency scanning process of single RED LED
					setTimer1(DURATION_HALF_OF_SECOND);
 8000308:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800030c:	f000 fd40 	bl	8000d90 <setTimer1>
					break;
 8000310:	e03c      	b.n	800038c <fsm_mode_running+0xf8>
				// RED && MAN_RED MODE
				case RED_MODE: case MAN_RED_MODE:
					led_init();
 8000312:	f000 fb17 	bl	8000944 <led_init>
					// restore light_time if is not pressed button confirm
					light_time = man_amber_time;
 8000316:	4b36      	ldr	r3, [pc, #216]	; (80003f0 <fsm_mode_running+0x15c>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	4a33      	ldr	r2, [pc, #204]	; (80003e8 <fsm_mode_running+0x154>)
 800031c:	6013      	str	r3, [r2, #0]
					temp_value = light_time; // store value to temp variable if button add is pressed
 800031e:	4b32      	ldr	r3, [pc, #200]	; (80003e8 <fsm_mode_running+0x154>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	4a32      	ldr	r2, [pc, #200]	; (80003ec <fsm_mode_running+0x158>)
 8000324:	6013      	str	r3, [r2, #0]
					status = AMBER_MODE;
 8000326:	4b2d      	ldr	r3, [pc, #180]	; (80003dc <fsm_mode_running+0x148>)
 8000328:	2203      	movs	r2, #3
 800032a:	601a      	str	r2, [r3, #0]
					printf("The system is in MODE '3 - AMBER_MODE' \r\n");
 800032c:	4831      	ldr	r0, [pc, #196]	; (80003f4 <fsm_mode_running+0x160>)
 800032e:	f003 fd3d 	bl	8003dac <puts>
					break;
 8000332:	e02b      	b.n	800038c <fsm_mode_running+0xf8>
				// AMBER && MAN_AMBER MODE
				case AMBER_MODE: case MAN_AMBER_MODE:
					GPIOB->BSRR = 0x3F00;
 8000334:	4b30      	ldr	r3, [pc, #192]	; (80003f8 <fsm_mode_running+0x164>)
 8000336:	f44f 527c 	mov.w	r2, #16128	; 0x3f00
 800033a:	611a      	str	r2, [r3, #16]
					// restore light_time if is not pressed button confirm
					light_time = man_green_time;
 800033c:	4b2f      	ldr	r3, [pc, #188]	; (80003fc <fsm_mode_running+0x168>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a29      	ldr	r2, [pc, #164]	; (80003e8 <fsm_mode_running+0x154>)
 8000342:	6013      	str	r3, [r2, #0]
					temp_value = light_time; // store value to temp variable if button add is pressed
 8000344:	4b28      	ldr	r3, [pc, #160]	; (80003e8 <fsm_mode_running+0x154>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a28      	ldr	r2, [pc, #160]	; (80003ec <fsm_mode_running+0x158>)
 800034a:	6013      	str	r3, [r2, #0]
					status = GREEN_MODE;
 800034c:	4b23      	ldr	r3, [pc, #140]	; (80003dc <fsm_mode_running+0x148>)
 800034e:	2204      	movs	r2, #4
 8000350:	601a      	str	r2, [r3, #0]
					printf("The system is in MODE '4 - GREEN_MODE' \r\n");
 8000352:	482b      	ldr	r0, [pc, #172]	; (8000400 <fsm_mode_running+0x16c>)
 8000354:	f003 fd2a 	bl	8003dac <puts>
					break;
 8000358:	e018      	b.n	800038c <fsm_mode_running+0xf8>
				// GREEN && MAN_GREEN MODE
				case GREEN_MODE: case MAN_GREEN_MODE:
					led_init();
 800035a:	f000 faf3 	bl	8000944 <led_init>
					// restore light_time if is not pressed button confirm
					light_time = man_red_time;
 800035e:	4b21      	ldr	r3, [pc, #132]	; (80003e4 <fsm_mode_running+0x150>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	4a21      	ldr	r2, [pc, #132]	; (80003e8 <fsm_mode_running+0x154>)
 8000364:	6013      	str	r3, [r2, #0]
					// assign temp value = light_time and then
					// if button add is pressed it will increase temp_value;
					temp_value = light_time;
 8000366:	4b20      	ldr	r3, [pc, #128]	; (80003e8 <fsm_mode_running+0x154>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	4a20      	ldr	r2, [pc, #128]	; (80003ec <fsm_mode_running+0x158>)
 800036c:	6013      	str	r3, [r2, #0]
					status = NORMAL_MODE;
 800036e:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <fsm_mode_running+0x148>)
 8000370:	2201      	movs	r2, #1
 8000372:	601a      	str	r2, [r3, #0]
					printf("The system is in MODE '1 - NORMAL' \r\n");
 8000374:	4823      	ldr	r0, [pc, #140]	; (8000404 <fsm_mode_running+0x170>)
 8000376:	f003 fd19 	bl	8003dac <puts>
					// re-initialize traffic light
					traffic_init();
 800037a:	f000 ff77 	bl	800126c <traffic_init>
					// update the new buffer to display it at LED 7 SEG
					update_buffer();
 800037e:	f000 fa83 	bl	8000888 <update_buffer>

					setTimer3(DURATION_1S);
 8000382:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000386:	f000 fd37 	bl	8000df8 <setTimer3>
				default:
					break;
 800038a:	bf00      	nop
			}
			buttonState = BUTTON_PRESSED;
 800038c:	4b1e      	ldr	r3, [pc, #120]	; (8000408 <fsm_mode_running+0x174>)
 800038e:	2201      	movs	r2, #1
 8000390:	701a      	strb	r2, [r3, #0]
			break;
 8000392:	e021      	b.n	80003d8 <fsm_mode_running+0x144>
		// ADD BUTTON
		case button_add_is_pressed:
			// Increasing time depending on current state
			switch(status) {
 8000394:	4b11      	ldr	r3, [pc, #68]	; (80003dc <fsm_mode_running+0x148>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	2b04      	cmp	r3, #4
 800039a:	d00e      	beq.n	80003ba <fsm_mode_running+0x126>
 800039c:	2b04      	cmp	r3, #4
 800039e:	dc10      	bgt.n	80003c2 <fsm_mode_running+0x12e>
 80003a0:	2b02      	cmp	r3, #2
 80003a2:	d002      	beq.n	80003aa <fsm_mode_running+0x116>
 80003a4:	2b03      	cmp	r3, #3
 80003a6:	d004      	beq.n	80003b2 <fsm_mode_running+0x11e>
				break;
			case GREEN_MODE:
				status = MAN_GREEN_MODE;
				break;
			default:
				break;
 80003a8:	e00b      	b.n	80003c2 <fsm_mode_running+0x12e>
				status = MAN_RED_MODE;
 80003aa:	4b0c      	ldr	r3, [pc, #48]	; (80003dc <fsm_mode_running+0x148>)
 80003ac:	2205      	movs	r2, #5
 80003ae:	601a      	str	r2, [r3, #0]
				break;
 80003b0:	e008      	b.n	80003c4 <fsm_mode_running+0x130>
				status = MAN_AMBER_MODE;
 80003b2:	4b0a      	ldr	r3, [pc, #40]	; (80003dc <fsm_mode_running+0x148>)
 80003b4:	2206      	movs	r2, #6
 80003b6:	601a      	str	r2, [r3, #0]
				break;
 80003b8:	e004      	b.n	80003c4 <fsm_mode_running+0x130>
				status = MAN_GREEN_MODE;
 80003ba:	4b08      	ldr	r3, [pc, #32]	; (80003dc <fsm_mode_running+0x148>)
 80003bc:	2207      	movs	r2, #7
 80003be:	601a      	str	r2, [r3, #0]
				break;
 80003c0:	e000      	b.n	80003c4 <fsm_mode_running+0x130>
				break;
 80003c2:	bf00      	nop
			}
			// If the button add is pressed then temp_value++. Finally update light_time = temp_value,
			updateTempTime();
 80003c4:	f000 ff76 	bl	80012b4 <updateTempTime>
			break;
 80003c8:	e006      	b.n	80003d8 <fsm_mode_running+0x144>
		// CONFIRM BUTTON
		case button_confirm_is_pressed:
			// If the button confirm is pressed, then man_red/yellow/green_time = temp_value was stored before
			confirmAdjustedTime();
 80003ca:	f000 ffc3 	bl	8001354 <confirmAdjustedTime>
			break;
 80003ce:	e003      	b.n	80003d8 <fsm_mode_running+0x144>
		case button_reset_is_pressed:
			resetToTheDefaultSetting();
 80003d0:	f001 f808 	bl	80013e4 <resetToTheDefaultSetting>
			break;
 80003d4:	e000      	b.n	80003d8 <fsm_mode_running+0x144>
		default:
			break;
 80003d6:	bf00      	nop
	}
}
 80003d8:	bf00      	nop
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	20000028 	.word	0x20000028
 80003e0:	0800466c 	.word	0x0800466c
 80003e4:	20000014 	.word	0x20000014
 80003e8:	20000020 	.word	0x20000020
 80003ec:	200000ec 	.word	0x200000ec
 80003f0:	20000018 	.word	0x20000018
 80003f4:	08004694 	.word	0x08004694
 80003f8:	40010c00 	.word	0x40010c00
 80003fc:	2000001c 	.word	0x2000001c
 8000400:	080046c0 	.word	0x080046c0
 8000404:	080046ec 	.word	0x080046ec
 8000408:	20000108 	.word	0x20000108

0800040c <fsm_mode_running_for_pressed_1s>:

void fsm_mode_running_for_pressed_1s() {
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
	if (status == RED_MODE || status == GREEN_MODE || status == AMBER_MODE)
 8000410:	4b58      	ldr	r3, [pc, #352]	; (8000574 <fsm_mode_running_for_pressed_1s+0x168>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	2b02      	cmp	r3, #2
 8000416:	d007      	beq.n	8000428 <fsm_mode_running_for_pressed_1s+0x1c>
 8000418:	4b56      	ldr	r3, [pc, #344]	; (8000574 <fsm_mode_running_for_pressed_1s+0x168>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	2b04      	cmp	r3, #4
 800041e:	d003      	beq.n	8000428 <fsm_mode_running_for_pressed_1s+0x1c>
 8000420:	4b54      	ldr	r3, [pc, #336]	; (8000574 <fsm_mode_running_for_pressed_1s+0x168>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	2b03      	cmp	r3, #3
 8000426:	d103      	bne.n	8000430 <fsm_mode_running_for_pressed_1s+0x24>
		light_time1 = status;
 8000428:	4b52      	ldr	r3, [pc, #328]	; (8000574 <fsm_mode_running_for_pressed_1s+0x168>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a52      	ldr	r2, [pc, #328]	; (8000578 <fsm_mode_running_for_pressed_1s+0x16c>)
 800042e:	6013      	str	r3, [r2, #0]
	switch(WhichButtonIsPressed1s()) {
 8000430:	f7ff ff0b 	bl	800024a <WhichButtonIsPressed1s>
 8000434:	4603      	mov	r3, r0
 8000436:	3b0c      	subs	r3, #12
 8000438:	2b03      	cmp	r3, #3
 800043a:	f200 8098 	bhi.w	800056e <fsm_mode_running_for_pressed_1s+0x162>
 800043e:	a201      	add	r2, pc, #4	; (adr r2, 8000444 <fsm_mode_running_for_pressed_1s+0x38>)
 8000440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000444:	08000563 	.word	0x08000563
 8000448:	08000569 	.word	0x08000569
 800044c:	08000455 	.word	0x08000455
 8000450:	0800052d 	.word	0x0800052d
		// NORMAL MODE
		case button_mode_is_pressed_1s:
			switch(status) {
 8000454:	4b47      	ldr	r3, [pc, #284]	; (8000574 <fsm_mode_running_for_pressed_1s+0x168>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	3b01      	subs	r3, #1
 800045a:	2b06      	cmp	r3, #6
 800045c:	d861      	bhi.n	8000522 <fsm_mode_running_for_pressed_1s+0x116>
 800045e:	a201      	add	r2, pc, #4	; (adr r2, 8000464 <fsm_mode_running_for_pressed_1s+0x58>)
 8000460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000464:	08000481 	.word	0x08000481
 8000468:	080004ab 	.word	0x080004ab
 800046c:	080004cd 	.word	0x080004cd
 8000470:	080004f3 	.word	0x080004f3
 8000474:	080004ab 	.word	0x080004ab
 8000478:	080004cd 	.word	0x080004cd
 800047c:	080004f3 	.word	0x080004f3
				// NORMAL MODE - Automatic Running
				case NORMAL_MODE:
					led_init();
 8000480:	f000 fa60 	bl	8000944 <led_init>
					status = RED_MODE;
 8000484:	4b3b      	ldr	r3, [pc, #236]	; (8000574 <fsm_mode_running_for_pressed_1s+0x168>)
 8000486:	2202      	movs	r2, #2
 8000488:	601a      	str	r2, [r3, #0]
					printf("The system is in MODE '2 - RED_MODE' \r\n");
 800048a:	483c      	ldr	r0, [pc, #240]	; (800057c <fsm_mode_running_for_pressed_1s+0x170>)
 800048c:	f003 fc8e 	bl	8003dac <puts>
					light_time = man_red_time;
 8000490:	4b3b      	ldr	r3, [pc, #236]	; (8000580 <fsm_mode_running_for_pressed_1s+0x174>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a3b      	ldr	r2, [pc, #236]	; (8000584 <fsm_mode_running_for_pressed_1s+0x178>)
 8000496:	6013      	str	r3, [r2, #0]
					temp_value = light_time;
 8000498:	4b3a      	ldr	r3, [pc, #232]	; (8000584 <fsm_mode_running_for_pressed_1s+0x178>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a3a      	ldr	r2, [pc, #232]	; (8000588 <fsm_mode_running_for_pressed_1s+0x17c>)
 800049e:	6013      	str	r3, [r2, #0]
					// Adjust frequency scanning process of single RED LED
					setTimer1(DURATION_HALF_OF_SECOND);
 80004a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004a4:	f000 fc74 	bl	8000d90 <setTimer1>
					break;
 80004a8:	e03c      	b.n	8000524 <fsm_mode_running_for_pressed_1s+0x118>
				// RED && MAN_RED MODE
				case RED_MODE: case MAN_RED_MODE:
					led_init();
 80004aa:	f000 fa4b 	bl	8000944 <led_init>
					// restore light_time if is not pressed button confirm
					light_time = man_amber_time;
 80004ae:	4b37      	ldr	r3, [pc, #220]	; (800058c <fsm_mode_running_for_pressed_1s+0x180>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a34      	ldr	r2, [pc, #208]	; (8000584 <fsm_mode_running_for_pressed_1s+0x178>)
 80004b4:	6013      	str	r3, [r2, #0]
					temp_value = light_time; // store value to temp variable if button add is pressed
 80004b6:	4b33      	ldr	r3, [pc, #204]	; (8000584 <fsm_mode_running_for_pressed_1s+0x178>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4a33      	ldr	r2, [pc, #204]	; (8000588 <fsm_mode_running_for_pressed_1s+0x17c>)
 80004bc:	6013      	str	r3, [r2, #0]
					status = AMBER_MODE;
 80004be:	4b2d      	ldr	r3, [pc, #180]	; (8000574 <fsm_mode_running_for_pressed_1s+0x168>)
 80004c0:	2203      	movs	r2, #3
 80004c2:	601a      	str	r2, [r3, #0]
					printf("The system is in MODE '3 - AMBER_MODE' \r\n");
 80004c4:	4832      	ldr	r0, [pc, #200]	; (8000590 <fsm_mode_running_for_pressed_1s+0x184>)
 80004c6:	f003 fc71 	bl	8003dac <puts>
					break;
 80004ca:	e02b      	b.n	8000524 <fsm_mode_running_for_pressed_1s+0x118>
				// AMBER && MAN_AMBER MODE
				case AMBER_MODE: case MAN_AMBER_MODE:
					GPIOB->BSRR = 0x3F00;
 80004cc:	4b31      	ldr	r3, [pc, #196]	; (8000594 <fsm_mode_running_for_pressed_1s+0x188>)
 80004ce:	f44f 527c 	mov.w	r2, #16128	; 0x3f00
 80004d2:	611a      	str	r2, [r3, #16]
					// restore light_time if is not pressed button confirm
					light_time = man_green_time;
 80004d4:	4b30      	ldr	r3, [pc, #192]	; (8000598 <fsm_mode_running_for_pressed_1s+0x18c>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a2a      	ldr	r2, [pc, #168]	; (8000584 <fsm_mode_running_for_pressed_1s+0x178>)
 80004da:	6013      	str	r3, [r2, #0]
					temp_value = light_time; // store value to temp variable if button add is pressed
 80004dc:	4b29      	ldr	r3, [pc, #164]	; (8000584 <fsm_mode_running_for_pressed_1s+0x178>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a29      	ldr	r2, [pc, #164]	; (8000588 <fsm_mode_running_for_pressed_1s+0x17c>)
 80004e2:	6013      	str	r3, [r2, #0]
					status = GREEN_MODE;
 80004e4:	4b23      	ldr	r3, [pc, #140]	; (8000574 <fsm_mode_running_for_pressed_1s+0x168>)
 80004e6:	2204      	movs	r2, #4
 80004e8:	601a      	str	r2, [r3, #0]
					printf("The system is in MODE '4 - GREEN_MODE' \r\n");
 80004ea:	482c      	ldr	r0, [pc, #176]	; (800059c <fsm_mode_running_for_pressed_1s+0x190>)
 80004ec:	f003 fc5e 	bl	8003dac <puts>
					break;
 80004f0:	e018      	b.n	8000524 <fsm_mode_running_for_pressed_1s+0x118>
				// GREEN && MAN_GREEN MODE
				case GREEN_MODE: case MAN_GREEN_MODE:
					led_init();
 80004f2:	f000 fa27 	bl	8000944 <led_init>
					// restore light_time if is not pressed button confirm
					light_time = man_red_time;
 80004f6:	4b22      	ldr	r3, [pc, #136]	; (8000580 <fsm_mode_running_for_pressed_1s+0x174>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4a22      	ldr	r2, [pc, #136]	; (8000584 <fsm_mode_running_for_pressed_1s+0x178>)
 80004fc:	6013      	str	r3, [r2, #0]
					// assign temp value = light_time and then
					// if button add is pressed it will increase temp_value;
					temp_value = light_time;
 80004fe:	4b21      	ldr	r3, [pc, #132]	; (8000584 <fsm_mode_running_for_pressed_1s+0x178>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4a21      	ldr	r2, [pc, #132]	; (8000588 <fsm_mode_running_for_pressed_1s+0x17c>)
 8000504:	6013      	str	r3, [r2, #0]
					status = NORMAL_MODE;
 8000506:	4b1b      	ldr	r3, [pc, #108]	; (8000574 <fsm_mode_running_for_pressed_1s+0x168>)
 8000508:	2201      	movs	r2, #1
 800050a:	601a      	str	r2, [r3, #0]
					printf("The system is in MODE '1 - NORMAL' \r\n");
 800050c:	4824      	ldr	r0, [pc, #144]	; (80005a0 <fsm_mode_running_for_pressed_1s+0x194>)
 800050e:	f003 fc4d 	bl	8003dac <puts>
					// re-initialize traffic light
					traffic_init();
 8000512:	f000 feab 	bl	800126c <traffic_init>
					// update the new buffer to display it at LED 7 SEG
					update_buffer();
 8000516:	f000 f9b7 	bl	8000888 <update_buffer>

					setTimer3(DURATION_1S);
 800051a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800051e:	f000 fc6b 	bl	8000df8 <setTimer3>
				default:
					break;
 8000522:	bf00      	nop
			}
			buttonState = BUTTON_PRESSED;
 8000524:	4b1f      	ldr	r3, [pc, #124]	; (80005a4 <fsm_mode_running_for_pressed_1s+0x198>)
 8000526:	2201      	movs	r2, #1
 8000528:	701a      	strb	r2, [r3, #0]
			break;
 800052a:	e021      	b.n	8000570 <fsm_mode_running_for_pressed_1s+0x164>
		// ADD BUTTON
		case button_add_is_pressed_1s:
			// Increasing time depending on current state
			switch(status) {
 800052c:	4b11      	ldr	r3, [pc, #68]	; (8000574 <fsm_mode_running_for_pressed_1s+0x168>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	2b04      	cmp	r3, #4
 8000532:	d00e      	beq.n	8000552 <fsm_mode_running_for_pressed_1s+0x146>
 8000534:	2b04      	cmp	r3, #4
 8000536:	dc10      	bgt.n	800055a <fsm_mode_running_for_pressed_1s+0x14e>
 8000538:	2b02      	cmp	r3, #2
 800053a:	d002      	beq.n	8000542 <fsm_mode_running_for_pressed_1s+0x136>
 800053c:	2b03      	cmp	r3, #3
 800053e:	d004      	beq.n	800054a <fsm_mode_running_for_pressed_1s+0x13e>
				break;
			case GREEN_MODE:
				status = MAN_GREEN_MODE;
				break;
			default:
				break;
 8000540:	e00b      	b.n	800055a <fsm_mode_running_for_pressed_1s+0x14e>
				status = MAN_RED_MODE;
 8000542:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <fsm_mode_running_for_pressed_1s+0x168>)
 8000544:	2205      	movs	r2, #5
 8000546:	601a      	str	r2, [r3, #0]
				break;
 8000548:	e008      	b.n	800055c <fsm_mode_running_for_pressed_1s+0x150>
				status = MAN_AMBER_MODE;
 800054a:	4b0a      	ldr	r3, [pc, #40]	; (8000574 <fsm_mode_running_for_pressed_1s+0x168>)
 800054c:	2206      	movs	r2, #6
 800054e:	601a      	str	r2, [r3, #0]
				break;
 8000550:	e004      	b.n	800055c <fsm_mode_running_for_pressed_1s+0x150>
				status = MAN_GREEN_MODE;
 8000552:	4b08      	ldr	r3, [pc, #32]	; (8000574 <fsm_mode_running_for_pressed_1s+0x168>)
 8000554:	2207      	movs	r2, #7
 8000556:	601a      	str	r2, [r3, #0]
				break;
 8000558:	e000      	b.n	800055c <fsm_mode_running_for_pressed_1s+0x150>
				break;
 800055a:	bf00      	nop
			}
			// If the button add is pressed then temp_value++. Finally update light_time = temp_value,
			updateTempTime();
 800055c:	f000 feaa 	bl	80012b4 <updateTempTime>
			break;
 8000560:	e006      	b.n	8000570 <fsm_mode_running_for_pressed_1s+0x164>
		// CONFIRM BUTTON
		case button_confirm_is_pressed:
			// If the button confirm is pressed, then man_red/yellow/green_time = temp_value was stored before
			confirmAdjustedTime();
 8000562:	f000 fef7 	bl	8001354 <confirmAdjustedTime>
			break;
 8000566:	e003      	b.n	8000570 <fsm_mode_running_for_pressed_1s+0x164>
		case button_reset_is_pressed:
			resetToTheDefaultSetting();
 8000568:	f000 ff3c 	bl	80013e4 <resetToTheDefaultSetting>
			break;
 800056c:	e000      	b.n	8000570 <fsm_mode_running_for_pressed_1s+0x164>
		default:
			break;
 800056e:	bf00      	nop
	}
}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20000028 	.word	0x20000028
 8000578:	20000024 	.word	0x20000024
 800057c:	0800466c 	.word	0x0800466c
 8000580:	20000014 	.word	0x20000014
 8000584:	20000020 	.word	0x20000020
 8000588:	200000ec 	.word	0x200000ec
 800058c:	20000018 	.word	0x20000018
 8000590:	08004694 	.word	0x08004694
 8000594:	40010c00 	.word	0x40010c00
 8000598:	2000001c 	.word	0x2000001c
 800059c:	080046c0 	.word	0x080046c0
 80005a0:	080046ec 	.word	0x080046ec
 80005a4:	20000108 	.word	0x20000108

080005a8 <fsm_for_input_processing>:

void fsm_for_input_processing() {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
	// Only display 3 MODE to modify value.
	if (status == RED_MODE || status == GREEN_MODE || status == AMBER_MODE)
 80005ae:	4b37      	ldr	r3, [pc, #220]	; (800068c <fsm_for_input_processing+0xe4>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2b02      	cmp	r3, #2
 80005b4:	d007      	beq.n	80005c6 <fsm_for_input_processing+0x1e>
 80005b6:	4b35      	ldr	r3, [pc, #212]	; (800068c <fsm_for_input_processing+0xe4>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2b04      	cmp	r3, #4
 80005bc:	d003      	beq.n	80005c6 <fsm_for_input_processing+0x1e>
 80005be:	4b33      	ldr	r3, [pc, #204]	; (800068c <fsm_for_input_processing+0xe4>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	2b03      	cmp	r3, #3
 80005c4:	d103      	bne.n	80005ce <fsm_for_input_processing+0x26>
		light_time1 = status;
 80005c6:	4b31      	ldr	r3, [pc, #196]	; (800068c <fsm_for_input_processing+0xe4>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a31      	ldr	r2, [pc, #196]	; (8000690 <fsm_for_input_processing+0xe8>)
 80005cc:	6013      	str	r3, [r2, #0]
	switch(buttonState) {
 80005ce:	4b31      	ldr	r3, [pc, #196]	; (8000694 <fsm_for_input_processing+0xec>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b02      	cmp	r3, #2
 80005d4:	d031      	beq.n	800063a <fsm_for_input_processing+0x92>
 80005d6:	2b02      	cmp	r3, #2
 80005d8:	dc53      	bgt.n	8000682 <fsm_for_input_processing+0xda>
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d002      	beq.n	80005e4 <fsm_for_input_processing+0x3c>
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d00d      	beq.n	80005fe <fsm_for_input_processing+0x56>
					flagForButtonPressOneQuarterSecond[i] = 0;
				}
			}
			break;
		default:
			break;
 80005e2:	e04e      	b.n	8000682 <fsm_for_input_processing+0xda>
			AllowToExecuteAfterASecondPressed = 0;
 80005e4:	4b2c      	ldr	r3, [pc, #176]	; (8000698 <fsm_for_input_processing+0xf0>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
			if (WhichButtonIsPressed()) {
 80005ea:	f7ff fe09 	bl	8000200 <WhichButtonIsPressed>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d004      	beq.n	80005fe <fsm_for_input_processing+0x56>
				buttonState = BUTTON_PRESSED;
 80005f4:	4b27      	ldr	r3, [pc, #156]	; (8000694 <fsm_for_input_processing+0xec>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	701a      	strb	r2, [r3, #0]
				fsm_mode_running();
 80005fa:	f7ff fe4b 	bl	8000294 <fsm_mode_running>
			if (!WhichButtonIsPressed()) {
 80005fe:	f7ff fdff 	bl	8000200 <WhichButtonIsPressed>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d103      	bne.n	8000610 <fsm_for_input_processing+0x68>
				buttonState = BUTTON_RELEASED;
 8000608:	4b22      	ldr	r3, [pc, #136]	; (8000694 <fsm_for_input_processing+0xec>)
 800060a:	2200      	movs	r2, #0
 800060c:	701a      	strb	r2, [r3, #0]
			break;
 800060e:	e039      	b.n	8000684 <fsm_for_input_processing+0xdc>
				for (int i = 0; i < N0_OF_BUTTONS; i++) {
 8000610:	2300      	movs	r3, #0
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	e00d      	b.n	8000632 <fsm_for_input_processing+0x8a>
					if (is_button_pressed_1s(i))
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	b2db      	uxtb	r3, r3
 800061a:	4618      	mov	r0, r3
 800061c:	f000 f900 	bl	8000820 <is_button_pressed_1s>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d002      	beq.n	800062c <fsm_for_input_processing+0x84>
						buttonState = BUTTON_PRESS_MORE_THAN_1S;
 8000626:	4b1b      	ldr	r3, [pc, #108]	; (8000694 <fsm_for_input_processing+0xec>)
 8000628:	2202      	movs	r2, #2
 800062a:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < N0_OF_BUTTONS; i++) {
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	3301      	adds	r3, #1
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2b03      	cmp	r3, #3
 8000636:	ddee      	ble.n	8000616 <fsm_for_input_processing+0x6e>
			break;
 8000638:	e024      	b.n	8000684 <fsm_for_input_processing+0xdc>
			if (!WhichButtonIsPressed()) {
 800063a:	f7ff fde1 	bl	8000200 <WhichButtonIsPressed>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d102      	bne.n	800064a <fsm_for_input_processing+0xa2>
				buttonState = BUTTON_RELEASED;
 8000644:	4b13      	ldr	r3, [pc, #76]	; (8000694 <fsm_for_input_processing+0xec>)
 8000646:	2200      	movs	r2, #0
 8000648:	701a      	strb	r2, [r3, #0]
			AllowToExecuteAfterASecondPressed = 1; // Allow the system to count for pressed button each half a second
 800064a:	4b13      	ldr	r3, [pc, #76]	; (8000698 <fsm_for_input_processing+0xf0>)
 800064c:	2201      	movs	r2, #1
 800064e:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < N0_OF_BUTTONS; i++) {
 8000650:	2300      	movs	r3, #0
 8000652:	603b      	str	r3, [r7, #0]
 8000654:	e011      	b.n	800067a <fsm_for_input_processing+0xd2>
				if (is_button_pressed_one_quarter_second(i)) {
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	b2db      	uxtb	r3, r3
 800065a:	4618      	mov	r0, r3
 800065c:	f000 f8fa 	bl	8000854 <is_button_pressed_one_quarter_second>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d006      	beq.n	8000674 <fsm_for_input_processing+0xcc>
					fsm_mode_running_for_pressed_1s();
 8000666:	f7ff fed1 	bl	800040c <fsm_mode_running_for_pressed_1s>
					flagForButtonPressOneQuarterSecond[i] = 0;
 800066a:	4a0c      	ldr	r2, [pc, #48]	; (800069c <fsm_for_input_processing+0xf4>)
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	2100      	movs	r1, #0
 8000670:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = 0; i < N0_OF_BUTTONS; i++) {
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	3301      	adds	r3, #1
 8000678:	603b      	str	r3, [r7, #0]
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	2b03      	cmp	r3, #3
 800067e:	ddea      	ble.n	8000656 <fsm_for_input_processing+0xae>
			break;
 8000680:	e000      	b.n	8000684 <fsm_for_input_processing+0xdc>
			break;
 8000682:	bf00      	nop
	}
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20000028 	.word	0x20000028
 8000690:	20000024 	.word	0x20000024
 8000694:	20000108 	.word	0x20000108
 8000698:	200000f4 	.word	0x200000f4
 800069c:	200000f8 	.word	0x200000f8

080006a0 <button_reading>:
// we define counter for automatically increasing the value
// after the button is pressed more than 1 second .
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];
static uint16_t counterForButtonPressOneQuarterSecond[N0_OF_BUTTONS];

void button_reading(void) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 80006a6:	2300      	movs	r3, #0
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	e081      	b.n	80007b0 <button_reading+0x110>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 80006ac:	4a45      	ldr	r2, [pc, #276]	; (80007c4 <button_reading+0x124>)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4413      	add	r3, r2
 80006b2:	7819      	ldrb	r1, [r3, #0]
 80006b4:	4a44      	ldr	r2, [pc, #272]	; (80007c8 <button_reading+0x128>)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4413      	add	r3, r2
 80006ba:	460a      	mov	r2, r1
 80006bc:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(buttonPort[i], buttonPin[i]);
 80006be:	4a43      	ldr	r2, [pc, #268]	; (80007cc <button_reading+0x12c>)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006c6:	4942      	ldr	r1, [pc, #264]	; (80007d0 <button_reading+0x130>)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80006ce:	4619      	mov	r1, r3
 80006d0:	4610      	mov	r0, r2
 80006d2:	f001 fc69 	bl	8001fa8 <HAL_GPIO_ReadPin>
 80006d6:	4603      	mov	r3, r0
 80006d8:	4619      	mov	r1, r3
 80006da:	4a3a      	ldr	r2, [pc, #232]	; (80007c4 <button_reading+0x124>)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4413      	add	r3, r2
 80006e0:	460a      	mov	r2, r1
 80006e2:	701a      	strb	r2, [r3, #0]

		if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) {
 80006e4:	4a37      	ldr	r2, [pc, #220]	; (80007c4 <button_reading+0x124>)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	4413      	add	r3, r2
 80006ea:	781a      	ldrb	r2, [r3, #0]
 80006ec:	4936      	ldr	r1, [pc, #216]	; (80007c8 <button_reading+0x128>)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	440b      	add	r3, r1
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d158      	bne.n	80007aa <button_reading+0x10a>
			//valid input, can read now
			buttonBuffer[i] = debounceButtonBuffer1[i];
 80006f8:	4a32      	ldr	r2, [pc, #200]	; (80007c4 <button_reading+0x124>)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4413      	add	r3, r2
 80006fe:	7819      	ldrb	r1, [r3, #0]
 8000700:	4a34      	ldr	r2, [pc, #208]	; (80007d4 <button_reading+0x134>)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4413      	add	r3, r2
 8000706:	460a      	mov	r2, r1
 8000708:	701a      	strb	r2, [r3, #0]
			if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 800070a:	4a32      	ldr	r2, [pc, #200]	; (80007d4 <button_reading+0x134>)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	4413      	add	r3, r2
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d135      	bne.n	8000782 <button_reading+0xe2>
				if ((counterForButtonPressOneQuarterSecond[i] < DURATION_FOR_AUTO_RUNNING_MODE)
 8000716:	4a30      	ldr	r2, [pc, #192]	; (80007d8 <button_reading+0x138>)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800071e:	2b18      	cmp	r3, #24
 8000720:	d80e      	bhi.n	8000740 <button_reading+0xa0>
						&& AllowToExecuteAfterASecondPressed)
 8000722:	4b2e      	ldr	r3, [pc, #184]	; (80007dc <button_reading+0x13c>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d00a      	beq.n	8000740 <button_reading+0xa0>
				{
					counterForButtonPressOneQuarterSecond[i]++;
 800072a:	4a2b      	ldr	r2, [pc, #172]	; (80007d8 <button_reading+0x138>)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000732:	3301      	adds	r3, #1
 8000734:	b299      	uxth	r1, r3
 8000736:	4a28      	ldr	r2, [pc, #160]	; (80007d8 <button_reading+0x138>)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800073e:	e009      	b.n	8000754 <button_reading+0xb4>
				} else {
					counterForButtonPressOneQuarterSecond[i] = 0;
 8000740:	4a25      	ldr	r2, [pc, #148]	; (80007d8 <button_reading+0x138>)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2100      	movs	r1, #0
 8000746:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flagForButtonPressOneQuarterSecond[i] = 1;
 800074a:	4a25      	ldr	r2, [pc, #148]	; (80007e0 <button_reading+0x140>)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2101      	movs	r1, #1
 8000750:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				}
				if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 8000754:	4a23      	ldr	r2, [pc, #140]	; (80007e4 <button_reading+0x144>)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800075c:	2b63      	cmp	r3, #99	; 0x63
 800075e:	d80a      	bhi.n	8000776 <button_reading+0xd6>
					counterForButtonPress1s[i]++;
 8000760:	4a20      	ldr	r2, [pc, #128]	; (80007e4 <button_reading+0x144>)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000768:	3301      	adds	r3, #1
 800076a:	b299      	uxth	r1, r3
 800076c:	4a1d      	ldr	r2, [pc, #116]	; (80007e4 <button_reading+0x144>)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000774:	e019      	b.n	80007aa <button_reading+0x10a>
				} else {
					// the flag is turned on when 1 second has passed
					// since the button is pressed .
					flagForButtonPress1s[i] = 1;
 8000776:	4a1c      	ldr	r2, [pc, #112]	; (80007e8 <button_reading+0x148>)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4413      	add	r3, r2
 800077c:	2201      	movs	r2, #1
 800077e:	701a      	strb	r2, [r3, #0]
 8000780:	e013      	b.n	80007aa <button_reading+0x10a>
				}
			}

			else {
				counterForButtonPress1s[i] = 0;
 8000782:	4a18      	ldr	r2, [pc, #96]	; (80007e4 <button_reading+0x144>)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2100      	movs	r1, #0
 8000788:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				counterForButtonPressOneQuarterSecond[i] = 0;
 800078c:	4a12      	ldr	r2, [pc, #72]	; (80007d8 <button_reading+0x138>)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2100      	movs	r1, #0
 8000792:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[i] = 0;
 8000796:	4a14      	ldr	r2, [pc, #80]	; (80007e8 <button_reading+0x148>)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	4413      	add	r3, r2
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
				flagForButtonPressOneQuarterSecond[i] = 0;
 80007a0:	4a0f      	ldr	r2, [pc, #60]	; (80007e0 <button_reading+0x140>)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2100      	movs	r1, #0
 80007a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	3301      	adds	r3, #1
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2b03      	cmp	r3, #3
 80007b4:	f77f af7a 	ble.w	80006ac <button_reading+0xc>
			}
		}
	}
}
 80007b8:	bf00      	nop
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000110 	.word	0x20000110
 80007c8:	20000114 	.word	0x20000114
 80007cc:	20000034 	.word	0x20000034
 80007d0:	20000044 	.word	0x20000044
 80007d4:	2000010c 	.word	0x2000010c
 80007d8:	20000124 	.word	0x20000124
 80007dc:	200000f4 	.word	0x200000f4
 80007e0:	200000f8 	.word	0x200000f8
 80007e4:	2000011c 	.word	0x2000011c
 80007e8:	20000118 	.word	0x20000118

080007ec <is_button_pressed>:
// Check if a button is pressed or not
unsigned char is_button_pressed(uint8_t index) {
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	71fb      	strb	r3, [r7, #7]
	if (index >= N0_OF_BUTTONS) return 0;
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	2b03      	cmp	r3, #3
 80007fa:	d901      	bls.n	8000800 <is_button_pressed+0x14>
 80007fc:	2300      	movs	r3, #0
 80007fe:	e007      	b.n	8000810 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	4a06      	ldr	r2, [pc, #24]	; (800081c <is_button_pressed+0x30>)
 8000804:	5cd3      	ldrb	r3, [r2, r3]
 8000806:	2b00      	cmp	r3, #0
 8000808:	bf0c      	ite	eq
 800080a:	2301      	moveq	r3, #1
 800080c:	2300      	movne	r3, #0
 800080e:	b2db      	uxtb	r3, r3
}
 8000810:	4618      	mov	r0, r3
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	bc80      	pop	{r7}
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	2000010c 	.word	0x2000010c

08000820 <is_button_pressed_1s>:

// Check for button is pressed more than a second or not
unsigned char is_button_pressed_1s (unsigned char index ) {
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS ) return 0xff ;
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	2b03      	cmp	r3, #3
 800082e:	d901      	bls.n	8000834 <is_button_pressed_1s+0x14>
 8000830:	23ff      	movs	r3, #255	; 0xff
 8000832:	e007      	b.n	8000844 <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1) ;
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	4a06      	ldr	r2, [pc, #24]	; (8000850 <is_button_pressed_1s+0x30>)
 8000838:	5cd3      	ldrb	r3, [r2, r3]
 800083a:	2b01      	cmp	r3, #1
 800083c:	bf0c      	ite	eq
 800083e:	2301      	moveq	r3, #1
 8000840:	2300      	movne	r3, #0
 8000842:	b2db      	uxtb	r3, r3
}
 8000844:	4618      	mov	r0, r3
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	bc80      	pop	{r7}
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	20000118 	.word	0x20000118

08000854 <is_button_pressed_one_quarter_second>:

unsigned char is_button_pressed_one_quarter_second(unsigned char index) {
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0xff ;
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	2b03      	cmp	r3, #3
 8000862:	d901      	bls.n	8000868 <is_button_pressed_one_quarter_second+0x14>
 8000864:	23ff      	movs	r3, #255	; 0xff
 8000866:	e008      	b.n	800087a <is_button_pressed_one_quarter_second+0x26>
	return (flagForButtonPressOneQuarterSecond[index] == 1) ;
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	4a06      	ldr	r2, [pc, #24]	; (8000884 <is_button_pressed_one_quarter_second+0x30>)
 800086c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000870:	2b01      	cmp	r3, #1
 8000872:	bf0c      	ite	eq
 8000874:	2301      	moveq	r3, #1
 8000876:	2300      	movne	r3, #0
 8000878:	b2db      	uxtb	r3, r3
}
 800087a:	4618      	mov	r0, r3
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr
 8000884:	200000f8 	.word	0x200000f8

08000888 <update_buffer>:
#include "led7seg.h"
#include "global.h"
static uint8_t led7seg[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90};
static uint8_t led_buffer[4] = {0};
//static uint8_t man_led_buffer[3] = {0};
void update_buffer() {
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
	if (light_time1 >= 10) {
 800088c:	4b29      	ldr	r3, [pc, #164]	; (8000934 <update_buffer+0xac>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2b09      	cmp	r3, #9
 8000892:	dd1b      	ble.n	80008cc <update_buffer+0x44>
		led_buffer[0] = light_time1 / 10;
 8000894:	4b27      	ldr	r3, [pc, #156]	; (8000934 <update_buffer+0xac>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a27      	ldr	r2, [pc, #156]	; (8000938 <update_buffer+0xb0>)
 800089a:	fb82 1203 	smull	r1, r2, r2, r3
 800089e:	1092      	asrs	r2, r2, #2
 80008a0:	17db      	asrs	r3, r3, #31
 80008a2:	1ad3      	subs	r3, r2, r3
 80008a4:	b2da      	uxtb	r2, r3
 80008a6:	4b25      	ldr	r3, [pc, #148]	; (800093c <update_buffer+0xb4>)
 80008a8:	701a      	strb	r2, [r3, #0]
		led_buffer[1] = light_time1 % 10;
 80008aa:	4b22      	ldr	r3, [pc, #136]	; (8000934 <update_buffer+0xac>)
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	4b22      	ldr	r3, [pc, #136]	; (8000938 <update_buffer+0xb0>)
 80008b0:	fb83 1302 	smull	r1, r3, r3, r2
 80008b4:	1099      	asrs	r1, r3, #2
 80008b6:	17d3      	asrs	r3, r2, #31
 80008b8:	1ac9      	subs	r1, r1, r3
 80008ba:	460b      	mov	r3, r1
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	440b      	add	r3, r1
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	1ad1      	subs	r1, r2, r3
 80008c4:	b2ca      	uxtb	r2, r1
 80008c6:	4b1d      	ldr	r3, [pc, #116]	; (800093c <update_buffer+0xb4>)
 80008c8:	705a      	strb	r2, [r3, #1]
 80008ca:	e007      	b.n	80008dc <update_buffer+0x54>
	} else {
		led_buffer[0] = 0;
 80008cc:	4b1b      	ldr	r3, [pc, #108]	; (800093c <update_buffer+0xb4>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	701a      	strb	r2, [r3, #0]
		led_buffer[1] = light_time1;
 80008d2:	4b18      	ldr	r3, [pc, #96]	; (8000934 <update_buffer+0xac>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	b2da      	uxtb	r2, r3
 80008d8:	4b18      	ldr	r3, [pc, #96]	; (800093c <update_buffer+0xb4>)
 80008da:	705a      	strb	r2, [r3, #1]
	}

	if (light_time >= 10) {
 80008dc:	4b18      	ldr	r3, [pc, #96]	; (8000940 <update_buffer+0xb8>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2b09      	cmp	r3, #9
 80008e2:	dd1b      	ble.n	800091c <update_buffer+0x94>
		led_buffer[2] = light_time / 10;
 80008e4:	4b16      	ldr	r3, [pc, #88]	; (8000940 <update_buffer+0xb8>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a13      	ldr	r2, [pc, #76]	; (8000938 <update_buffer+0xb0>)
 80008ea:	fb82 1203 	smull	r1, r2, r2, r3
 80008ee:	1092      	asrs	r2, r2, #2
 80008f0:	17db      	asrs	r3, r3, #31
 80008f2:	1ad3      	subs	r3, r2, r3
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <update_buffer+0xb4>)
 80008f8:	709a      	strb	r2, [r3, #2]
		led_buffer[3] = light_time % 10;
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <update_buffer+0xb8>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <update_buffer+0xb0>)
 8000900:	fb83 1302 	smull	r1, r3, r3, r2
 8000904:	1099      	asrs	r1, r3, #2
 8000906:	17d3      	asrs	r3, r2, #31
 8000908:	1ac9      	subs	r1, r1, r3
 800090a:	460b      	mov	r3, r1
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	440b      	add	r3, r1
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	1ad1      	subs	r1, r2, r3
 8000914:	b2ca      	uxtb	r2, r1
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <update_buffer+0xb4>)
 8000918:	70da      	strb	r2, [r3, #3]
	} else {
		led_buffer[2] = 0;
		led_buffer[3] = light_time;
	}
}
 800091a:	e007      	b.n	800092c <update_buffer+0xa4>
		led_buffer[2] = 0;
 800091c:	4b07      	ldr	r3, [pc, #28]	; (800093c <update_buffer+0xb4>)
 800091e:	2200      	movs	r2, #0
 8000920:	709a      	strb	r2, [r3, #2]
		led_buffer[3] = light_time;
 8000922:	4b07      	ldr	r3, [pc, #28]	; (8000940 <update_buffer+0xb8>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	b2da      	uxtb	r2, r3
 8000928:	4b04      	ldr	r3, [pc, #16]	; (800093c <update_buffer+0xb4>)
 800092a:	70da      	strb	r2, [r3, #3]
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr
 8000934:	20000024 	.word	0x20000024
 8000938:	66666667 	.word	0x66666667
 800093c:	2000012c 	.word	0x2000012c
 8000940:	20000020 	.word	0x20000020

08000944 <led_init>:

void led_init() {
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
	GPIOB->BSRR = 0x3F00;
 8000948:	4b03      	ldr	r3, [pc, #12]	; (8000958 <led_init+0x14>)
 800094a:	f44f 527c 	mov.w	r2, #16128	; 0x3f00
 800094e:	611a      	str	r2, [r3, #16]
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr
 8000958:	40010c00 	.word	0x40010c00

0800095c <update7SEG>:

void led_clear() {
	HAL_GPIO_WritePin(GPIOA, D1_Pin | D2_Pin | D3_Pin | D4_Pin | D5_Pin | D6_Pin, 1);
}

void update7SEG(int index){
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2b03      	cmp	r3, #3
 8000968:	d872      	bhi.n	8000a50 <update7SEG+0xf4>
 800096a:	a201      	add	r2, pc, #4	; (adr r2, 8000970 <update7SEG+0x14>)
 800096c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000970:	08000981 	.word	0x08000981
 8000974:	080009b5 	.word	0x080009b5
 8000978:	080009e9 	.word	0x080009e9
 800097c:	08000a1d 	.word	0x08000a1d
	switch(index) {
		case 0:
			HAL_GPIO_WritePin(GPIOA, EN0_Pin, ON_7SEG); // turn on the first SEG
 8000980:	2201      	movs	r2, #1
 8000982:	2110      	movs	r1, #16
 8000984:	4835      	ldr	r0, [pc, #212]	; (8000a5c <update7SEG+0x100>)
 8000986:	f001 fb26 	bl	8001fd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin, OFF_7SEG); // turn off the second SEG
 800098a:	2200      	movs	r2, #0
 800098c:	2120      	movs	r1, #32
 800098e:	4833      	ldr	r0, [pc, #204]	; (8000a5c <update7SEG+0x100>)
 8000990:	f001 fb21 	bl	8001fd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin, OFF_7SEG); // turn off the third SEG
 8000994:	2200      	movs	r2, #0
 8000996:	2140      	movs	r1, #64	; 0x40
 8000998:	4830      	ldr	r0, [pc, #192]	; (8000a5c <update7SEG+0x100>)
 800099a:	f001 fb1c 	bl	8001fd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin, OFF_7SEG); // turn off the fourth SEG
 800099e:	2200      	movs	r2, #0
 80009a0:	2180      	movs	r1, #128	; 0x80
 80009a2:	482e      	ldr	r0, [pc, #184]	; (8000a5c <update7SEG+0x100>)
 80009a4:	f001 fb17 	bl	8001fd6 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[0]);
 80009a8:	4b2d      	ldr	r3, [pc, #180]	; (8000a60 <update7SEG+0x104>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	4618      	mov	r0, r3
 80009ae:	f000 f859 	bl	8000a64 <display7SEG>
			break;
 80009b2:	e04e      	b.n	8000a52 <update7SEG+0xf6>
		case 1:
			HAL_GPIO_WritePin(GPIOA, EN0_Pin, OFF_7SEG); // turn off the first SEG
 80009b4:	2200      	movs	r2, #0
 80009b6:	2110      	movs	r1, #16
 80009b8:	4828      	ldr	r0, [pc, #160]	; (8000a5c <update7SEG+0x100>)
 80009ba:	f001 fb0c 	bl	8001fd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin, ON_7SEG); // turn on the second SEG
 80009be:	2201      	movs	r2, #1
 80009c0:	2120      	movs	r1, #32
 80009c2:	4826      	ldr	r0, [pc, #152]	; (8000a5c <update7SEG+0x100>)
 80009c4:	f001 fb07 	bl	8001fd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin, OFF_7SEG); // turn off the third SEG
 80009c8:	2200      	movs	r2, #0
 80009ca:	2140      	movs	r1, #64	; 0x40
 80009cc:	4823      	ldr	r0, [pc, #140]	; (8000a5c <update7SEG+0x100>)
 80009ce:	f001 fb02 	bl	8001fd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin, OFF_7SEG); // turn off the fourth SEG
 80009d2:	2200      	movs	r2, #0
 80009d4:	2180      	movs	r1, #128	; 0x80
 80009d6:	4821      	ldr	r0, [pc, #132]	; (8000a5c <update7SEG+0x100>)
 80009d8:	f001 fafd 	bl	8001fd6 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[1]);
 80009dc:	4b20      	ldr	r3, [pc, #128]	; (8000a60 <update7SEG+0x104>)
 80009de:	785b      	ldrb	r3, [r3, #1]
 80009e0:	4618      	mov	r0, r3
 80009e2:	f000 f83f 	bl	8000a64 <display7SEG>
			break;
 80009e6:	e034      	b.n	8000a52 <update7SEG+0xf6>
		case 2:
			HAL_GPIO_WritePin(GPIOA, EN0_Pin, OFF_7SEG); // turn off the first SEG
 80009e8:	2200      	movs	r2, #0
 80009ea:	2110      	movs	r1, #16
 80009ec:	481b      	ldr	r0, [pc, #108]	; (8000a5c <update7SEG+0x100>)
 80009ee:	f001 faf2 	bl	8001fd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin, OFF_7SEG); // turn off the second SEG
 80009f2:	2200      	movs	r2, #0
 80009f4:	2120      	movs	r1, #32
 80009f6:	4819      	ldr	r0, [pc, #100]	; (8000a5c <update7SEG+0x100>)
 80009f8:	f001 faed 	bl	8001fd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin, ON_7SEG); // turn on the third SEG
 80009fc:	2201      	movs	r2, #1
 80009fe:	2140      	movs	r1, #64	; 0x40
 8000a00:	4816      	ldr	r0, [pc, #88]	; (8000a5c <update7SEG+0x100>)
 8000a02:	f001 fae8 	bl	8001fd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin, OFF_7SEG); // turn off the fourth SEG
 8000a06:	2200      	movs	r2, #0
 8000a08:	2180      	movs	r1, #128	; 0x80
 8000a0a:	4814      	ldr	r0, [pc, #80]	; (8000a5c <update7SEG+0x100>)
 8000a0c:	f001 fae3 	bl	8001fd6 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[2]);
 8000a10:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <update7SEG+0x104>)
 8000a12:	789b      	ldrb	r3, [r3, #2]
 8000a14:	4618      	mov	r0, r3
 8000a16:	f000 f825 	bl	8000a64 <display7SEG>
			break;
 8000a1a:	e01a      	b.n	8000a52 <update7SEG+0xf6>
		case 3:
			HAL_GPIO_WritePin(GPIOA, EN0_Pin, OFF_7SEG); // turn off the first SEG
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2110      	movs	r1, #16
 8000a20:	480e      	ldr	r0, [pc, #56]	; (8000a5c <update7SEG+0x100>)
 8000a22:	f001 fad8 	bl	8001fd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin, OFF_7SEG); // turn off the second SEG
 8000a26:	2200      	movs	r2, #0
 8000a28:	2120      	movs	r1, #32
 8000a2a:	480c      	ldr	r0, [pc, #48]	; (8000a5c <update7SEG+0x100>)
 8000a2c:	f001 fad3 	bl	8001fd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin, OFF_7SEG); // turn off the third SEG
 8000a30:	2200      	movs	r2, #0
 8000a32:	2140      	movs	r1, #64	; 0x40
 8000a34:	4809      	ldr	r0, [pc, #36]	; (8000a5c <update7SEG+0x100>)
 8000a36:	f001 face 	bl	8001fd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin, ON_7SEG); // turn on the fourth SEG
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	2180      	movs	r1, #128	; 0x80
 8000a3e:	4807      	ldr	r0, [pc, #28]	; (8000a5c <update7SEG+0x100>)
 8000a40:	f001 fac9 	bl	8001fd6 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[3]);
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <update7SEG+0x104>)
 8000a46:	78db      	ldrb	r3, [r3, #3]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f000 f80b 	bl	8000a64 <display7SEG>
			break;
 8000a4e:	e000      	b.n	8000a52 <update7SEG+0xf6>
		default:
			break;
 8000a50:	bf00      	nop
	}
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40010800 	.word	0x40010800
 8000a60:	2000012c 	.word	0x2000012c

08000a64 <display7SEG>:
void display7SEG(int num) {
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	GPIOB->BRR= 0xFF;
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <display7SEG+0x24>)
 8000a6e:	22ff      	movs	r2, #255	; 0xff
 8000a70:	615a      	str	r2, [r3, #20]
	GPIOB->BSRR = led7seg[num];
 8000a72:	4a06      	ldr	r2, [pc, #24]	; (8000a8c <display7SEG+0x28>)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4413      	add	r3, r2
 8000a78:	781a      	ldrb	r2, [r3, #0]
 8000a7a:	4b03      	ldr	r3, [pc, #12]	; (8000a88 <display7SEG+0x24>)
 8000a7c:	611a      	str	r2, [r3, #16]
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr
 8000a88:	40010c00 	.word	0x40010c00
 8000a8c:	2000004c 	.word	0x2000004c

08000a90 <displayMode>:

void displayMode() {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
	update_buffer();
 8000a94:	f7ff fef8 	bl	8000888 <update_buffer>
	if (index_led >= 4) index_led = 0;
 8000a98:	4b08      	ldr	r3, [pc, #32]	; (8000abc <displayMode+0x2c>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b03      	cmp	r3, #3
 8000a9e:	dd02      	ble.n	8000aa6 <displayMode+0x16>
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <displayMode+0x2c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
	update7SEG(index_led++);
 8000aa6:	4b05      	ldr	r3, [pc, #20]	; (8000abc <displayMode+0x2c>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	1c5a      	adds	r2, r3, #1
 8000aac:	4903      	ldr	r1, [pc, #12]	; (8000abc <displayMode+0x2c>)
 8000aae:	600a      	str	r2, [r1, #0]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff ff53 	bl	800095c <update7SEG>
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	200000f0 	.word	0x200000f0

08000ac0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac4:	f000 fed4 	bl	8001870 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac8:	f000 f832 	bl	8000b30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000acc:	f000 f8e2 	bl	8000c94 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000ad0:	f000 f86a 	bl	8000ba8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000ad4:	f000 f8b4 	bl	8000c40 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2) ;
 8000ad8:	4812      	ldr	r0, [pc, #72]	; (8000b24 <main+0x64>)
 8000ada:	f001 ff0b 	bl	80028f4 <HAL_TIM_Base_Start_IT>
   //led7SEG_init();
   GPIOA->BRR=0xFF;
 8000ade:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <main+0x68>)
 8000ae0:	22ff      	movs	r2, #255	; 0xff
 8000ae2:	615a      	str	r2, [r3, #20]
   led_init();
 8000ae4:	f7ff ff2e 	bl	8000944 <led_init>
   traffic_init();
 8000ae8:	f000 fbc0 	bl	800126c <traffic_init>
   setTimer1(2);
 8000aec:	2002      	movs	r0, #2
 8000aee:	f000 f94f 	bl	8000d90 <setTimer1>
   setTimer2(DURATION_1S);
 8000af2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000af6:	f000 f965 	bl	8000dc4 <setTimer2>
   setTimer3(DURATION_1S);
 8000afa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000afe:	f000 f97b 	bl	8000df8 <setTimer3>
   setTimer4(DURATION_1S);
 8000b02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b06:	f000 f991 	bl	8000e2c <setTimer4>
   setTimer5(250);
 8000b0a:	20fa      	movs	r0, #250	; 0xfa
 8000b0c:	f000 f9a8 	bl	8000e60 <setTimer5>
   printf("The system is in MODE '1 - NORMAL_MODE' \r\n");
 8000b10:	4806      	ldr	r0, [pc, #24]	; (8000b2c <main+0x6c>)
 8000b12:	f003 f94b 	bl	8003dac <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  traffic_light_processing();
 8000b16:	f000 fe33 	bl	8001780 <traffic_light_processing>
	  fsm_for_input_processing();
 8000b1a:	f7ff fd45 	bl	80005a8 <fsm_for_input_processing>
	  displayMode();
 8000b1e:	f7ff ffb7 	bl	8000a90 <displayMode>
	  traffic_light_processing();
 8000b22:	e7f8      	b.n	8000b16 <main+0x56>
 8000b24:	20000164 	.word	0x20000164
 8000b28:	40010800 	.word	0x40010800
 8000b2c:	08004714 	.word	0x08004714

08000b30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b090      	sub	sp, #64	; 0x40
 8000b34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b36:	f107 0318 	add.w	r3, r7, #24
 8000b3a:	2228      	movs	r2, #40	; 0x28
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f003 f8be 	bl	8003cc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
 8000b50:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b52:	2302      	movs	r3, #2
 8000b54:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b56:	2301      	movs	r3, #1
 8000b58:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b5a:	2310      	movs	r3, #16
 8000b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b62:	f107 0318 	add.w	r3, r7, #24
 8000b66:	4618      	mov	r0, r3
 8000b68:	f001 fa66 	bl	8002038 <HAL_RCC_OscConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000b72:	f000 f8f1 	bl	8000d58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b76:	230f      	movs	r3, #15
 8000b78:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f001 fcd2 	bl	8002538 <HAL_RCC_ClockConfig>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b9a:	f000 f8dd 	bl	8000d58 <Error_Handler>
  }
}
 8000b9e:	bf00      	nop
 8000ba0:	3740      	adds	r7, #64	; 0x40
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
	...

08000ba8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bae:	f107 0308 	add.w	r3, r7, #8
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bbc:	463b      	mov	r3, r7
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bc4:	4b1d      	ldr	r3, [pc, #116]	; (8000c3c <MX_TIM2_Init+0x94>)
 8000bc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000bcc:	4b1b      	ldr	r3, [pc, #108]	; (8000c3c <MX_TIM2_Init+0x94>)
 8000bce:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000bd2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd4:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <MX_TIM2_Init+0x94>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000bda:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <MX_TIM2_Init+0x94>)
 8000bdc:	2209      	movs	r2, #9
 8000bde:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be0:	4b16      	ldr	r3, [pc, #88]	; (8000c3c <MX_TIM2_Init+0x94>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be6:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <MX_TIM2_Init+0x94>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bec:	4813      	ldr	r0, [pc, #76]	; (8000c3c <MX_TIM2_Init+0x94>)
 8000bee:	f001 fe31 	bl	8002854 <HAL_TIM_Base_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000bf8:	f000 f8ae 	bl	8000d58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c02:	f107 0308 	add.w	r3, r7, #8
 8000c06:	4619      	mov	r1, r3
 8000c08:	480c      	ldr	r0, [pc, #48]	; (8000c3c <MX_TIM2_Init+0x94>)
 8000c0a:	f001 ffc7 	bl	8002b9c <HAL_TIM_ConfigClockSource>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c14:	f000 f8a0 	bl	8000d58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c20:	463b      	mov	r3, r7
 8000c22:	4619      	mov	r1, r3
 8000c24:	4805      	ldr	r0, [pc, #20]	; (8000c3c <MX_TIM2_Init+0x94>)
 8000c26:	f002 f993 	bl	8002f50 <HAL_TIMEx_MasterConfigSynchronization>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c30:	f000 f892 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c34:	bf00      	nop
 8000c36:	3718      	adds	r7, #24
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000164 	.word	0x20000164

08000c40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c44:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <MX_USART2_UART_Init+0x4c>)
 8000c46:	4a12      	ldr	r2, [pc, #72]	; (8000c90 <MX_USART2_UART_Init+0x50>)
 8000c48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000c4a:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <MX_USART2_UART_Init+0x4c>)
 8000c4c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <MX_USART2_UART_Init+0x4c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c58:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <MX_USART2_UART_Init+0x4c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c5e:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <MX_USART2_UART_Init+0x4c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c64:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <MX_USART2_UART_Init+0x4c>)
 8000c66:	220c      	movs	r2, #12
 8000c68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c6a:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <MX_USART2_UART_Init+0x4c>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <MX_USART2_UART_Init+0x4c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c76:	4805      	ldr	r0, [pc, #20]	; (8000c8c <MX_USART2_UART_Init+0x4c>)
 8000c78:	f002 f9d4 	bl	8003024 <HAL_UART_Init>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c82:	f000 f869 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200001ac 	.word	0x200001ac
 8000c90:	40004400 	.word	0x40004400

08000c94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9a:	f107 0308 	add.w	r3, r7, #8
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca8:	4b28      	ldr	r3, [pc, #160]	; (8000d4c <MX_GPIO_Init+0xb8>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	4a27      	ldr	r2, [pc, #156]	; (8000d4c <MX_GPIO_Init+0xb8>)
 8000cae:	f043 0304 	orr.w	r3, r3, #4
 8000cb2:	6193      	str	r3, [r2, #24]
 8000cb4:	4b25      	ldr	r3, [pc, #148]	; (8000d4c <MX_GPIO_Init+0xb8>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	f003 0304 	and.w	r3, r3, #4
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc0:	4b22      	ldr	r3, [pc, #136]	; (8000d4c <MX_GPIO_Init+0xb8>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	4a21      	ldr	r2, [pc, #132]	; (8000d4c <MX_GPIO_Init+0xb8>)
 8000cc6:	f043 0308 	orr.w	r3, r3, #8
 8000cca:	6193      	str	r3, [r2, #24]
 8000ccc:	4b1f      	ldr	r3, [pc, #124]	; (8000d4c <MX_GPIO_Init+0xb8>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	f003 0308 	and.w	r3, r3, #8
 8000cd4:	603b      	str	r3, [r7, #0]
 8000cd6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	21f0      	movs	r1, #240	; 0xf0
 8000cdc:	481c      	ldr	r0, [pc, #112]	; (8000d50 <MX_GPIO_Init+0xbc>)
 8000cde:	f001 f97a 	bl	8001fd6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|D3_Pin
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8000ce8:	481a      	ldr	r0, [pc, #104]	; (8000d54 <MX_GPIO_Init+0xc0>)
 8000cea:	f001 f974 	bl	8001fd6 <HAL_GPIO_WritePin>
                          |D4_Pin|D5_Pin|D6_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|D0_Pin
                          |D1_Pin|D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin;
 8000cee:	23f0      	movs	r3, #240	; 0xf0
 8000cf0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfe:	f107 0308 	add.w	r3, r7, #8
 8000d02:	4619      	mov	r1, r3
 8000d04:	4812      	ldr	r0, [pc, #72]	; (8000d50 <MX_GPIO_Init+0xbc>)
 8000d06:	f000 ffd5 	bl	8001cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin D3_Pin
                           D4_Pin D5_Pin D6_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin D0_Pin
                           D1_Pin D2_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|D3_Pin
 8000d0a:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000d0e:	60bb      	str	r3, [r7, #8]
                          |D4_Pin|D5_Pin|D6_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|D0_Pin
                          |D1_Pin|D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d10:	2301      	movs	r3, #1
 8000d12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1c:	f107 0308 	add.w	r3, r7, #8
 8000d20:	4619      	mov	r1, r3
 8000d22:	480c      	ldr	r0, [pc, #48]	; (8000d54 <MX_GPIO_Init+0xc0>)
 8000d24:	f000 ffc6 	bl	8001cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_Pin ADD_Pin CONFIRM_Pin RESET_Pin */
  GPIO_InitStruct.Pin = MODE_Pin|ADD_Pin|CONFIRM_Pin|RESET_Pin;
 8000d28:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000d2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d32:	2301      	movs	r3, #1
 8000d34:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d36:	f107 0308 	add.w	r3, r7, #8
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4804      	ldr	r0, [pc, #16]	; (8000d50 <MX_GPIO_Init+0xbc>)
 8000d3e:	f000 ffb9 	bl	8001cb4 <HAL_GPIO_Init>

}
 8000d42:	bf00      	nop
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	40010800 	.word	0x40010800
 8000d54:	40010c00 	.word	0x40010c00

08000d58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d5c:	b672      	cpsid	i
}
 8000d5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <Error_Handler+0x8>
	...

08000d64 <_write>:
#include "output_display.h"

extern UART_HandleTypeDef huart2;

int _write(int file, char *ptr, int len)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	b29a      	uxth	r2, r3
 8000d74:	f04f 33ff 	mov.w	r3, #4294967295
 8000d78:	68b9      	ldr	r1, [r7, #8]
 8000d7a:	4804      	ldr	r0, [pc, #16]	; (8000d8c <_write+0x28>)
 8000d7c:	f002 f9a2 	bl	80030c4 <HAL_UART_Transmit>
	return len;
 8000d80:	687b      	ldr	r3, [r7, #4]
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	200001ac 	.word	0x200001ac

08000d90 <setTimer1>:
int timer3_counter = 0;
int timer4_counter = 0;
int timer5_counter = 0;

int TIMER_CYCLE = 10; // 10ms
void setTimer1(int duration) {
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 8000d98:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <setTimer1+0x28>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000da2:	4a06      	ldr	r2, [pc, #24]	; (8000dbc <setTimer1+0x2c>)
 8000da4:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <setTimer1+0x30>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000058 	.word	0x20000058
 8000dbc:	20000144 	.word	0x20000144
 8000dc0:	20000130 	.word	0x20000130

08000dc4 <setTimer2>:
void setTimer2(int duration) {
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 8000dcc:	4b07      	ldr	r3, [pc, #28]	; (8000dec <setTimer2+0x28>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000dd6:	4a06      	ldr	r2, [pc, #24]	; (8000df0 <setTimer2+0x2c>)
 8000dd8:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000dda:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <setTimer2+0x30>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
}
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bc80      	pop	{r7}
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	20000058 	.word	0x20000058
 8000df0:	20000148 	.word	0x20000148
 8000df4:	20000134 	.word	0x20000134

08000df8 <setTimer3>:
void setTimer3(int duration) {
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TIMER_CYCLE;
 8000e00:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <setTimer3+0x28>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e0a:	4a06      	ldr	r2, [pc, #24]	; (8000e24 <setTimer3+0x2c>)
 8000e0c:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <setTimer3+0x30>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bc80      	pop	{r7}
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	20000058 	.word	0x20000058
 8000e24:	2000014c 	.word	0x2000014c
 8000e28:	20000138 	.word	0x20000138

08000e2c <setTimer4>:
void setTimer4(int duration) {
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
	timer4_counter = duration / TIMER_CYCLE;
 8000e34:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <setTimer4+0x28>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e3e:	4a06      	ldr	r2, [pc, #24]	; (8000e58 <setTimer4+0x2c>)
 8000e40:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <setTimer4+0x30>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bc80      	pop	{r7}
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	20000058 	.word	0x20000058
 8000e58:	20000150 	.word	0x20000150
 8000e5c:	2000013c 	.word	0x2000013c

08000e60 <setTimer5>:

void setTimer5(int duration) {
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
	timer5_counter = duration / TIMER_CYCLE;
 8000e68:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <setTimer5+0x28>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e72:	4a06      	ldr	r2, [pc, #24]	; (8000e8c <setTimer5+0x2c>)
 8000e74:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8000e76:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <setTimer5+0x30>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	20000058 	.word	0x20000058
 8000e8c:	20000154 	.word	0x20000154
 8000e90:	20000140 	.word	0x20000140

08000e94 <timerRun>:

void timerRun() {
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 8000e98:	4b29      	ldr	r3, [pc, #164]	; (8000f40 <timerRun+0xac>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	dd0b      	ble.n	8000eb8 <timerRun+0x24>
		timer1_counter--;
 8000ea0:	4b27      	ldr	r3, [pc, #156]	; (8000f40 <timerRun+0xac>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	4a26      	ldr	r2, [pc, #152]	; (8000f40 <timerRun+0xac>)
 8000ea8:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0) {
 8000eaa:	4b25      	ldr	r3, [pc, #148]	; (8000f40 <timerRun+0xac>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	dc02      	bgt.n	8000eb8 <timerRun+0x24>
			timer1_flag = 1;
 8000eb2:	4b24      	ldr	r3, [pc, #144]	; (8000f44 <timerRun+0xb0>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter > 0) {
 8000eb8:	4b23      	ldr	r3, [pc, #140]	; (8000f48 <timerRun+0xb4>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	dd0b      	ble.n	8000ed8 <timerRun+0x44>
		timer2_counter--;
 8000ec0:	4b21      	ldr	r3, [pc, #132]	; (8000f48 <timerRun+0xb4>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	3b01      	subs	r3, #1
 8000ec6:	4a20      	ldr	r2, [pc, #128]	; (8000f48 <timerRun+0xb4>)
 8000ec8:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0) {
 8000eca:	4b1f      	ldr	r3, [pc, #124]	; (8000f48 <timerRun+0xb4>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	dc02      	bgt.n	8000ed8 <timerRun+0x44>
			timer2_flag = 1;
 8000ed2:	4b1e      	ldr	r3, [pc, #120]	; (8000f4c <timerRun+0xb8>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_counter > 0) {
 8000ed8:	4b1d      	ldr	r3, [pc, #116]	; (8000f50 <timerRun+0xbc>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	dd0b      	ble.n	8000ef8 <timerRun+0x64>
		timer3_counter--;
 8000ee0:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <timerRun+0xbc>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	3b01      	subs	r3, #1
 8000ee6:	4a1a      	ldr	r2, [pc, #104]	; (8000f50 <timerRun+0xbc>)
 8000ee8:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0) {
 8000eea:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <timerRun+0xbc>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	dc02      	bgt.n	8000ef8 <timerRun+0x64>
			timer3_flag = 1;
 8000ef2:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <timerRun+0xc0>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer4_counter > 0) {
 8000ef8:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <timerRun+0xc4>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	dd0b      	ble.n	8000f18 <timerRun+0x84>
		timer4_counter--;
 8000f00:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <timerRun+0xc4>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	3b01      	subs	r3, #1
 8000f06:	4a14      	ldr	r2, [pc, #80]	; (8000f58 <timerRun+0xc4>)
 8000f08:	6013      	str	r3, [r2, #0]
		if (timer4_counter <= 0) {
 8000f0a:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <timerRun+0xc4>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	dc02      	bgt.n	8000f18 <timerRun+0x84>
			timer4_flag = 1;
 8000f12:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <timerRun+0xc8>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer5_counter > 0) {
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <timerRun+0xcc>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	dd0b      	ble.n	8000f38 <timerRun+0xa4>
		timer5_counter--;
 8000f20:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <timerRun+0xcc>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	3b01      	subs	r3, #1
 8000f26:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <timerRun+0xcc>)
 8000f28:	6013      	str	r3, [r2, #0]
		if (timer5_counter <= 0) {
 8000f2a:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <timerRun+0xcc>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	dc02      	bgt.n	8000f38 <timerRun+0xa4>
			timer5_flag = 1;
 8000f32:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <timerRun+0xd0>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr
 8000f40:	20000144 	.word	0x20000144
 8000f44:	20000130 	.word	0x20000130
 8000f48:	20000148 	.word	0x20000148
 8000f4c:	20000134 	.word	0x20000134
 8000f50:	2000014c 	.word	0x2000014c
 8000f54:	20000138 	.word	0x20000138
 8000f58:	20000150 	.word	0x20000150
 8000f5c:	2000013c 	.word	0x2000013c
 8000f60:	20000154 	.word	0x20000154
 8000f64:	20000140 	.word	0x20000140

08000f68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f6e:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <HAL_MspInit+0x5c>)
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	4a14      	ldr	r2, [pc, #80]	; (8000fc4 <HAL_MspInit+0x5c>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	6193      	str	r3, [r2, #24]
 8000f7a:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <HAL_MspInit+0x5c>)
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f86:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <HAL_MspInit+0x5c>)
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	4a0e      	ldr	r2, [pc, #56]	; (8000fc4 <HAL_MspInit+0x5c>)
 8000f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f90:	61d3      	str	r3, [r2, #28]
 8000f92:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <HAL_MspInit+0x5c>)
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9a:	607b      	str	r3, [r7, #4]
 8000f9c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <HAL_MspInit+0x60>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <HAL_MspInit+0x60>)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	40010000 	.word	0x40010000

08000fcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fdc:	d113      	bne.n	8001006 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fde:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <HAL_TIM_Base_MspInit+0x44>)
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	4a0b      	ldr	r2, [pc, #44]	; (8001010 <HAL_TIM_Base_MspInit+0x44>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	61d3      	str	r3, [r2, #28]
 8000fea:	4b09      	ldr	r3, [pc, #36]	; (8001010 <HAL_TIM_Base_MspInit+0x44>)
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	201c      	movs	r0, #28
 8000ffc:	f000 fd71 	bl	8001ae2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001000:	201c      	movs	r0, #28
 8001002:	f000 fd8a 	bl	8001b1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001006:	bf00      	nop
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40021000 	.word	0x40021000

08001014 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	f107 0310 	add.w	r3, r7, #16
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a1f      	ldr	r2, [pc, #124]	; (80010ac <HAL_UART_MspInit+0x98>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d137      	bne.n	80010a4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001034:	4b1e      	ldr	r3, [pc, #120]	; (80010b0 <HAL_UART_MspInit+0x9c>)
 8001036:	69db      	ldr	r3, [r3, #28]
 8001038:	4a1d      	ldr	r2, [pc, #116]	; (80010b0 <HAL_UART_MspInit+0x9c>)
 800103a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800103e:	61d3      	str	r3, [r2, #28]
 8001040:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <HAL_UART_MspInit+0x9c>)
 8001042:	69db      	ldr	r3, [r3, #28]
 8001044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104c:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <HAL_UART_MspInit+0x9c>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	4a17      	ldr	r2, [pc, #92]	; (80010b0 <HAL_UART_MspInit+0x9c>)
 8001052:	f043 0304 	orr.w	r3, r3, #4
 8001056:	6193      	str	r3, [r2, #24]
 8001058:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <HAL_UART_MspInit+0x9c>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	f003 0304 	and.w	r3, r3, #4
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001064:	2304      	movs	r3, #4
 8001066:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001068:	2302      	movs	r3, #2
 800106a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800106c:	2303      	movs	r3, #3
 800106e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001070:	f107 0310 	add.w	r3, r7, #16
 8001074:	4619      	mov	r1, r3
 8001076:	480f      	ldr	r0, [pc, #60]	; (80010b4 <HAL_UART_MspInit+0xa0>)
 8001078:	f000 fe1c 	bl	8001cb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800107c:	2308      	movs	r3, #8
 800107e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001088:	f107 0310 	add.w	r3, r7, #16
 800108c:	4619      	mov	r1, r3
 800108e:	4809      	ldr	r0, [pc, #36]	; (80010b4 <HAL_UART_MspInit+0xa0>)
 8001090:	f000 fe10 	bl	8001cb4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001094:	2200      	movs	r2, #0
 8001096:	2100      	movs	r1, #0
 8001098:	2026      	movs	r0, #38	; 0x26
 800109a:	f000 fd22 	bl	8001ae2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800109e:	2026      	movs	r0, #38	; 0x26
 80010a0:	f000 fd3b 	bl	8001b1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010a4:	bf00      	nop
 80010a6:	3720      	adds	r7, #32
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40004400 	.word	0x40004400
 80010b0:	40021000 	.word	0x40021000
 80010b4:	40010800 	.word	0x40010800

080010b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010bc:	e7fe      	b.n	80010bc <NMI_Handler+0x4>

080010be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c2:	e7fe      	b.n	80010c2 <HardFault_Handler+0x4>

080010c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <MemManage_Handler+0x4>

080010ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ce:	e7fe      	b.n	80010ce <BusFault_Handler+0x4>

080010d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <UsageFault_Handler+0x4>

080010d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr

080010e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr

080010ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr

080010fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010fe:	f000 fbfd 	bl	80018fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800110c:	4802      	ldr	r0, [pc, #8]	; (8001118 <TIM2_IRQHandler+0x10>)
 800110e:	f001 fc3d 	bl	800298c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000164 	.word	0x20000164

0800111c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001120:	4802      	ldr	r0, [pc, #8]	; (800112c <USART2_IRQHandler+0x10>)
 8001122:	f002 f853 	bl	80031cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	200001ac 	.word	0x200001ac

08001130 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	e00a      	b.n	8001158 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001142:	f3af 8000 	nop.w
 8001146:	4601      	mov	r1, r0
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	1c5a      	adds	r2, r3, #1
 800114c:	60ba      	str	r2, [r7, #8]
 800114e:	b2ca      	uxtb	r2, r1
 8001150:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	3301      	adds	r3, #1
 8001156:	617b      	str	r3, [r7, #20]
 8001158:	697a      	ldr	r2, [r7, #20]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	429a      	cmp	r2, r3
 800115e:	dbf0      	blt.n	8001142 <_read+0x12>
	}

return len;
 8001160:	687b      	ldr	r3, [r7, #4]
}
 8001162:	4618      	mov	r0, r3
 8001164:	3718      	adds	r7, #24
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <_close>:
	}
	return len;
}

int _close(int file)
{
 800116a:	b480      	push	{r7}
 800116c:	b083      	sub	sp, #12
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
	return -1;
 8001172:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001176:	4618      	mov	r0, r3
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr

08001180 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001190:	605a      	str	r2, [r3, #4]
	return 0;
 8001192:	2300      	movs	r3, #0
}
 8001194:	4618      	mov	r0, r3
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr

0800119e <_isatty>:

int _isatty(int file)
{
 800119e:	b480      	push	{r7}
 80011a0:	b083      	sub	sp, #12
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
	return 1;
 80011a6:	2301      	movs	r3, #1
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr

080011b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011b2:	b480      	push	{r7}
 80011b4:	b085      	sub	sp, #20
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	60f8      	str	r0, [r7, #12]
 80011ba:	60b9      	str	r1, [r7, #8]
 80011bc:	607a      	str	r2, [r7, #4]
	return 0;
 80011be:	2300      	movs	r3, #0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr
	...

080011cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011d4:	4a14      	ldr	r2, [pc, #80]	; (8001228 <_sbrk+0x5c>)
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <_sbrk+0x60>)
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011e0:	4b13      	ldr	r3, [pc, #76]	; (8001230 <_sbrk+0x64>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d102      	bne.n	80011ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011e8:	4b11      	ldr	r3, [pc, #68]	; (8001230 <_sbrk+0x64>)
 80011ea:	4a12      	ldr	r2, [pc, #72]	; (8001234 <_sbrk+0x68>)
 80011ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <_sbrk+0x64>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4413      	add	r3, r2
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d207      	bcs.n	800120c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011fc:	f002 fd36 	bl	8003c6c <__errno>
 8001200:	4603      	mov	r3, r0
 8001202:	220c      	movs	r2, #12
 8001204:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001206:	f04f 33ff 	mov.w	r3, #4294967295
 800120a:	e009      	b.n	8001220 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <_sbrk+0x64>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001212:	4b07      	ldr	r3, [pc, #28]	; (8001230 <_sbrk+0x64>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4413      	add	r3, r2
 800121a:	4a05      	ldr	r2, [pc, #20]	; (8001230 <_sbrk+0x64>)
 800121c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800121e:	68fb      	ldr	r3, [r7, #12]
}
 8001220:	4618      	mov	r0, r3
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20002800 	.word	0x20002800
 800122c:	00000400 	.word	0x00000400
 8001230:	20000158 	.word	0x20000158
 8001234:	20000208 	.word	0x20000208

08001238 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr

08001244 <HAL_TIM_PeriodElapsedCallback>:
#include "main.h"
#include "input_processing.h"
#include "input_reading.h"
#include "software_timer.h"
#include "button.h"
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim ) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001254:	d105      	bne.n	8001262 <HAL_TIM_PeriodElapsedCallback+0x1e>
		button_reading();
 8001256:	f7ff fa23 	bl	80006a0 <button_reading>
		timerRun();
 800125a:	f7ff fe1b 	bl	8000e94 <timerRun>
		getKeyInput();
 800125e:	f7fe ff81 	bl	8000164 <getKeyInput>
	}
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <traffic_init>:
#include "input_processing.h"
#include "global.h"
#include "led7seg.h"
#include "software_timer.h"

void traffic_init() {
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
	light_time = man_green_time;
 8001270:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <traffic_init+0x34>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a0b      	ldr	r2, [pc, #44]	; (80012a4 <traffic_init+0x38>)
 8001276:	6013      	str	r3, [r2, #0]
	light_time1 = man_red_time;
 8001278:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <traffic_init+0x3c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a0b      	ldr	r2, [pc, #44]	; (80012ac <traffic_init+0x40>)
 800127e:	6013      	str	r3, [r2, #0]
	led_init();
 8001280:	f7ff fb60 	bl	8000944 <led_init>
	HAL_GPIO_WritePin(GPIOB, D1_Pin, 0); // On ROAD 1, turn on the RED light. 
 8001284:	2200      	movs	r2, #0
 8001286:	f44f 7180 	mov.w	r1, #256	; 0x100
 800128a:	4809      	ldr	r0, [pc, #36]	; (80012b0 <traffic_init+0x44>)
 800128c:	f000 fea3 	bl	8001fd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D6_Pin, 0); // On ROAD 2, turn on the GREEN light. 
 8001290:	2200      	movs	r2, #0
 8001292:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001296:	4806      	ldr	r0, [pc, #24]	; (80012b0 <traffic_init+0x44>)
 8001298:	f000 fe9d 	bl	8001fd6 <HAL_GPIO_WritePin>
}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	2000001c 	.word	0x2000001c
 80012a4:	20000020 	.word	0x20000020
 80012a8:	20000014 	.word	0x20000014
 80012ac:	20000024 	.word	0x20000024
 80012b0:	40010c00 	.word	0x40010c00

080012b4 <updateTempTime>:

void updateTempTime() {
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
	switch(status) {
 80012b8:	4b23      	ldr	r3, [pc, #140]	; (8001348 <updateTempTime+0x94>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	3b01      	subs	r3, #1
 80012be:	2b06      	cmp	r3, #6
 80012c0:	d83a      	bhi.n	8001338 <updateTempTime+0x84>
 80012c2:	a201      	add	r2, pc, #4	; (adr r2, 80012c8 <updateTempTime+0x14>)
 80012c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c8:	08001339 	.word	0x08001339
 80012cc:	08001339 	.word	0x08001339
 80012d0:	08001339 	.word	0x08001339
 80012d4:	08001339 	.word	0x08001339
 80012d8:	080012e5 	.word	0x080012e5
 80012dc:	08001301 	.word	0x08001301
 80012e0:	0800131d 	.word	0x0800131d
		case NORMAL_MODE:
			break;
		case MAN_RED_MODE:
			//light_time = man_red_time;
			if (temp_value >= 99) temp_value = 0;
 80012e4:	4b19      	ldr	r3, [pc, #100]	; (800134c <updateTempTime+0x98>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b62      	cmp	r3, #98	; 0x62
 80012ea:	dd03      	ble.n	80012f4 <updateTempTime+0x40>
 80012ec:	4b17      	ldr	r3, [pc, #92]	; (800134c <updateTempTime+0x98>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
			else temp_value++;
			break;
 80012f2:	e021      	b.n	8001338 <updateTempTime+0x84>
			else temp_value++;
 80012f4:	4b15      	ldr	r3, [pc, #84]	; (800134c <updateTempTime+0x98>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	3301      	adds	r3, #1
 80012fa:	4a14      	ldr	r2, [pc, #80]	; (800134c <updateTempTime+0x98>)
 80012fc:	6013      	str	r3, [r2, #0]
			break;
 80012fe:	e01b      	b.n	8001338 <updateTempTime+0x84>
		case MAN_AMBER_MODE:
			//temp_value = temp_value;
			if (temp_value >= 99) temp_value = 0;
 8001300:	4b12      	ldr	r3, [pc, #72]	; (800134c <updateTempTime+0x98>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b62      	cmp	r3, #98	; 0x62
 8001306:	dd03      	ble.n	8001310 <updateTempTime+0x5c>
 8001308:	4b10      	ldr	r3, [pc, #64]	; (800134c <updateTempTime+0x98>)
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
			else temp_value++;
			break;
 800130e:	e013      	b.n	8001338 <updateTempTime+0x84>
			else temp_value++;
 8001310:	4b0e      	ldr	r3, [pc, #56]	; (800134c <updateTempTime+0x98>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	3301      	adds	r3, #1
 8001316:	4a0d      	ldr	r2, [pc, #52]	; (800134c <updateTempTime+0x98>)
 8001318:	6013      	str	r3, [r2, #0]
			break;
 800131a:	e00d      	b.n	8001338 <updateTempTime+0x84>
		case MAN_GREEN_MODE:
			//light_time = man_green_time;
			if (temp_value >= 99) temp_value = 0;
 800131c:	4b0b      	ldr	r3, [pc, #44]	; (800134c <updateTempTime+0x98>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b62      	cmp	r3, #98	; 0x62
 8001322:	dd03      	ble.n	800132c <updateTempTime+0x78>
 8001324:	4b09      	ldr	r3, [pc, #36]	; (800134c <updateTempTime+0x98>)
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
			else temp_value++;
			break;
 800132a:	e004      	b.n	8001336 <updateTempTime+0x82>
			else temp_value++;
 800132c:	4b07      	ldr	r3, [pc, #28]	; (800134c <updateTempTime+0x98>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	3301      	adds	r3, #1
 8001332:	4a06      	ldr	r2, [pc, #24]	; (800134c <updateTempTime+0x98>)
 8001334:	6013      	str	r3, [r2, #0]
			break;
 8001336:	bf00      	nop
	}
	light_time = temp_value;
 8001338:	4b04      	ldr	r3, [pc, #16]	; (800134c <updateTempTime+0x98>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a04      	ldr	r2, [pc, #16]	; (8001350 <updateTempTime+0x9c>)
 800133e:	6013      	str	r3, [r2, #0]
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr
 8001348:	20000028 	.word	0x20000028
 800134c:	200000ec 	.word	0x200000ec
 8001350:	20000020 	.word	0x20000020

08001354 <confirmAdjustedTime>:

void confirmAdjustedTime() {
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
	printf("Confirmed adjust time!\r\n");
 8001358:	481b      	ldr	r0, [pc, #108]	; (80013c8 <confirmAdjustedTime+0x74>)
 800135a:	f002 fd27 	bl	8003dac <puts>
	switch(status) {
 800135e:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <confirmAdjustedTime+0x78>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	3b01      	subs	r3, #1
 8001364:	2b06      	cmp	r3, #6
 8001366:	d82c      	bhi.n	80013c2 <confirmAdjustedTime+0x6e>
 8001368:	a201      	add	r2, pc, #4	; (adr r2, 8001370 <confirmAdjustedTime+0x1c>)
 800136a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800136e:	bf00      	nop
 8001370:	080013c3 	.word	0x080013c3
 8001374:	080013c3 	.word	0x080013c3
 8001378:	080013c3 	.word	0x080013c3
 800137c:	080013c3 	.word	0x080013c3
 8001380:	0800138d 	.word	0x0800138d
 8001384:	0800139f 	.word	0x0800139f
 8001388:	080013b1 	.word	0x080013b1
		case NORMAL_MODE:
			//temp_value = light_time;
			break;
		case MAN_RED_MODE:
			man_red_time = temp_value;
 800138c:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <confirmAdjustedTime+0x7c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a10      	ldr	r2, [pc, #64]	; (80013d4 <confirmAdjustedTime+0x80>)
 8001392:	6013      	str	r3, [r2, #0]
			light_time = man_red_time;
 8001394:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <confirmAdjustedTime+0x80>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a0f      	ldr	r2, [pc, #60]	; (80013d8 <confirmAdjustedTime+0x84>)
 800139a:	6013      	str	r3, [r2, #0]
			break;
 800139c:	e012      	b.n	80013c4 <confirmAdjustedTime+0x70>
		case MAN_AMBER_MODE:
			man_amber_time = temp_value;
 800139e:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <confirmAdjustedTime+0x7c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a0e      	ldr	r2, [pc, #56]	; (80013dc <confirmAdjustedTime+0x88>)
 80013a4:	6013      	str	r3, [r2, #0]
			light_time = man_amber_time;
 80013a6:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <confirmAdjustedTime+0x88>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a0b      	ldr	r2, [pc, #44]	; (80013d8 <confirmAdjustedTime+0x84>)
 80013ac:	6013      	str	r3, [r2, #0]
			break;
 80013ae:	e009      	b.n	80013c4 <confirmAdjustedTime+0x70>
		case MAN_GREEN_MODE:
			man_green_time = temp_value;
 80013b0:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <confirmAdjustedTime+0x7c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a0a      	ldr	r2, [pc, #40]	; (80013e0 <confirmAdjustedTime+0x8c>)
 80013b6:	6013      	str	r3, [r2, #0]
			light_time = man_green_time;
 80013b8:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <confirmAdjustedTime+0x8c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a06      	ldr	r2, [pc, #24]	; (80013d8 <confirmAdjustedTime+0x84>)
 80013be:	6013      	str	r3, [r2, #0]
			break;
 80013c0:	e000      	b.n	80013c4 <confirmAdjustedTime+0x70>
		default:
			break;
 80013c2:	bf00      	nop
	}
}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	08004740 	.word	0x08004740
 80013cc:	20000028 	.word	0x20000028
 80013d0:	200000ec 	.word	0x200000ec
 80013d4:	20000014 	.word	0x20000014
 80013d8:	20000020 	.word	0x20000020
 80013dc:	20000018 	.word	0x20000018
 80013e0:	2000001c 	.word	0x2000001c

080013e4 <resetToTheDefaultSetting>:

void resetToTheDefaultSetting() {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
	// default settings
	printf("All settings have been reset!\r\n");
 80013e8:	4810      	ldr	r0, [pc, #64]	; (800142c <resetToTheDefaultSetting+0x48>)
 80013ea:	f002 fcdf 	bl	8003dac <puts>
	printf("The system is in MODE '1 - NORMAL_MODE' \r\n");
 80013ee:	4810      	ldr	r0, [pc, #64]	; (8001430 <resetToTheDefaultSetting+0x4c>)
 80013f0:	f002 fcdc 	bl	8003dac <puts>
	man_red_time = RED_TIME / 100;
 80013f4:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <resetToTheDefaultSetting+0x50>)
 80013f6:	2205      	movs	r2, #5
 80013f8:	601a      	str	r2, [r3, #0]
	man_amber_time = YELLOW_TIME / 100;
 80013fa:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <resetToTheDefaultSetting+0x54>)
 80013fc:	2202      	movs	r2, #2
 80013fe:	601a      	str	r2, [r3, #0]
	man_green_time = GREEN_TIME / 100;
 8001400:	4b0e      	ldr	r3, [pc, #56]	; (800143c <resetToTheDefaultSetting+0x58>)
 8001402:	2203      	movs	r2, #3
 8001404:	601a      	str	r2, [r3, #0]
	status = NORMAL_MODE;
 8001406:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <resetToTheDefaultSetting+0x5c>)
 8001408:	2201      	movs	r2, #1
 800140a:	601a      	str	r2, [r3, #0]
	led_status1 = INIT_TRAFFIC_LIGHT;
 800140c:	4b0d      	ldr	r3, [pc, #52]	; (8001444 <resetToTheDefaultSetting+0x60>)
 800140e:	2213      	movs	r2, #19
 8001410:	601a      	str	r2, [r3, #0]
	led_status2 = INIT_TRAFFIC_LIGHT;
 8001412:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <resetToTheDefaultSetting+0x64>)
 8001414:	2213      	movs	r2, #19
 8001416:	601a      	str	r2, [r3, #0]

	index_led = 0;
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <resetToTheDefaultSetting+0x68>)
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
	temp_value = 0;
 800141e:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <resetToTheDefaultSetting+0x6c>)
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
	// re-initialize traffic light with default settings
	traffic_init();
 8001424:	f7ff ff22 	bl	800126c <traffic_init>
}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}
 800142c:	08004758 	.word	0x08004758
 8001430:	08004778 	.word	0x08004778
 8001434:	20000014 	.word	0x20000014
 8001438:	20000018 	.word	0x20000018
 800143c:	2000001c 	.word	0x2000001c
 8001440:	20000028 	.word	0x20000028
 8001444:	2000002c 	.word	0x2000002c
 8001448:	20000030 	.word	0x20000030
 800144c:	200000f0 	.word	0x200000f0
 8001450:	200000ec 	.word	0x200000ec

08001454 <normal_running_traffic_light>:

void normal_running_traffic_light() {
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
	switch(led_status1) {
 8001458:	4ba2      	ldr	r3, [pc, #648]	; (80016e4 <normal_running_traffic_light+0x290>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	3b13      	subs	r3, #19
 800145e:	2b03      	cmp	r3, #3
 8001460:	f200 80a7 	bhi.w	80015b2 <normal_running_traffic_light+0x15e>
 8001464:	a201      	add	r2, pc, #4	; (adr r2, 800146c <normal_running_traffic_light+0x18>)
 8001466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800146a:	bf00      	nop
 800146c:	0800147d 	.word	0x0800147d
 8001470:	080014d5 	.word	0x080014d5
 8001474:	0800151f 	.word	0x0800151f
 8001478:	08001569 	.word	0x08001569
		case INIT_TRAFFIC_LIGHT:
			if (timer3_flag == 1) {
 800147c:	4b9a      	ldr	r3, [pc, #616]	; (80016e8 <normal_running_traffic_light+0x294>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b01      	cmp	r3, #1
 8001482:	f040 8098 	bne.w	80015b6 <normal_running_traffic_light+0x162>
//				traffic_init();
				HAL_GPIO_WritePin(GPIOB, D1_Pin, 0); // On ROAD 1, turn on the RED light. 
 8001486:	2200      	movs	r2, #0
 8001488:	f44f 7180 	mov.w	r1, #256	; 0x100
 800148c:	4897      	ldr	r0, [pc, #604]	; (80016ec <normal_running_traffic_light+0x298>)
 800148e:	f000 fda2 	bl	8001fd6 <HAL_GPIO_WritePin>
				light_time1--;
 8001492:	4b97      	ldr	r3, [pc, #604]	; (80016f0 <normal_running_traffic_light+0x29c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	3b01      	subs	r3, #1
 8001498:	4a95      	ldr	r2, [pc, #596]	; (80016f0 <normal_running_traffic_light+0x29c>)
 800149a:	6013      	str	r3, [r2, #0]
				if (light_time1 == 0) {
 800149c:	4b94      	ldr	r3, [pc, #592]	; (80016f0 <normal_running_traffic_light+0x29c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d112      	bne.n	80014ca <normal_running_traffic_light+0x76>
					led_status1 = RED_ROAD1;
 80014a4:	4b8f      	ldr	r3, [pc, #572]	; (80016e4 <normal_running_traffic_light+0x290>)
 80014a6:	2214      	movs	r2, #20
 80014a8:	601a      	str	r2, [r3, #0]
					light_time1 = man_green_time; // Road 1
 80014aa:	4b92      	ldr	r3, [pc, #584]	; (80016f4 <normal_running_traffic_light+0x2a0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a90      	ldr	r2, [pc, #576]	; (80016f0 <normal_running_traffic_light+0x29c>)
 80014b0:	6013      	str	r3, [r2, #0]

					HAL_GPIO_WritePin(GPIOB, D1_Pin, 1); // On ROAD 1, turn off the RED light. 
 80014b2:	2201      	movs	r2, #1
 80014b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014b8:	488c      	ldr	r0, [pc, #560]	; (80016ec <normal_running_traffic_light+0x298>)
 80014ba:	f000 fd8c 	bl	8001fd6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, D3_Pin, 0); // On ROAD 1, turn on the GREEN light. 
 80014be:	2200      	movs	r2, #0
 80014c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014c4:	4889      	ldr	r0, [pc, #548]	; (80016ec <normal_running_traffic_light+0x298>)
 80014c6:	f000 fd86 	bl	8001fd6 <HAL_GPIO_WritePin>
				}
				setTimer3(DURATION_1S);
 80014ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014ce:	f7ff fc93 	bl	8000df8 <setTimer3>
			}
			break;
 80014d2:	e070      	b.n	80015b6 <normal_running_traffic_light+0x162>
		case RED_ROAD1:
				if (timer3_flag == 1) {
 80014d4:	4b84      	ldr	r3, [pc, #528]	; (80016e8 <normal_running_traffic_light+0x294>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d16e      	bne.n	80015ba <normal_running_traffic_light+0x166>
					light_time1--;
 80014dc:	4b84      	ldr	r3, [pc, #528]	; (80016f0 <normal_running_traffic_light+0x29c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	3b01      	subs	r3, #1
 80014e2:	4a83      	ldr	r2, [pc, #524]	; (80016f0 <normal_running_traffic_light+0x29c>)
 80014e4:	6013      	str	r3, [r2, #0]
					if (light_time1 == 0) {
 80014e6:	4b82      	ldr	r3, [pc, #520]	; (80016f0 <normal_running_traffic_light+0x29c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d112      	bne.n	8001514 <normal_running_traffic_light+0xc0>
						led_status1 = GREEN_ROAD1;
 80014ee:	4b7d      	ldr	r3, [pc, #500]	; (80016e4 <normal_running_traffic_light+0x290>)
 80014f0:	2215      	movs	r2, #21
 80014f2:	601a      	str	r2, [r3, #0]
						light_time1 = man_amber_time; // Road 1
 80014f4:	4b80      	ldr	r3, [pc, #512]	; (80016f8 <normal_running_traffic_light+0x2a4>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a7d      	ldr	r2, [pc, #500]	; (80016f0 <normal_running_traffic_light+0x29c>)
 80014fa:	6013      	str	r3, [r2, #0]

						HAL_GPIO_WritePin(GPIOB, D3_Pin, 1); // On ROAD 1, turn off the GREEN light. 
 80014fc:	2201      	movs	r2, #1
 80014fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001502:	487a      	ldr	r0, [pc, #488]	; (80016ec <normal_running_traffic_light+0x298>)
 8001504:	f000 fd67 	bl	8001fd6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, D2_Pin, 0); // On ROAD 2, turn on the AMBER light. 
 8001508:	2200      	movs	r2, #0
 800150a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800150e:	4877      	ldr	r0, [pc, #476]	; (80016ec <normal_running_traffic_light+0x298>)
 8001510:	f000 fd61 	bl	8001fd6 <HAL_GPIO_WritePin>
					}
					setTimer3(DURATION_1S);
 8001514:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001518:	f7ff fc6e 	bl	8000df8 <setTimer3>
				}

			break;
 800151c:	e04d      	b.n	80015ba <normal_running_traffic_light+0x166>
		case GREEN_ROAD1:
			if (timer3_flag == 1) {
 800151e:	4b72      	ldr	r3, [pc, #456]	; (80016e8 <normal_running_traffic_light+0x294>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d14b      	bne.n	80015be <normal_running_traffic_light+0x16a>
				light_time1--;
 8001526:	4b72      	ldr	r3, [pc, #456]	; (80016f0 <normal_running_traffic_light+0x29c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	3b01      	subs	r3, #1
 800152c:	4a70      	ldr	r2, [pc, #448]	; (80016f0 <normal_running_traffic_light+0x29c>)
 800152e:	6013      	str	r3, [r2, #0]
				if (light_time1 == 0) {
 8001530:	4b6f      	ldr	r3, [pc, #444]	; (80016f0 <normal_running_traffic_light+0x29c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d112      	bne.n	800155e <normal_running_traffic_light+0x10a>
					led_status1 = AMBER_ROAD1;
 8001538:	4b6a      	ldr	r3, [pc, #424]	; (80016e4 <normal_running_traffic_light+0x290>)
 800153a:	2216      	movs	r2, #22
 800153c:	601a      	str	r2, [r3, #0]
					light_time1 = man_red_time; // Road 1
 800153e:	4b6f      	ldr	r3, [pc, #444]	; (80016fc <normal_running_traffic_light+0x2a8>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a6b      	ldr	r2, [pc, #428]	; (80016f0 <normal_running_traffic_light+0x29c>)
 8001544:	6013      	str	r3, [r2, #0]

					HAL_GPIO_WritePin(GPIOB, D2_Pin, 1); // On ROAD 1, turn off the AMBER light. 
 8001546:	2201      	movs	r2, #1
 8001548:	f44f 7100 	mov.w	r1, #512	; 0x200
 800154c:	4867      	ldr	r0, [pc, #412]	; (80016ec <normal_running_traffic_light+0x298>)
 800154e:	f000 fd42 	bl	8001fd6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, D1_Pin, 0); // On ROAD 2, turn on the RED light. 
 8001552:	2200      	movs	r2, #0
 8001554:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001558:	4864      	ldr	r0, [pc, #400]	; (80016ec <normal_running_traffic_light+0x298>)
 800155a:	f000 fd3c 	bl	8001fd6 <HAL_GPIO_WritePin>
				}
				setTimer3(DURATION_1S);
 800155e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001562:	f7ff fc49 	bl	8000df8 <setTimer3>
			}

			break;
 8001566:	e02a      	b.n	80015be <normal_running_traffic_light+0x16a>
		case AMBER_ROAD1:
			if (timer3_flag == 1) {
 8001568:	4b5f      	ldr	r3, [pc, #380]	; (80016e8 <normal_running_traffic_light+0x294>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d128      	bne.n	80015c2 <normal_running_traffic_light+0x16e>
				light_time1--;
 8001570:	4b5f      	ldr	r3, [pc, #380]	; (80016f0 <normal_running_traffic_light+0x29c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	3b01      	subs	r3, #1
 8001576:	4a5e      	ldr	r2, [pc, #376]	; (80016f0 <normal_running_traffic_light+0x29c>)
 8001578:	6013      	str	r3, [r2, #0]
				if (light_time1 == 0) {
 800157a:	4b5d      	ldr	r3, [pc, #372]	; (80016f0 <normal_running_traffic_light+0x29c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d112      	bne.n	80015a8 <normal_running_traffic_light+0x154>
					led_status1 = RED_ROAD1;
 8001582:	4b58      	ldr	r3, [pc, #352]	; (80016e4 <normal_running_traffic_light+0x290>)
 8001584:	2214      	movs	r2, #20
 8001586:	601a      	str	r2, [r3, #0]
					light_time1 = man_green_time; // Road 1
 8001588:	4b5a      	ldr	r3, [pc, #360]	; (80016f4 <normal_running_traffic_light+0x2a0>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a58      	ldr	r2, [pc, #352]	; (80016f0 <normal_running_traffic_light+0x29c>)
 800158e:	6013      	str	r3, [r2, #0]
					HAL_GPIO_WritePin(GPIOB, D1_Pin, 1); // On ROAD 1, turn off the RED light. 
 8001590:	2201      	movs	r2, #1
 8001592:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001596:	4855      	ldr	r0, [pc, #340]	; (80016ec <normal_running_traffic_light+0x298>)
 8001598:	f000 fd1d 	bl	8001fd6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, D3_Pin, 0); // On ROAD 1, turn on the GREEN light. 
 800159c:	2200      	movs	r2, #0
 800159e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015a2:	4852      	ldr	r0, [pc, #328]	; (80016ec <normal_running_traffic_light+0x298>)
 80015a4:	f000 fd17 	bl	8001fd6 <HAL_GPIO_WritePin>
				}
				setTimer3(DURATION_1S);
 80015a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015ac:	f7ff fc24 	bl	8000df8 <setTimer3>
			}
			break;
 80015b0:	e007      	b.n	80015c2 <normal_running_traffic_light+0x16e>
		default:
			break;
 80015b2:	bf00      	nop
 80015b4:	e006      	b.n	80015c4 <normal_running_traffic_light+0x170>
			break;
 80015b6:	bf00      	nop
 80015b8:	e004      	b.n	80015c4 <normal_running_traffic_light+0x170>
			break;
 80015ba:	bf00      	nop
 80015bc:	e002      	b.n	80015c4 <normal_running_traffic_light+0x170>
			break;
 80015be:	bf00      	nop
 80015c0:	e000      	b.n	80015c4 <normal_running_traffic_light+0x170>
			break;
 80015c2:	bf00      	nop
	}

	switch(led_status2) {
 80015c4:	4b4e      	ldr	r3, [pc, #312]	; (8001700 <normal_running_traffic_light+0x2ac>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	3b13      	subs	r3, #19
 80015ca:	2b06      	cmp	r3, #6
 80015cc:	f200 80c3 	bhi.w	8001756 <normal_running_traffic_light+0x302>
 80015d0:	a201      	add	r2, pc, #4	; (adr r2, 80015d8 <normal_running_traffic_light+0x184>)
 80015d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d6:	bf00      	nop
 80015d8:	080015f5 	.word	0x080015f5
 80015dc:	08001757 	.word	0x08001757
 80015e0:	08001757 	.word	0x08001757
 80015e4:	08001757 	.word	0x08001757
 80015e8:	08001699 	.word	0x08001699
 80015ec:	0800170d 	.word	0x0800170d
 80015f0:	0800164d 	.word	0x0800164d
		case INIT_TRAFFIC_LIGHT:
			if (timer4_flag == 1) {
 80015f4:	4b43      	ldr	r3, [pc, #268]	; (8001704 <normal_running_traffic_light+0x2b0>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	f040 80ae 	bne.w	800175a <normal_running_traffic_light+0x306>
//				traffic_init();
				HAL_GPIO_WritePin(GPIOB, D6_Pin, 0); // On ROAD 2, turn on the GREEN light. 
 80015fe:	2200      	movs	r2, #0
 8001600:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001604:	4839      	ldr	r0, [pc, #228]	; (80016ec <normal_running_traffic_light+0x298>)
 8001606:	f000 fce6 	bl	8001fd6 <HAL_GPIO_WritePin>
				light_time--;
 800160a:	4b3f      	ldr	r3, [pc, #252]	; (8001708 <normal_running_traffic_light+0x2b4>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	3b01      	subs	r3, #1
 8001610:	4a3d      	ldr	r2, [pc, #244]	; (8001708 <normal_running_traffic_light+0x2b4>)
 8001612:	6013      	str	r3, [r2, #0]
				if (light_time == 0) {
 8001614:	4b3c      	ldr	r3, [pc, #240]	; (8001708 <normal_running_traffic_light+0x2b4>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d112      	bne.n	8001642 <normal_running_traffic_light+0x1ee>
					led_status2 = AMBER_ROAD2;
 800161c:	4b38      	ldr	r3, [pc, #224]	; (8001700 <normal_running_traffic_light+0x2ac>)
 800161e:	2219      	movs	r2, #25
 8001620:	601a      	str	r2, [r3, #0]
					light_time = man_amber_time; // Road 1
 8001622:	4b35      	ldr	r3, [pc, #212]	; (80016f8 <normal_running_traffic_light+0x2a4>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a38      	ldr	r2, [pc, #224]	; (8001708 <normal_running_traffic_light+0x2b4>)
 8001628:	6013      	str	r3, [r2, #0]

					HAL_GPIO_WritePin(GPIOB, D6_Pin, 1); // On ROAD 2, turn off the GREEN light. 
 800162a:	2201      	movs	r2, #1
 800162c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001630:	482e      	ldr	r0, [pc, #184]	; (80016ec <normal_running_traffic_light+0x298>)
 8001632:	f000 fcd0 	bl	8001fd6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, D5_Pin, 0); // On ROAD 2, turn on the AMBER light. 
 8001636:	2200      	movs	r2, #0
 8001638:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800163c:	482b      	ldr	r0, [pc, #172]	; (80016ec <normal_running_traffic_light+0x298>)
 800163e:	f000 fcca 	bl	8001fd6 <HAL_GPIO_WritePin>
				}
				setTimer4(DURATION_1S);
 8001642:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001646:	f7ff fbf1 	bl	8000e2c <setTimer4>
			}
			break;
 800164a:	e086      	b.n	800175a <normal_running_traffic_light+0x306>
		case AMBER_ROAD2:
				if (timer4_flag == 1) {
 800164c:	4b2d      	ldr	r3, [pc, #180]	; (8001704 <normal_running_traffic_light+0x2b0>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b01      	cmp	r3, #1
 8001652:	f040 8084 	bne.w	800175e <normal_running_traffic_light+0x30a>
					light_time--;
 8001656:	4b2c      	ldr	r3, [pc, #176]	; (8001708 <normal_running_traffic_light+0x2b4>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	3b01      	subs	r3, #1
 800165c:	4a2a      	ldr	r2, [pc, #168]	; (8001708 <normal_running_traffic_light+0x2b4>)
 800165e:	6013      	str	r3, [r2, #0]
					if (light_time == 0) {
 8001660:	4b29      	ldr	r3, [pc, #164]	; (8001708 <normal_running_traffic_light+0x2b4>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d112      	bne.n	800168e <normal_running_traffic_light+0x23a>
						led_status2 = RED_ROAD2;
 8001668:	4b25      	ldr	r3, [pc, #148]	; (8001700 <normal_running_traffic_light+0x2ac>)
 800166a:	2217      	movs	r2, #23
 800166c:	601a      	str	r2, [r3, #0]
						light_time = man_red_time; // Road 1
 800166e:	4b23      	ldr	r3, [pc, #140]	; (80016fc <normal_running_traffic_light+0x2a8>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a25      	ldr	r2, [pc, #148]	; (8001708 <normal_running_traffic_light+0x2b4>)
 8001674:	6013      	str	r3, [r2, #0]

						HAL_GPIO_WritePin(GPIOB, D5_Pin, 1); // On ROAD 2, turn off the AMBER light. 
 8001676:	2201      	movs	r2, #1
 8001678:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800167c:	481b      	ldr	r0, [pc, #108]	; (80016ec <normal_running_traffic_light+0x298>)
 800167e:	f000 fcaa 	bl	8001fd6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, D4_Pin, 0); // On ROAD 2, turn on the RED light. 
 8001682:	2200      	movs	r2, #0
 8001684:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001688:	4818      	ldr	r0, [pc, #96]	; (80016ec <normal_running_traffic_light+0x298>)
 800168a:	f000 fca4 	bl	8001fd6 <HAL_GPIO_WritePin>
					}
					setTimer4(DURATION_1S);
 800168e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001692:	f7ff fbcb 	bl	8000e2c <setTimer4>
				}

			break;
 8001696:	e062      	b.n	800175e <normal_running_traffic_light+0x30a>
		case RED_ROAD2:
			if (timer4_flag == 1) {
 8001698:	4b1a      	ldr	r3, [pc, #104]	; (8001704 <normal_running_traffic_light+0x2b0>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d160      	bne.n	8001762 <normal_running_traffic_light+0x30e>
				light_time--;
 80016a0:	4b19      	ldr	r3, [pc, #100]	; (8001708 <normal_running_traffic_light+0x2b4>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	3b01      	subs	r3, #1
 80016a6:	4a18      	ldr	r2, [pc, #96]	; (8001708 <normal_running_traffic_light+0x2b4>)
 80016a8:	6013      	str	r3, [r2, #0]
				if (light_time == 0) {
 80016aa:	4b17      	ldr	r3, [pc, #92]	; (8001708 <normal_running_traffic_light+0x2b4>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d112      	bne.n	80016d8 <normal_running_traffic_light+0x284>
					led_status2 = GREEN_ROAD2;
 80016b2:	4b13      	ldr	r3, [pc, #76]	; (8001700 <normal_running_traffic_light+0x2ac>)
 80016b4:	2218      	movs	r2, #24
 80016b6:	601a      	str	r2, [r3, #0]
					light_time = man_green_time; // Road 1
 80016b8:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <normal_running_traffic_light+0x2a0>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a12      	ldr	r2, [pc, #72]	; (8001708 <normal_running_traffic_light+0x2b4>)
 80016be:	6013      	str	r3, [r2, #0]

					HAL_GPIO_WritePin(GPIOB, D4_Pin, 1); // On ROAD 1, turn off the RED light. 
 80016c0:	2201      	movs	r2, #1
 80016c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016c6:	4809      	ldr	r0, [pc, #36]	; (80016ec <normal_running_traffic_light+0x298>)
 80016c8:	f000 fc85 	bl	8001fd6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, D6_Pin, 0); // On ROAD 2, turn on the GREEN light. 
 80016cc:	2200      	movs	r2, #0
 80016ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016d2:	4806      	ldr	r0, [pc, #24]	; (80016ec <normal_running_traffic_light+0x298>)
 80016d4:	f000 fc7f 	bl	8001fd6 <HAL_GPIO_WritePin>
				}
				setTimer4(DURATION_1S);
 80016d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016dc:	f7ff fba6 	bl	8000e2c <setTimer4>
			}

			break;
 80016e0:	e03f      	b.n	8001762 <normal_running_traffic_light+0x30e>
 80016e2:	bf00      	nop
 80016e4:	2000002c 	.word	0x2000002c
 80016e8:	20000138 	.word	0x20000138
 80016ec:	40010c00 	.word	0x40010c00
 80016f0:	20000024 	.word	0x20000024
 80016f4:	2000001c 	.word	0x2000001c
 80016f8:	20000018 	.word	0x20000018
 80016fc:	20000014 	.word	0x20000014
 8001700:	20000030 	.word	0x20000030
 8001704:	2000013c 	.word	0x2000013c
 8001708:	20000020 	.word	0x20000020
		case GREEN_ROAD2:
			if (timer4_flag == 1) {
 800170c:	4b17      	ldr	r3, [pc, #92]	; (800176c <normal_running_traffic_light+0x318>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d128      	bne.n	8001766 <normal_running_traffic_light+0x312>
				light_time--;
 8001714:	4b16      	ldr	r3, [pc, #88]	; (8001770 <normal_running_traffic_light+0x31c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	3b01      	subs	r3, #1
 800171a:	4a15      	ldr	r2, [pc, #84]	; (8001770 <normal_running_traffic_light+0x31c>)
 800171c:	6013      	str	r3, [r2, #0]
				if (light_time == 0) {
 800171e:	4b14      	ldr	r3, [pc, #80]	; (8001770 <normal_running_traffic_light+0x31c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d112      	bne.n	800174c <normal_running_traffic_light+0x2f8>
					led_status2 = AMBER_ROAD2;
 8001726:	4b13      	ldr	r3, [pc, #76]	; (8001774 <normal_running_traffic_light+0x320>)
 8001728:	2219      	movs	r2, #25
 800172a:	601a      	str	r2, [r3, #0]
					light_time = man_amber_time; // Road 1
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <normal_running_traffic_light+0x324>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a0f      	ldr	r2, [pc, #60]	; (8001770 <normal_running_traffic_light+0x31c>)
 8001732:	6013      	str	r3, [r2, #0]

					HAL_GPIO_WritePin(GPIOB, D6_Pin, 1); // On ROAD 2, turn off the GREEN light. 
 8001734:	2201      	movs	r2, #1
 8001736:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800173a:	4810      	ldr	r0, [pc, #64]	; (800177c <normal_running_traffic_light+0x328>)
 800173c:	f000 fc4b 	bl	8001fd6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, D5_Pin, 0); // On ROAD 2, turn on the AMBER light. 
 8001740:	2200      	movs	r2, #0
 8001742:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001746:	480d      	ldr	r0, [pc, #52]	; (800177c <normal_running_traffic_light+0x328>)
 8001748:	f000 fc45 	bl	8001fd6 <HAL_GPIO_WritePin>
				}
				setTimer4(DURATION_1S);
 800174c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001750:	f7ff fb6c 	bl	8000e2c <setTimer4>
			}
			break;
 8001754:	e007      	b.n	8001766 <normal_running_traffic_light+0x312>
		default:
			break;
 8001756:	bf00      	nop
 8001758:	e006      	b.n	8001768 <normal_running_traffic_light+0x314>
			break;
 800175a:	bf00      	nop
 800175c:	e004      	b.n	8001768 <normal_running_traffic_light+0x314>
			break;
 800175e:	bf00      	nop
 8001760:	e002      	b.n	8001768 <normal_running_traffic_light+0x314>
			break;
 8001762:	bf00      	nop
 8001764:	e000      	b.n	8001768 <normal_running_traffic_light+0x314>
			break;
 8001766:	bf00      	nop
	}
}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}
 800176c:	2000013c 	.word	0x2000013c
 8001770:	20000020 	.word	0x20000020
 8001774:	20000030 	.word	0x20000030
 8001778:	20000018 	.word	0x20000018
 800177c:	40010c00 	.word	0x40010c00

08001780 <traffic_light_processing>:

void traffic_light_processing() {
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
	switch(status) {
 8001784:	4b24      	ldr	r3, [pc, #144]	; (8001818 <traffic_light_processing+0x98>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	3b01      	subs	r3, #1
 800178a:	2b06      	cmp	r3, #6
 800178c:	d842      	bhi.n	8001814 <traffic_light_processing+0x94>
 800178e:	a201      	add	r2, pc, #4	; (adr r2, 8001794 <traffic_light_processing+0x14>)
 8001790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001794:	080017b1 	.word	0x080017b1
 8001798:	080017b7 	.word	0x080017b7
 800179c:	080017d3 	.word	0x080017d3
 80017a0:	080017ef 	.word	0x080017ef
 80017a4:	080017b7 	.word	0x080017b7
 80017a8:	080017d3 	.word	0x080017d3
 80017ac:	080017ef 	.word	0x080017ef
		case NORMAL_MODE:
			normal_running_traffic_light();
 80017b0:	f7ff fe50 	bl	8001454 <normal_running_traffic_light>
			break;
 80017b4:	e02e      	b.n	8001814 <traffic_light_processing+0x94>
		case RED_MODE: case MAN_RED_MODE:
			if (timer1_flag == 1) {
 80017b6:	4b19      	ldr	r3, [pc, #100]	; (800181c <traffic_light_processing+0x9c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d125      	bne.n	800180a <traffic_light_processing+0x8a>
				// Toggle RED
				HAL_GPIO_TogglePin(GPIOB, D4_Pin | D1_Pin);
 80017be:	f44f 6110 	mov.w	r1, #2304	; 0x900
 80017c2:	4817      	ldr	r0, [pc, #92]	; (8001820 <traffic_light_processing+0xa0>)
 80017c4:	f000 fc1f 	bl	8002006 <HAL_GPIO_TogglePin>
				setTimer1(DURATION_HALF_OF_SECOND);
 80017c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017cc:	f7ff fae0 	bl	8000d90 <setTimer1>
			}
			break;
 80017d0:	e01b      	b.n	800180a <traffic_light_processing+0x8a>
		case AMBER_MODE: case MAN_AMBER_MODE:
			if (timer1_flag == 1) {
 80017d2:	4b12      	ldr	r3, [pc, #72]	; (800181c <traffic_light_processing+0x9c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d119      	bne.n	800180e <traffic_light_processing+0x8e>
				// Toggle AMBER
				HAL_GPIO_TogglePin(GPIOB, D2_Pin | D5_Pin);
 80017da:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 80017de:	4810      	ldr	r0, [pc, #64]	; (8001820 <traffic_light_processing+0xa0>)
 80017e0:	f000 fc11 	bl	8002006 <HAL_GPIO_TogglePin>
				setTimer1(DURATION_HALF_OF_SECOND);
 80017e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017e8:	f7ff fad2 	bl	8000d90 <setTimer1>
			}
			break;
 80017ec:	e00f      	b.n	800180e <traffic_light_processing+0x8e>
		case GREEN_MODE: case MAN_GREEN_MODE:
			if (timer1_flag == 1) {
 80017ee:	4b0b      	ldr	r3, [pc, #44]	; (800181c <traffic_light_processing+0x9c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d10d      	bne.n	8001812 <traffic_light_processing+0x92>
				// Toggle GREEN
				HAL_GPIO_TogglePin(GPIOB, D3_Pin | D6_Pin);
 80017f6:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 80017fa:	4809      	ldr	r0, [pc, #36]	; (8001820 <traffic_light_processing+0xa0>)
 80017fc:	f000 fc03 	bl	8002006 <HAL_GPIO_TogglePin>
				setTimer1(DURATION_HALF_OF_SECOND);
 8001800:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001804:	f7ff fac4 	bl	8000d90 <setTimer1>
			}
			break;
 8001808:	e003      	b.n	8001812 <traffic_light_processing+0x92>
			break;
 800180a:	bf00      	nop
 800180c:	e002      	b.n	8001814 <traffic_light_processing+0x94>
			break;
 800180e:	bf00      	nop
 8001810:	e000      	b.n	8001814 <traffic_light_processing+0x94>
			break;
 8001812:	bf00      	nop
	}
}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000028 	.word	0x20000028
 800181c:	20000130 	.word	0x20000130
 8001820:	40010c00 	.word	0x40010c00

08001824 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001824:	f7ff fd08 	bl	8001238 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001828:	480b      	ldr	r0, [pc, #44]	; (8001858 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800182a:	490c      	ldr	r1, [pc, #48]	; (800185c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800182c:	4a0c      	ldr	r2, [pc, #48]	; (8001860 <LoopFillZerobss+0x16>)
  movs r3, #0
 800182e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001830:	e002      	b.n	8001838 <LoopCopyDataInit>

08001832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001836:	3304      	adds	r3, #4

08001838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800183a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800183c:	d3f9      	bcc.n	8001832 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800183e:	4a09      	ldr	r2, [pc, #36]	; (8001864 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001840:	4c09      	ldr	r4, [pc, #36]	; (8001868 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001844:	e001      	b.n	800184a <LoopFillZerobss>

08001846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001848:	3204      	adds	r2, #4

0800184a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800184a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800184c:	d3fb      	bcc.n	8001846 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800184e:	f002 fa13 	bl	8003c78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001852:	f7ff f935 	bl	8000ac0 <main>
  bx lr
 8001856:	4770      	bx	lr
  ldr r0, =_sdata
 8001858:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800185c:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8001860:	0800483c 	.word	0x0800483c
  ldr r2, =_sbss
 8001864:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8001868:	20000208 	.word	0x20000208

0800186c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800186c:	e7fe      	b.n	800186c <ADC1_2_IRQHandler>
	...

08001870 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001874:	4b08      	ldr	r3, [pc, #32]	; (8001898 <HAL_Init+0x28>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a07      	ldr	r2, [pc, #28]	; (8001898 <HAL_Init+0x28>)
 800187a:	f043 0310 	orr.w	r3, r3, #16
 800187e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001880:	2003      	movs	r0, #3
 8001882:	f000 f923 	bl	8001acc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001886:	200f      	movs	r0, #15
 8001888:	f000 f808 	bl	800189c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800188c:	f7ff fb6c 	bl	8000f68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40022000 	.word	0x40022000

0800189c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018a4:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <HAL_InitTick+0x54>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <HAL_InitTick+0x58>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	4619      	mov	r1, r3
 80018ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ba:	4618      	mov	r0, r3
 80018bc:	f000 f93b 	bl	8001b36 <HAL_SYSTICK_Config>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e00e      	b.n	80018e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2b0f      	cmp	r3, #15
 80018ce:	d80a      	bhi.n	80018e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018d0:	2200      	movs	r2, #0
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	f04f 30ff 	mov.w	r0, #4294967295
 80018d8:	f000 f903 	bl	8001ae2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018dc:	4a06      	ldr	r2, [pc, #24]	; (80018f8 <HAL_InitTick+0x5c>)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018e2:	2300      	movs	r3, #0
 80018e4:	e000      	b.n	80018e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	2000005c 	.word	0x2000005c
 80018f4:	20000064 	.word	0x20000064
 80018f8:	20000060 	.word	0x20000060

080018fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001900:	4b05      	ldr	r3, [pc, #20]	; (8001918 <HAL_IncTick+0x1c>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	461a      	mov	r2, r3
 8001906:	4b05      	ldr	r3, [pc, #20]	; (800191c <HAL_IncTick+0x20>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4413      	add	r3, r2
 800190c:	4a03      	ldr	r2, [pc, #12]	; (800191c <HAL_IncTick+0x20>)
 800190e:	6013      	str	r3, [r2, #0]
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr
 8001918:	20000064 	.word	0x20000064
 800191c:	200001f4 	.word	0x200001f4

08001920 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return uwTick;
 8001924:	4b02      	ldr	r3, [pc, #8]	; (8001930 <HAL_GetTick+0x10>)
 8001926:	681b      	ldr	r3, [r3, #0]
}
 8001928:	4618      	mov	r0, r3
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr
 8001930:	200001f4 	.word	0x200001f4

08001934 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001944:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <__NVIC_SetPriorityGrouping+0x44>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001950:	4013      	ands	r3, r2
 8001952:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800195c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001964:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001966:	4a04      	ldr	r2, [pc, #16]	; (8001978 <__NVIC_SetPriorityGrouping+0x44>)
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	60d3      	str	r3, [r2, #12]
}
 800196c:	bf00      	nop
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001980:	4b04      	ldr	r3, [pc, #16]	; (8001994 <__NVIC_GetPriorityGrouping+0x18>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	0a1b      	lsrs	r3, r3, #8
 8001986:	f003 0307 	and.w	r3, r3, #7
}
 800198a:	4618      	mov	r0, r3
 800198c:	46bd      	mov	sp, r7
 800198e:	bc80      	pop	{r7}
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	db0b      	blt.n	80019c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	f003 021f 	and.w	r2, r3, #31
 80019b0:	4906      	ldr	r1, [pc, #24]	; (80019cc <__NVIC_EnableIRQ+0x34>)
 80019b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b6:	095b      	lsrs	r3, r3, #5
 80019b8:	2001      	movs	r0, #1
 80019ba:	fa00 f202 	lsl.w	r2, r0, r2
 80019be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr
 80019cc:	e000e100 	.word	0xe000e100

080019d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	6039      	str	r1, [r7, #0]
 80019da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	db0a      	blt.n	80019fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	490c      	ldr	r1, [pc, #48]	; (8001a1c <__NVIC_SetPriority+0x4c>)
 80019ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ee:	0112      	lsls	r2, r2, #4
 80019f0:	b2d2      	uxtb	r2, r2
 80019f2:	440b      	add	r3, r1
 80019f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019f8:	e00a      	b.n	8001a10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	b2da      	uxtb	r2, r3
 80019fe:	4908      	ldr	r1, [pc, #32]	; (8001a20 <__NVIC_SetPriority+0x50>)
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	f003 030f 	and.w	r3, r3, #15
 8001a06:	3b04      	subs	r3, #4
 8001a08:	0112      	lsls	r2, r2, #4
 8001a0a:	b2d2      	uxtb	r2, r2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	761a      	strb	r2, [r3, #24]
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc80      	pop	{r7}
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	e000e100 	.word	0xe000e100
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b089      	sub	sp, #36	; 0x24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	f1c3 0307 	rsb	r3, r3, #7
 8001a3e:	2b04      	cmp	r3, #4
 8001a40:	bf28      	it	cs
 8001a42:	2304      	movcs	r3, #4
 8001a44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	3304      	adds	r3, #4
 8001a4a:	2b06      	cmp	r3, #6
 8001a4c:	d902      	bls.n	8001a54 <NVIC_EncodePriority+0x30>
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	3b03      	subs	r3, #3
 8001a52:	e000      	b.n	8001a56 <NVIC_EncodePriority+0x32>
 8001a54:	2300      	movs	r3, #0
 8001a56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a58:	f04f 32ff 	mov.w	r2, #4294967295
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43da      	mvns	r2, r3
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	401a      	ands	r2, r3
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	fa01 f303 	lsl.w	r3, r1, r3
 8001a76:	43d9      	mvns	r1, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a7c:	4313      	orrs	r3, r2
         );
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3724      	adds	r7, #36	; 0x24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr

08001a88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a98:	d301      	bcc.n	8001a9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e00f      	b.n	8001abe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ac8 <SysTick_Config+0x40>)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aa6:	210f      	movs	r1, #15
 8001aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aac:	f7ff ff90 	bl	80019d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ab0:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <SysTick_Config+0x40>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ab6:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <SysTick_Config+0x40>)
 8001ab8:	2207      	movs	r2, #7
 8001aba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	e000e010 	.word	0xe000e010

08001acc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7ff ff2d 	bl	8001934 <__NVIC_SetPriorityGrouping>
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b086      	sub	sp, #24
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	4603      	mov	r3, r0
 8001aea:	60b9      	str	r1, [r7, #8]
 8001aec:	607a      	str	r2, [r7, #4]
 8001aee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001af4:	f7ff ff42 	bl	800197c <__NVIC_GetPriorityGrouping>
 8001af8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	68b9      	ldr	r1, [r7, #8]
 8001afe:	6978      	ldr	r0, [r7, #20]
 8001b00:	f7ff ff90 	bl	8001a24 <NVIC_EncodePriority>
 8001b04:	4602      	mov	r2, r0
 8001b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b0a:	4611      	mov	r1, r2
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff ff5f 	bl	80019d0 <__NVIC_SetPriority>
}
 8001b12:	bf00      	nop
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	4603      	mov	r3, r0
 8001b22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff ff35 	bl	8001998 <__NVIC_EnableIRQ>
}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b082      	sub	sp, #8
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7ff ffa2 	bl	8001a88 <SysTick_Config>
 8001b44:	4603      	mov	r3, r0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b085      	sub	sp, #20
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b56:	2300      	movs	r3, #0
 8001b58:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d008      	beq.n	8001b78 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2204      	movs	r2, #4
 8001b6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e020      	b.n	8001bba <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f022 020e 	bic.w	r2, r2, #14
 8001b86:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f022 0201 	bic.w	r2, r2, #1
 8001b96:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr

08001bc4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d005      	beq.n	8001be8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2204      	movs	r2, #4
 8001be0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	73fb      	strb	r3, [r7, #15]
 8001be6:	e051      	b.n	8001c8c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 020e 	bic.w	r2, r2, #14
 8001bf6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 0201 	bic.w	r2, r2, #1
 8001c06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a22      	ldr	r2, [pc, #136]	; (8001c98 <HAL_DMA_Abort_IT+0xd4>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d029      	beq.n	8001c66 <HAL_DMA_Abort_IT+0xa2>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a21      	ldr	r2, [pc, #132]	; (8001c9c <HAL_DMA_Abort_IT+0xd8>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d022      	beq.n	8001c62 <HAL_DMA_Abort_IT+0x9e>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a1f      	ldr	r2, [pc, #124]	; (8001ca0 <HAL_DMA_Abort_IT+0xdc>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d01a      	beq.n	8001c5c <HAL_DMA_Abort_IT+0x98>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a1e      	ldr	r2, [pc, #120]	; (8001ca4 <HAL_DMA_Abort_IT+0xe0>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d012      	beq.n	8001c56 <HAL_DMA_Abort_IT+0x92>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a1c      	ldr	r2, [pc, #112]	; (8001ca8 <HAL_DMA_Abort_IT+0xe4>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d00a      	beq.n	8001c50 <HAL_DMA_Abort_IT+0x8c>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a1b      	ldr	r2, [pc, #108]	; (8001cac <HAL_DMA_Abort_IT+0xe8>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d102      	bne.n	8001c4a <HAL_DMA_Abort_IT+0x86>
 8001c44:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c48:	e00e      	b.n	8001c68 <HAL_DMA_Abort_IT+0xa4>
 8001c4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c4e:	e00b      	b.n	8001c68 <HAL_DMA_Abort_IT+0xa4>
 8001c50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c54:	e008      	b.n	8001c68 <HAL_DMA_Abort_IT+0xa4>
 8001c56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c5a:	e005      	b.n	8001c68 <HAL_DMA_Abort_IT+0xa4>
 8001c5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c60:	e002      	b.n	8001c68 <HAL_DMA_Abort_IT+0xa4>
 8001c62:	2310      	movs	r3, #16
 8001c64:	e000      	b.n	8001c68 <HAL_DMA_Abort_IT+0xa4>
 8001c66:	2301      	movs	r3, #1
 8001c68:	4a11      	ldr	r2, [pc, #68]	; (8001cb0 <HAL_DMA_Abort_IT+0xec>)
 8001c6a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d003      	beq.n	8001c8c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	4798      	blx	r3
    } 
  }
  return status;
 8001c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40020008 	.word	0x40020008
 8001c9c:	4002001c 	.word	0x4002001c
 8001ca0:	40020030 	.word	0x40020030
 8001ca4:	40020044 	.word	0x40020044
 8001ca8:	40020058 	.word	0x40020058
 8001cac:	4002006c 	.word	0x4002006c
 8001cb0:	40020000 	.word	0x40020000

08001cb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b08b      	sub	sp, #44	; 0x2c
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cc6:	e148      	b.n	8001f5a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cc8:	2201      	movs	r2, #1
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	69fa      	ldr	r2, [r7, #28]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	f040 8137 	bne.w	8001f54 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	4aa3      	ldr	r2, [pc, #652]	; (8001f78 <HAL_GPIO_Init+0x2c4>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d05e      	beq.n	8001dae <HAL_GPIO_Init+0xfa>
 8001cf0:	4aa1      	ldr	r2, [pc, #644]	; (8001f78 <HAL_GPIO_Init+0x2c4>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d875      	bhi.n	8001de2 <HAL_GPIO_Init+0x12e>
 8001cf6:	4aa1      	ldr	r2, [pc, #644]	; (8001f7c <HAL_GPIO_Init+0x2c8>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d058      	beq.n	8001dae <HAL_GPIO_Init+0xfa>
 8001cfc:	4a9f      	ldr	r2, [pc, #636]	; (8001f7c <HAL_GPIO_Init+0x2c8>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d86f      	bhi.n	8001de2 <HAL_GPIO_Init+0x12e>
 8001d02:	4a9f      	ldr	r2, [pc, #636]	; (8001f80 <HAL_GPIO_Init+0x2cc>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d052      	beq.n	8001dae <HAL_GPIO_Init+0xfa>
 8001d08:	4a9d      	ldr	r2, [pc, #628]	; (8001f80 <HAL_GPIO_Init+0x2cc>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d869      	bhi.n	8001de2 <HAL_GPIO_Init+0x12e>
 8001d0e:	4a9d      	ldr	r2, [pc, #628]	; (8001f84 <HAL_GPIO_Init+0x2d0>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d04c      	beq.n	8001dae <HAL_GPIO_Init+0xfa>
 8001d14:	4a9b      	ldr	r2, [pc, #620]	; (8001f84 <HAL_GPIO_Init+0x2d0>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d863      	bhi.n	8001de2 <HAL_GPIO_Init+0x12e>
 8001d1a:	4a9b      	ldr	r2, [pc, #620]	; (8001f88 <HAL_GPIO_Init+0x2d4>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d046      	beq.n	8001dae <HAL_GPIO_Init+0xfa>
 8001d20:	4a99      	ldr	r2, [pc, #612]	; (8001f88 <HAL_GPIO_Init+0x2d4>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d85d      	bhi.n	8001de2 <HAL_GPIO_Init+0x12e>
 8001d26:	2b12      	cmp	r3, #18
 8001d28:	d82a      	bhi.n	8001d80 <HAL_GPIO_Init+0xcc>
 8001d2a:	2b12      	cmp	r3, #18
 8001d2c:	d859      	bhi.n	8001de2 <HAL_GPIO_Init+0x12e>
 8001d2e:	a201      	add	r2, pc, #4	; (adr r2, 8001d34 <HAL_GPIO_Init+0x80>)
 8001d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d34:	08001daf 	.word	0x08001daf
 8001d38:	08001d89 	.word	0x08001d89
 8001d3c:	08001d9b 	.word	0x08001d9b
 8001d40:	08001ddd 	.word	0x08001ddd
 8001d44:	08001de3 	.word	0x08001de3
 8001d48:	08001de3 	.word	0x08001de3
 8001d4c:	08001de3 	.word	0x08001de3
 8001d50:	08001de3 	.word	0x08001de3
 8001d54:	08001de3 	.word	0x08001de3
 8001d58:	08001de3 	.word	0x08001de3
 8001d5c:	08001de3 	.word	0x08001de3
 8001d60:	08001de3 	.word	0x08001de3
 8001d64:	08001de3 	.word	0x08001de3
 8001d68:	08001de3 	.word	0x08001de3
 8001d6c:	08001de3 	.word	0x08001de3
 8001d70:	08001de3 	.word	0x08001de3
 8001d74:	08001de3 	.word	0x08001de3
 8001d78:	08001d91 	.word	0x08001d91
 8001d7c:	08001da5 	.word	0x08001da5
 8001d80:	4a82      	ldr	r2, [pc, #520]	; (8001f8c <HAL_GPIO_Init+0x2d8>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d013      	beq.n	8001dae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d86:	e02c      	b.n	8001de2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	623b      	str	r3, [r7, #32]
          break;
 8001d8e:	e029      	b.n	8001de4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	3304      	adds	r3, #4
 8001d96:	623b      	str	r3, [r7, #32]
          break;
 8001d98:	e024      	b.n	8001de4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	3308      	adds	r3, #8
 8001da0:	623b      	str	r3, [r7, #32]
          break;
 8001da2:	e01f      	b.n	8001de4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	330c      	adds	r3, #12
 8001daa:	623b      	str	r3, [r7, #32]
          break;
 8001dac:	e01a      	b.n	8001de4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d102      	bne.n	8001dbc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001db6:	2304      	movs	r3, #4
 8001db8:	623b      	str	r3, [r7, #32]
          break;
 8001dba:	e013      	b.n	8001de4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d105      	bne.n	8001dd0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dc4:	2308      	movs	r3, #8
 8001dc6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69fa      	ldr	r2, [r7, #28]
 8001dcc:	611a      	str	r2, [r3, #16]
          break;
 8001dce:	e009      	b.n	8001de4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dd0:	2308      	movs	r3, #8
 8001dd2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	69fa      	ldr	r2, [r7, #28]
 8001dd8:	615a      	str	r2, [r3, #20]
          break;
 8001dda:	e003      	b.n	8001de4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	623b      	str	r3, [r7, #32]
          break;
 8001de0:	e000      	b.n	8001de4 <HAL_GPIO_Init+0x130>
          break;
 8001de2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	2bff      	cmp	r3, #255	; 0xff
 8001de8:	d801      	bhi.n	8001dee <HAL_GPIO_Init+0x13a>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	e001      	b.n	8001df2 <HAL_GPIO_Init+0x13e>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	3304      	adds	r3, #4
 8001df2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	2bff      	cmp	r3, #255	; 0xff
 8001df8:	d802      	bhi.n	8001e00 <HAL_GPIO_Init+0x14c>
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	e002      	b.n	8001e06 <HAL_GPIO_Init+0x152>
 8001e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e02:	3b08      	subs	r3, #8
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	210f      	movs	r1, #15
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	fa01 f303 	lsl.w	r3, r1, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	401a      	ands	r2, r3
 8001e18:	6a39      	ldr	r1, [r7, #32]
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e20:	431a      	orrs	r2, r3
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f000 8090 	beq.w	8001f54 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e34:	4b56      	ldr	r3, [pc, #344]	; (8001f90 <HAL_GPIO_Init+0x2dc>)
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	4a55      	ldr	r2, [pc, #340]	; (8001f90 <HAL_GPIO_Init+0x2dc>)
 8001e3a:	f043 0301 	orr.w	r3, r3, #1
 8001e3e:	6193      	str	r3, [r2, #24]
 8001e40:	4b53      	ldr	r3, [pc, #332]	; (8001f90 <HAL_GPIO_Init+0x2dc>)
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	60bb      	str	r3, [r7, #8]
 8001e4a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e4c:	4a51      	ldr	r2, [pc, #324]	; (8001f94 <HAL_GPIO_Init+0x2e0>)
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	089b      	lsrs	r3, r3, #2
 8001e52:	3302      	adds	r3, #2
 8001e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e58:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5c:	f003 0303 	and.w	r3, r3, #3
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	220f      	movs	r2, #15
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a49      	ldr	r2, [pc, #292]	; (8001f98 <HAL_GPIO_Init+0x2e4>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d00d      	beq.n	8001e94 <HAL_GPIO_Init+0x1e0>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a48      	ldr	r2, [pc, #288]	; (8001f9c <HAL_GPIO_Init+0x2e8>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d007      	beq.n	8001e90 <HAL_GPIO_Init+0x1dc>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a47      	ldr	r2, [pc, #284]	; (8001fa0 <HAL_GPIO_Init+0x2ec>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d101      	bne.n	8001e8c <HAL_GPIO_Init+0x1d8>
 8001e88:	2302      	movs	r3, #2
 8001e8a:	e004      	b.n	8001e96 <HAL_GPIO_Init+0x1e2>
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e002      	b.n	8001e96 <HAL_GPIO_Init+0x1e2>
 8001e90:	2301      	movs	r3, #1
 8001e92:	e000      	b.n	8001e96 <HAL_GPIO_Init+0x1e2>
 8001e94:	2300      	movs	r3, #0
 8001e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e98:	f002 0203 	and.w	r2, r2, #3
 8001e9c:	0092      	lsls	r2, r2, #2
 8001e9e:	4093      	lsls	r3, r2
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ea6:	493b      	ldr	r1, [pc, #236]	; (8001f94 <HAL_GPIO_Init+0x2e0>)
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eaa:	089b      	lsrs	r3, r3, #2
 8001eac:	3302      	adds	r3, #2
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d006      	beq.n	8001ece <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ec0:	4b38      	ldr	r3, [pc, #224]	; (8001fa4 <HAL_GPIO_Init+0x2f0>)
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	4937      	ldr	r1, [pc, #220]	; (8001fa4 <HAL_GPIO_Init+0x2f0>)
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	608b      	str	r3, [r1, #8]
 8001ecc:	e006      	b.n	8001edc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ece:	4b35      	ldr	r3, [pc, #212]	; (8001fa4 <HAL_GPIO_Init+0x2f0>)
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	4933      	ldr	r1, [pc, #204]	; (8001fa4 <HAL_GPIO_Init+0x2f0>)
 8001ed8:	4013      	ands	r3, r2
 8001eda:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d006      	beq.n	8001ef6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ee8:	4b2e      	ldr	r3, [pc, #184]	; (8001fa4 <HAL_GPIO_Init+0x2f0>)
 8001eea:	68da      	ldr	r2, [r3, #12]
 8001eec:	492d      	ldr	r1, [pc, #180]	; (8001fa4 <HAL_GPIO_Init+0x2f0>)
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	60cb      	str	r3, [r1, #12]
 8001ef4:	e006      	b.n	8001f04 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ef6:	4b2b      	ldr	r3, [pc, #172]	; (8001fa4 <HAL_GPIO_Init+0x2f0>)
 8001ef8:	68da      	ldr	r2, [r3, #12]
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	43db      	mvns	r3, r3
 8001efe:	4929      	ldr	r1, [pc, #164]	; (8001fa4 <HAL_GPIO_Init+0x2f0>)
 8001f00:	4013      	ands	r3, r2
 8001f02:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d006      	beq.n	8001f1e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f10:	4b24      	ldr	r3, [pc, #144]	; (8001fa4 <HAL_GPIO_Init+0x2f0>)
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	4923      	ldr	r1, [pc, #140]	; (8001fa4 <HAL_GPIO_Init+0x2f0>)
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	604b      	str	r3, [r1, #4]
 8001f1c:	e006      	b.n	8001f2c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f1e:	4b21      	ldr	r3, [pc, #132]	; (8001fa4 <HAL_GPIO_Init+0x2f0>)
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	43db      	mvns	r3, r3
 8001f26:	491f      	ldr	r1, [pc, #124]	; (8001fa4 <HAL_GPIO_Init+0x2f0>)
 8001f28:	4013      	ands	r3, r2
 8001f2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d006      	beq.n	8001f46 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f38:	4b1a      	ldr	r3, [pc, #104]	; (8001fa4 <HAL_GPIO_Init+0x2f0>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4919      	ldr	r1, [pc, #100]	; (8001fa4 <HAL_GPIO_Init+0x2f0>)
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	600b      	str	r3, [r1, #0]
 8001f44:	e006      	b.n	8001f54 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f46:	4b17      	ldr	r3, [pc, #92]	; (8001fa4 <HAL_GPIO_Init+0x2f0>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	4915      	ldr	r1, [pc, #84]	; (8001fa4 <HAL_GPIO_Init+0x2f0>)
 8001f50:	4013      	ands	r3, r2
 8001f52:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f56:	3301      	adds	r3, #1
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	fa22 f303 	lsr.w	r3, r2, r3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f47f aeaf 	bne.w	8001cc8 <HAL_GPIO_Init+0x14>
  }
}
 8001f6a:	bf00      	nop
 8001f6c:	bf00      	nop
 8001f6e:	372c      	adds	r7, #44	; 0x2c
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	10320000 	.word	0x10320000
 8001f7c:	10310000 	.word	0x10310000
 8001f80:	10220000 	.word	0x10220000
 8001f84:	10210000 	.word	0x10210000
 8001f88:	10120000 	.word	0x10120000
 8001f8c:	10110000 	.word	0x10110000
 8001f90:	40021000 	.word	0x40021000
 8001f94:	40010000 	.word	0x40010000
 8001f98:	40010800 	.word	0x40010800
 8001f9c:	40010c00 	.word	0x40010c00
 8001fa0:	40011000 	.word	0x40011000
 8001fa4:	40010400 	.word	0x40010400

08001fa8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	887b      	ldrh	r3, [r7, #2]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d002      	beq.n	8001fc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	73fb      	strb	r3, [r7, #15]
 8001fc4:	e001      	b.n	8001fca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3714      	adds	r7, #20
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bc80      	pop	{r7}
 8001fd4:	4770      	bx	lr

08001fd6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
 8001fde:	460b      	mov	r3, r1
 8001fe0:	807b      	strh	r3, [r7, #2]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fe6:	787b      	ldrb	r3, [r7, #1]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fec:	887a      	ldrh	r2, [r7, #2]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ff2:	e003      	b.n	8001ffc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ff4:	887b      	ldrh	r3, [r7, #2]
 8001ff6:	041a      	lsls	r2, r3, #16
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	611a      	str	r2, [r3, #16]
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr

08002006 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002006:	b480      	push	{r7}
 8002008:	b085      	sub	sp, #20
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
 800200e:	460b      	mov	r3, r1
 8002010:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002018:	887a      	ldrh	r2, [r7, #2]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	4013      	ands	r3, r2
 800201e:	041a      	lsls	r2, r3, #16
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	43d9      	mvns	r1, r3
 8002024:	887b      	ldrh	r3, [r7, #2]
 8002026:	400b      	ands	r3, r1
 8002028:	431a      	orrs	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	611a      	str	r2, [r3, #16]
}
 800202e:	bf00      	nop
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr

08002038 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e26c      	b.n	8002524 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	f000 8087 	beq.w	8002166 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002058:	4b92      	ldr	r3, [pc, #584]	; (80022a4 <HAL_RCC_OscConfig+0x26c>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f003 030c 	and.w	r3, r3, #12
 8002060:	2b04      	cmp	r3, #4
 8002062:	d00c      	beq.n	800207e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002064:	4b8f      	ldr	r3, [pc, #572]	; (80022a4 <HAL_RCC_OscConfig+0x26c>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 030c 	and.w	r3, r3, #12
 800206c:	2b08      	cmp	r3, #8
 800206e:	d112      	bne.n	8002096 <HAL_RCC_OscConfig+0x5e>
 8002070:	4b8c      	ldr	r3, [pc, #560]	; (80022a4 <HAL_RCC_OscConfig+0x26c>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800207c:	d10b      	bne.n	8002096 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800207e:	4b89      	ldr	r3, [pc, #548]	; (80022a4 <HAL_RCC_OscConfig+0x26c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d06c      	beq.n	8002164 <HAL_RCC_OscConfig+0x12c>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d168      	bne.n	8002164 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e246      	b.n	8002524 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800209e:	d106      	bne.n	80020ae <HAL_RCC_OscConfig+0x76>
 80020a0:	4b80      	ldr	r3, [pc, #512]	; (80022a4 <HAL_RCC_OscConfig+0x26c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a7f      	ldr	r2, [pc, #508]	; (80022a4 <HAL_RCC_OscConfig+0x26c>)
 80020a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020aa:	6013      	str	r3, [r2, #0]
 80020ac:	e02e      	b.n	800210c <HAL_RCC_OscConfig+0xd4>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10c      	bne.n	80020d0 <HAL_RCC_OscConfig+0x98>
 80020b6:	4b7b      	ldr	r3, [pc, #492]	; (80022a4 <HAL_RCC_OscConfig+0x26c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a7a      	ldr	r2, [pc, #488]	; (80022a4 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	4b78      	ldr	r3, [pc, #480]	; (80022a4 <HAL_RCC_OscConfig+0x26c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a77      	ldr	r2, [pc, #476]	; (80022a4 <HAL_RCC_OscConfig+0x26c>)
 80020c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020cc:	6013      	str	r3, [r2, #0]
 80020ce:	e01d      	b.n	800210c <HAL_RCC_OscConfig+0xd4>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020d8:	d10c      	bne.n	80020f4 <HAL_RCC_OscConfig+0xbc>
 80020da:	4b72      	ldr	r3, [pc, #456]	; (80022a4 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a71      	ldr	r2, [pc, #452]	; (80022a4 <HAL_RCC_OscConfig+0x26c>)
 80020e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	4b6f      	ldr	r3, [pc, #444]	; (80022a4 <HAL_RCC_OscConfig+0x26c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a6e      	ldr	r2, [pc, #440]	; (80022a4 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	e00b      	b.n	800210c <HAL_RCC_OscConfig+0xd4>
 80020f4:	4b6b      	ldr	r3, [pc, #428]	; (80022a4 <HAL_RCC_OscConfig+0x26c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a6a      	ldr	r2, [pc, #424]	; (80022a4 <HAL_RCC_OscConfig+0x26c>)
 80020fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020fe:	6013      	str	r3, [r2, #0]
 8002100:	4b68      	ldr	r3, [pc, #416]	; (80022a4 <HAL_RCC_OscConfig+0x26c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a67      	ldr	r2, [pc, #412]	; (80022a4 <HAL_RCC_OscConfig+0x26c>)
 8002106:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800210a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d013      	beq.n	800213c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002114:	f7ff fc04 	bl	8001920 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800211c:	f7ff fc00 	bl	8001920 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b64      	cmp	r3, #100	; 0x64
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e1fa      	b.n	8002524 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800212e:	4b5d      	ldr	r3, [pc, #372]	; (80022a4 <HAL_RCC_OscConfig+0x26c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d0f0      	beq.n	800211c <HAL_RCC_OscConfig+0xe4>
 800213a:	e014      	b.n	8002166 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213c:	f7ff fbf0 	bl	8001920 <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002144:	f7ff fbec 	bl	8001920 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b64      	cmp	r3, #100	; 0x64
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e1e6      	b.n	8002524 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002156:	4b53      	ldr	r3, [pc, #332]	; (80022a4 <HAL_RCC_OscConfig+0x26c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f0      	bne.n	8002144 <HAL_RCC_OscConfig+0x10c>
 8002162:	e000      	b.n	8002166 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d063      	beq.n	800223a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002172:	4b4c      	ldr	r3, [pc, #304]	; (80022a4 <HAL_RCC_OscConfig+0x26c>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f003 030c 	and.w	r3, r3, #12
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00b      	beq.n	8002196 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800217e:	4b49      	ldr	r3, [pc, #292]	; (80022a4 <HAL_RCC_OscConfig+0x26c>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f003 030c 	and.w	r3, r3, #12
 8002186:	2b08      	cmp	r3, #8
 8002188:	d11c      	bne.n	80021c4 <HAL_RCC_OscConfig+0x18c>
 800218a:	4b46      	ldr	r3, [pc, #280]	; (80022a4 <HAL_RCC_OscConfig+0x26c>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d116      	bne.n	80021c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002196:	4b43      	ldr	r3, [pc, #268]	; (80022a4 <HAL_RCC_OscConfig+0x26c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d005      	beq.n	80021ae <HAL_RCC_OscConfig+0x176>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d001      	beq.n	80021ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e1ba      	b.n	8002524 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ae:	4b3d      	ldr	r3, [pc, #244]	; (80022a4 <HAL_RCC_OscConfig+0x26c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	4939      	ldr	r1, [pc, #228]	; (80022a4 <HAL_RCC_OscConfig+0x26c>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021c2:	e03a      	b.n	800223a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d020      	beq.n	800220e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021cc:	4b36      	ldr	r3, [pc, #216]	; (80022a8 <HAL_RCC_OscConfig+0x270>)
 80021ce:	2201      	movs	r2, #1
 80021d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d2:	f7ff fba5 	bl	8001920 <HAL_GetTick>
 80021d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d8:	e008      	b.n	80021ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021da:	f7ff fba1 	bl	8001920 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e19b      	b.n	8002524 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ec:	4b2d      	ldr	r3, [pc, #180]	; (80022a4 <HAL_RCC_OscConfig+0x26c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d0f0      	beq.n	80021da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f8:	4b2a      	ldr	r3, [pc, #168]	; (80022a4 <HAL_RCC_OscConfig+0x26c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	4927      	ldr	r1, [pc, #156]	; (80022a4 <HAL_RCC_OscConfig+0x26c>)
 8002208:	4313      	orrs	r3, r2
 800220a:	600b      	str	r3, [r1, #0]
 800220c:	e015      	b.n	800223a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800220e:	4b26      	ldr	r3, [pc, #152]	; (80022a8 <HAL_RCC_OscConfig+0x270>)
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002214:	f7ff fb84 	bl	8001920 <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800221c:	f7ff fb80 	bl	8001920 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e17a      	b.n	8002524 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800222e:	4b1d      	ldr	r3, [pc, #116]	; (80022a4 <HAL_RCC_OscConfig+0x26c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1f0      	bne.n	800221c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0308 	and.w	r3, r3, #8
 8002242:	2b00      	cmp	r3, #0
 8002244:	d03a      	beq.n	80022bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d019      	beq.n	8002282 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800224e:	4b17      	ldr	r3, [pc, #92]	; (80022ac <HAL_RCC_OscConfig+0x274>)
 8002250:	2201      	movs	r2, #1
 8002252:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002254:	f7ff fb64 	bl	8001920 <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800225c:	f7ff fb60 	bl	8001920 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e15a      	b.n	8002524 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800226e:	4b0d      	ldr	r3, [pc, #52]	; (80022a4 <HAL_RCC_OscConfig+0x26c>)
 8002270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0f0      	beq.n	800225c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800227a:	2001      	movs	r0, #1
 800227c:	f000 facc 	bl	8002818 <RCC_Delay>
 8002280:	e01c      	b.n	80022bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002282:	4b0a      	ldr	r3, [pc, #40]	; (80022ac <HAL_RCC_OscConfig+0x274>)
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002288:	f7ff fb4a 	bl	8001920 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800228e:	e00f      	b.n	80022b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002290:	f7ff fb46 	bl	8001920 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d908      	bls.n	80022b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e140      	b.n	8002524 <HAL_RCC_OscConfig+0x4ec>
 80022a2:	bf00      	nop
 80022a4:	40021000 	.word	0x40021000
 80022a8:	42420000 	.word	0x42420000
 80022ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022b0:	4b9e      	ldr	r3, [pc, #632]	; (800252c <HAL_RCC_OscConfig+0x4f4>)
 80022b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1e9      	bne.n	8002290 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f000 80a6 	beq.w	8002416 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ca:	2300      	movs	r3, #0
 80022cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ce:	4b97      	ldr	r3, [pc, #604]	; (800252c <HAL_RCC_OscConfig+0x4f4>)
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10d      	bne.n	80022f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022da:	4b94      	ldr	r3, [pc, #592]	; (800252c <HAL_RCC_OscConfig+0x4f4>)
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	4a93      	ldr	r2, [pc, #588]	; (800252c <HAL_RCC_OscConfig+0x4f4>)
 80022e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022e4:	61d3      	str	r3, [r2, #28]
 80022e6:	4b91      	ldr	r3, [pc, #580]	; (800252c <HAL_RCC_OscConfig+0x4f4>)
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ee:	60bb      	str	r3, [r7, #8]
 80022f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022f2:	2301      	movs	r3, #1
 80022f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f6:	4b8e      	ldr	r3, [pc, #568]	; (8002530 <HAL_RCC_OscConfig+0x4f8>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d118      	bne.n	8002334 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002302:	4b8b      	ldr	r3, [pc, #556]	; (8002530 <HAL_RCC_OscConfig+0x4f8>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a8a      	ldr	r2, [pc, #552]	; (8002530 <HAL_RCC_OscConfig+0x4f8>)
 8002308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800230c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800230e:	f7ff fb07 	bl	8001920 <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002314:	e008      	b.n	8002328 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002316:	f7ff fb03 	bl	8001920 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b64      	cmp	r3, #100	; 0x64
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e0fd      	b.n	8002524 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002328:	4b81      	ldr	r3, [pc, #516]	; (8002530 <HAL_RCC_OscConfig+0x4f8>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0f0      	beq.n	8002316 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d106      	bne.n	800234a <HAL_RCC_OscConfig+0x312>
 800233c:	4b7b      	ldr	r3, [pc, #492]	; (800252c <HAL_RCC_OscConfig+0x4f4>)
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	4a7a      	ldr	r2, [pc, #488]	; (800252c <HAL_RCC_OscConfig+0x4f4>)
 8002342:	f043 0301 	orr.w	r3, r3, #1
 8002346:	6213      	str	r3, [r2, #32]
 8002348:	e02d      	b.n	80023a6 <HAL_RCC_OscConfig+0x36e>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10c      	bne.n	800236c <HAL_RCC_OscConfig+0x334>
 8002352:	4b76      	ldr	r3, [pc, #472]	; (800252c <HAL_RCC_OscConfig+0x4f4>)
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	4a75      	ldr	r2, [pc, #468]	; (800252c <HAL_RCC_OscConfig+0x4f4>)
 8002358:	f023 0301 	bic.w	r3, r3, #1
 800235c:	6213      	str	r3, [r2, #32]
 800235e:	4b73      	ldr	r3, [pc, #460]	; (800252c <HAL_RCC_OscConfig+0x4f4>)
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	4a72      	ldr	r2, [pc, #456]	; (800252c <HAL_RCC_OscConfig+0x4f4>)
 8002364:	f023 0304 	bic.w	r3, r3, #4
 8002368:	6213      	str	r3, [r2, #32]
 800236a:	e01c      	b.n	80023a6 <HAL_RCC_OscConfig+0x36e>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	2b05      	cmp	r3, #5
 8002372:	d10c      	bne.n	800238e <HAL_RCC_OscConfig+0x356>
 8002374:	4b6d      	ldr	r3, [pc, #436]	; (800252c <HAL_RCC_OscConfig+0x4f4>)
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	4a6c      	ldr	r2, [pc, #432]	; (800252c <HAL_RCC_OscConfig+0x4f4>)
 800237a:	f043 0304 	orr.w	r3, r3, #4
 800237e:	6213      	str	r3, [r2, #32]
 8002380:	4b6a      	ldr	r3, [pc, #424]	; (800252c <HAL_RCC_OscConfig+0x4f4>)
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	4a69      	ldr	r2, [pc, #420]	; (800252c <HAL_RCC_OscConfig+0x4f4>)
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	6213      	str	r3, [r2, #32]
 800238c:	e00b      	b.n	80023a6 <HAL_RCC_OscConfig+0x36e>
 800238e:	4b67      	ldr	r3, [pc, #412]	; (800252c <HAL_RCC_OscConfig+0x4f4>)
 8002390:	6a1b      	ldr	r3, [r3, #32]
 8002392:	4a66      	ldr	r2, [pc, #408]	; (800252c <HAL_RCC_OscConfig+0x4f4>)
 8002394:	f023 0301 	bic.w	r3, r3, #1
 8002398:	6213      	str	r3, [r2, #32]
 800239a:	4b64      	ldr	r3, [pc, #400]	; (800252c <HAL_RCC_OscConfig+0x4f4>)
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	4a63      	ldr	r2, [pc, #396]	; (800252c <HAL_RCC_OscConfig+0x4f4>)
 80023a0:	f023 0304 	bic.w	r3, r3, #4
 80023a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d015      	beq.n	80023da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ae:	f7ff fab7 	bl	8001920 <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b4:	e00a      	b.n	80023cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023b6:	f7ff fab3 	bl	8001920 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e0ab      	b.n	8002524 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023cc:	4b57      	ldr	r3, [pc, #348]	; (800252c <HAL_RCC_OscConfig+0x4f4>)
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0ee      	beq.n	80023b6 <HAL_RCC_OscConfig+0x37e>
 80023d8:	e014      	b.n	8002404 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023da:	f7ff faa1 	bl	8001920 <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023e0:	e00a      	b.n	80023f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023e2:	f7ff fa9d 	bl	8001920 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e095      	b.n	8002524 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023f8:	4b4c      	ldr	r3, [pc, #304]	; (800252c <HAL_RCC_OscConfig+0x4f4>)
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1ee      	bne.n	80023e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002404:	7dfb      	ldrb	r3, [r7, #23]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d105      	bne.n	8002416 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800240a:	4b48      	ldr	r3, [pc, #288]	; (800252c <HAL_RCC_OscConfig+0x4f4>)
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	4a47      	ldr	r2, [pc, #284]	; (800252c <HAL_RCC_OscConfig+0x4f4>)
 8002410:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002414:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 8081 	beq.w	8002522 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002420:	4b42      	ldr	r3, [pc, #264]	; (800252c <HAL_RCC_OscConfig+0x4f4>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f003 030c 	and.w	r3, r3, #12
 8002428:	2b08      	cmp	r3, #8
 800242a:	d061      	beq.n	80024f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	2b02      	cmp	r3, #2
 8002432:	d146      	bne.n	80024c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002434:	4b3f      	ldr	r3, [pc, #252]	; (8002534 <HAL_RCC_OscConfig+0x4fc>)
 8002436:	2200      	movs	r2, #0
 8002438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243a:	f7ff fa71 	bl	8001920 <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002442:	f7ff fa6d 	bl	8001920 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e067      	b.n	8002524 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002454:	4b35      	ldr	r3, [pc, #212]	; (800252c <HAL_RCC_OscConfig+0x4f4>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1f0      	bne.n	8002442 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002468:	d108      	bne.n	800247c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800246a:	4b30      	ldr	r3, [pc, #192]	; (800252c <HAL_RCC_OscConfig+0x4f4>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	492d      	ldr	r1, [pc, #180]	; (800252c <HAL_RCC_OscConfig+0x4f4>)
 8002478:	4313      	orrs	r3, r2
 800247a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800247c:	4b2b      	ldr	r3, [pc, #172]	; (800252c <HAL_RCC_OscConfig+0x4f4>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a19      	ldr	r1, [r3, #32]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248c:	430b      	orrs	r3, r1
 800248e:	4927      	ldr	r1, [pc, #156]	; (800252c <HAL_RCC_OscConfig+0x4f4>)
 8002490:	4313      	orrs	r3, r2
 8002492:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002494:	4b27      	ldr	r3, [pc, #156]	; (8002534 <HAL_RCC_OscConfig+0x4fc>)
 8002496:	2201      	movs	r2, #1
 8002498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249a:	f7ff fa41 	bl	8001920 <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a2:	f7ff fa3d 	bl	8001920 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e037      	b.n	8002524 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024b4:	4b1d      	ldr	r3, [pc, #116]	; (800252c <HAL_RCC_OscConfig+0x4f4>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0f0      	beq.n	80024a2 <HAL_RCC_OscConfig+0x46a>
 80024c0:	e02f      	b.n	8002522 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c2:	4b1c      	ldr	r3, [pc, #112]	; (8002534 <HAL_RCC_OscConfig+0x4fc>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c8:	f7ff fa2a 	bl	8001920 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d0:	f7ff fa26 	bl	8001920 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e020      	b.n	8002524 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024e2:	4b12      	ldr	r3, [pc, #72]	; (800252c <HAL_RCC_OscConfig+0x4f4>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f0      	bne.n	80024d0 <HAL_RCC_OscConfig+0x498>
 80024ee:	e018      	b.n	8002522 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	69db      	ldr	r3, [r3, #28]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d101      	bne.n	80024fc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e013      	b.n	8002524 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024fc:	4b0b      	ldr	r3, [pc, #44]	; (800252c <HAL_RCC_OscConfig+0x4f4>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	429a      	cmp	r2, r3
 800250e:	d106      	bne.n	800251e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800251a:	429a      	cmp	r2, r3
 800251c:	d001      	beq.n	8002522 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e000      	b.n	8002524 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40021000 	.word	0x40021000
 8002530:	40007000 	.word	0x40007000
 8002534:	42420060 	.word	0x42420060

08002538 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e0d0      	b.n	80026ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800254c:	4b6a      	ldr	r3, [pc, #424]	; (80026f8 <HAL_RCC_ClockConfig+0x1c0>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	429a      	cmp	r2, r3
 8002558:	d910      	bls.n	800257c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800255a:	4b67      	ldr	r3, [pc, #412]	; (80026f8 <HAL_RCC_ClockConfig+0x1c0>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f023 0207 	bic.w	r2, r3, #7
 8002562:	4965      	ldr	r1, [pc, #404]	; (80026f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	4313      	orrs	r3, r2
 8002568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800256a:	4b63      	ldr	r3, [pc, #396]	; (80026f8 <HAL_RCC_ClockConfig+0x1c0>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	429a      	cmp	r2, r3
 8002576:	d001      	beq.n	800257c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e0b8      	b.n	80026ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d020      	beq.n	80025ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	d005      	beq.n	80025a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002594:	4b59      	ldr	r3, [pc, #356]	; (80026fc <HAL_RCC_ClockConfig+0x1c4>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	4a58      	ldr	r2, [pc, #352]	; (80026fc <HAL_RCC_ClockConfig+0x1c4>)
 800259a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800259e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0308 	and.w	r3, r3, #8
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d005      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025ac:	4b53      	ldr	r3, [pc, #332]	; (80026fc <HAL_RCC_ClockConfig+0x1c4>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	4a52      	ldr	r2, [pc, #328]	; (80026fc <HAL_RCC_ClockConfig+0x1c4>)
 80025b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025b8:	4b50      	ldr	r3, [pc, #320]	; (80026fc <HAL_RCC_ClockConfig+0x1c4>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	494d      	ldr	r1, [pc, #308]	; (80026fc <HAL_RCC_ClockConfig+0x1c4>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d040      	beq.n	8002658 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d107      	bne.n	80025ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025de:	4b47      	ldr	r3, [pc, #284]	; (80026fc <HAL_RCC_ClockConfig+0x1c4>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d115      	bne.n	8002616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e07f      	b.n	80026ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d107      	bne.n	8002606 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025f6:	4b41      	ldr	r3, [pc, #260]	; (80026fc <HAL_RCC_ClockConfig+0x1c4>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d109      	bne.n	8002616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e073      	b.n	80026ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002606:	4b3d      	ldr	r3, [pc, #244]	; (80026fc <HAL_RCC_ClockConfig+0x1c4>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e06b      	b.n	80026ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002616:	4b39      	ldr	r3, [pc, #228]	; (80026fc <HAL_RCC_ClockConfig+0x1c4>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f023 0203 	bic.w	r2, r3, #3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	4936      	ldr	r1, [pc, #216]	; (80026fc <HAL_RCC_ClockConfig+0x1c4>)
 8002624:	4313      	orrs	r3, r2
 8002626:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002628:	f7ff f97a 	bl	8001920 <HAL_GetTick>
 800262c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800262e:	e00a      	b.n	8002646 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002630:	f7ff f976 	bl	8001920 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	f241 3288 	movw	r2, #5000	; 0x1388
 800263e:	4293      	cmp	r3, r2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e053      	b.n	80026ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002646:	4b2d      	ldr	r3, [pc, #180]	; (80026fc <HAL_RCC_ClockConfig+0x1c4>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f003 020c 	and.w	r2, r3, #12
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	429a      	cmp	r2, r3
 8002656:	d1eb      	bne.n	8002630 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002658:	4b27      	ldr	r3, [pc, #156]	; (80026f8 <HAL_RCC_ClockConfig+0x1c0>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	429a      	cmp	r2, r3
 8002664:	d210      	bcs.n	8002688 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002666:	4b24      	ldr	r3, [pc, #144]	; (80026f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f023 0207 	bic.w	r2, r3, #7
 800266e:	4922      	ldr	r1, [pc, #136]	; (80026f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	4313      	orrs	r3, r2
 8002674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002676:	4b20      	ldr	r3, [pc, #128]	; (80026f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	429a      	cmp	r2, r3
 8002682:	d001      	beq.n	8002688 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e032      	b.n	80026ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	2b00      	cmp	r3, #0
 8002692:	d008      	beq.n	80026a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002694:	4b19      	ldr	r3, [pc, #100]	; (80026fc <HAL_RCC_ClockConfig+0x1c4>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	4916      	ldr	r1, [pc, #88]	; (80026fc <HAL_RCC_ClockConfig+0x1c4>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0308 	and.w	r3, r3, #8
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d009      	beq.n	80026c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026b2:	4b12      	ldr	r3, [pc, #72]	; (80026fc <HAL_RCC_ClockConfig+0x1c4>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	490e      	ldr	r1, [pc, #56]	; (80026fc <HAL_RCC_ClockConfig+0x1c4>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026c6:	f000 f821 	bl	800270c <HAL_RCC_GetSysClockFreq>
 80026ca:	4602      	mov	r2, r0
 80026cc:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <HAL_RCC_ClockConfig+0x1c4>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	091b      	lsrs	r3, r3, #4
 80026d2:	f003 030f 	and.w	r3, r3, #15
 80026d6:	490a      	ldr	r1, [pc, #40]	; (8002700 <HAL_RCC_ClockConfig+0x1c8>)
 80026d8:	5ccb      	ldrb	r3, [r1, r3]
 80026da:	fa22 f303 	lsr.w	r3, r2, r3
 80026de:	4a09      	ldr	r2, [pc, #36]	; (8002704 <HAL_RCC_ClockConfig+0x1cc>)
 80026e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026e2:	4b09      	ldr	r3, [pc, #36]	; (8002708 <HAL_RCC_ClockConfig+0x1d0>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff f8d8 	bl	800189c <HAL_InitTick>

  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40022000 	.word	0x40022000
 80026fc:	40021000 	.word	0x40021000
 8002700:	080047a4 	.word	0x080047a4
 8002704:	2000005c 	.word	0x2000005c
 8002708:	20000060 	.word	0x20000060

0800270c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800270c:	b480      	push	{r7}
 800270e:	b087      	sub	sp, #28
 8002710:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002712:	2300      	movs	r3, #0
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	2300      	movs	r3, #0
 8002718:	60bb      	str	r3, [r7, #8]
 800271a:	2300      	movs	r3, #0
 800271c:	617b      	str	r3, [r7, #20]
 800271e:	2300      	movs	r3, #0
 8002720:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002722:	2300      	movs	r3, #0
 8002724:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002726:	4b1e      	ldr	r3, [pc, #120]	; (80027a0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f003 030c 	and.w	r3, r3, #12
 8002732:	2b04      	cmp	r3, #4
 8002734:	d002      	beq.n	800273c <HAL_RCC_GetSysClockFreq+0x30>
 8002736:	2b08      	cmp	r3, #8
 8002738:	d003      	beq.n	8002742 <HAL_RCC_GetSysClockFreq+0x36>
 800273a:	e027      	b.n	800278c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800273c:	4b19      	ldr	r3, [pc, #100]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800273e:	613b      	str	r3, [r7, #16]
      break;
 8002740:	e027      	b.n	8002792 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	0c9b      	lsrs	r3, r3, #18
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	4a17      	ldr	r2, [pc, #92]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800274c:	5cd3      	ldrb	r3, [r2, r3]
 800274e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d010      	beq.n	800277c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800275a:	4b11      	ldr	r3, [pc, #68]	; (80027a0 <HAL_RCC_GetSysClockFreq+0x94>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	0c5b      	lsrs	r3, r3, #17
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	4a11      	ldr	r2, [pc, #68]	; (80027ac <HAL_RCC_GetSysClockFreq+0xa0>)
 8002766:	5cd3      	ldrb	r3, [r2, r3]
 8002768:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a0d      	ldr	r2, [pc, #52]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800276e:	fb02 f203 	mul.w	r2, r2, r3
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	fbb2 f3f3 	udiv	r3, r2, r3
 8002778:	617b      	str	r3, [r7, #20]
 800277a:	e004      	b.n	8002786 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a0c      	ldr	r2, [pc, #48]	; (80027b0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002780:	fb02 f303 	mul.w	r3, r2, r3
 8002784:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	613b      	str	r3, [r7, #16]
      break;
 800278a:	e002      	b.n	8002792 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800278c:	4b05      	ldr	r3, [pc, #20]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800278e:	613b      	str	r3, [r7, #16]
      break;
 8002790:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002792:	693b      	ldr	r3, [r7, #16]
}
 8002794:	4618      	mov	r0, r3
 8002796:	371c      	adds	r7, #28
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	40021000 	.word	0x40021000
 80027a4:	007a1200 	.word	0x007a1200
 80027a8:	080047bc 	.word	0x080047bc
 80027ac:	080047cc 	.word	0x080047cc
 80027b0:	003d0900 	.word	0x003d0900

080027b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027b8:	4b02      	ldr	r3, [pc, #8]	; (80027c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80027ba:	681b      	ldr	r3, [r3, #0]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr
 80027c4:	2000005c 	.word	0x2000005c

080027c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027cc:	f7ff fff2 	bl	80027b4 <HAL_RCC_GetHCLKFreq>
 80027d0:	4602      	mov	r2, r0
 80027d2:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	0a1b      	lsrs	r3, r3, #8
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	4903      	ldr	r1, [pc, #12]	; (80027ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80027de:	5ccb      	ldrb	r3, [r1, r3]
 80027e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40021000 	.word	0x40021000
 80027ec:	080047b4 	.word	0x080047b4

080027f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027f4:	f7ff ffde 	bl	80027b4 <HAL_RCC_GetHCLKFreq>
 80027f8:	4602      	mov	r2, r0
 80027fa:	4b05      	ldr	r3, [pc, #20]	; (8002810 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	0adb      	lsrs	r3, r3, #11
 8002800:	f003 0307 	and.w	r3, r3, #7
 8002804:	4903      	ldr	r1, [pc, #12]	; (8002814 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002806:	5ccb      	ldrb	r3, [r1, r3]
 8002808:	fa22 f303 	lsr.w	r3, r2, r3
}
 800280c:	4618      	mov	r0, r3
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40021000 	.word	0x40021000
 8002814:	080047b4 	.word	0x080047b4

08002818 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002820:	4b0a      	ldr	r3, [pc, #40]	; (800284c <RCC_Delay+0x34>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a0a      	ldr	r2, [pc, #40]	; (8002850 <RCC_Delay+0x38>)
 8002826:	fba2 2303 	umull	r2, r3, r2, r3
 800282a:	0a5b      	lsrs	r3, r3, #9
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	fb02 f303 	mul.w	r3, r2, r3
 8002832:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002834:	bf00      	nop
  }
  while (Delay --);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	1e5a      	subs	r2, r3, #1
 800283a:	60fa      	str	r2, [r7, #12]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1f9      	bne.n	8002834 <RCC_Delay+0x1c>
}
 8002840:	bf00      	nop
 8002842:	bf00      	nop
 8002844:	3714      	adds	r7, #20
 8002846:	46bd      	mov	sp, r7
 8002848:	bc80      	pop	{r7}
 800284a:	4770      	bx	lr
 800284c:	2000005c 	.word	0x2000005c
 8002850:	10624dd3 	.word	0x10624dd3

08002854 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e041      	b.n	80028ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d106      	bne.n	8002880 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7fe fba6 	bl	8000fcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2202      	movs	r2, #2
 8002884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3304      	adds	r3, #4
 8002890:	4619      	mov	r1, r3
 8002892:	4610      	mov	r0, r2
 8002894:	f000 fa6e 	bl	8002d74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
	...

080028f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b01      	cmp	r3, #1
 8002906:	d001      	beq.n	800290c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e035      	b.n	8002978 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2202      	movs	r2, #2
 8002910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68da      	ldr	r2, [r3, #12]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f042 0201 	orr.w	r2, r2, #1
 8002922:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a16      	ldr	r2, [pc, #88]	; (8002984 <HAL_TIM_Base_Start_IT+0x90>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d009      	beq.n	8002942 <HAL_TIM_Base_Start_IT+0x4e>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002936:	d004      	beq.n	8002942 <HAL_TIM_Base_Start_IT+0x4e>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a12      	ldr	r2, [pc, #72]	; (8002988 <HAL_TIM_Base_Start_IT+0x94>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d111      	bne.n	8002966 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f003 0307 	and.w	r3, r3, #7
 800294c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2b06      	cmp	r3, #6
 8002952:	d010      	beq.n	8002976 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f042 0201 	orr.w	r2, r2, #1
 8002962:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002964:	e007      	b.n	8002976 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f042 0201 	orr.w	r2, r2, #1
 8002974:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3714      	adds	r7, #20
 800297c:	46bd      	mov	sp, r7
 800297e:	bc80      	pop	{r7}
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	40012c00 	.word	0x40012c00
 8002988:	40000400 	.word	0x40000400

0800298c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d122      	bne.n	80029e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d11b      	bne.n	80029e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f06f 0202 	mvn.w	r2, #2
 80029b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f9b4 	bl	8002d3c <HAL_TIM_IC_CaptureCallback>
 80029d4:	e005      	b.n	80029e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f9a7 	bl	8002d2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 f9b6 	bl	8002d4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	f003 0304 	and.w	r3, r3, #4
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	d122      	bne.n	8002a3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	f003 0304 	and.w	r3, r3, #4
 8002a00:	2b04      	cmp	r3, #4
 8002a02:	d11b      	bne.n	8002a3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f06f 0204 	mvn.w	r2, #4
 8002a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2202      	movs	r2, #2
 8002a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f98a 	bl	8002d3c <HAL_TIM_IC_CaptureCallback>
 8002a28:	e005      	b.n	8002a36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f97d 	bl	8002d2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 f98c 	bl	8002d4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	f003 0308 	and.w	r3, r3, #8
 8002a46:	2b08      	cmp	r3, #8
 8002a48:	d122      	bne.n	8002a90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f003 0308 	and.w	r3, r3, #8
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	d11b      	bne.n	8002a90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f06f 0208 	mvn.w	r2, #8
 8002a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2204      	movs	r2, #4
 8002a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	f003 0303 	and.w	r3, r3, #3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f960 	bl	8002d3c <HAL_TIM_IC_CaptureCallback>
 8002a7c:	e005      	b.n	8002a8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f953 	bl	8002d2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 f962 	bl	8002d4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	f003 0310 	and.w	r3, r3, #16
 8002a9a:	2b10      	cmp	r3, #16
 8002a9c:	d122      	bne.n	8002ae4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	f003 0310 	and.w	r3, r3, #16
 8002aa8:	2b10      	cmp	r3, #16
 8002aaa:	d11b      	bne.n	8002ae4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f06f 0210 	mvn.w	r2, #16
 8002ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2208      	movs	r2, #8
 8002aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f936 	bl	8002d3c <HAL_TIM_IC_CaptureCallback>
 8002ad0:	e005      	b.n	8002ade <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f929 	bl	8002d2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 f938 	bl	8002d4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d10e      	bne.n	8002b10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d107      	bne.n	8002b10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f06f 0201 	mvn.w	r2, #1
 8002b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7fe fb9a 	bl	8001244 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b1a:	2b80      	cmp	r3, #128	; 0x80
 8002b1c:	d10e      	bne.n	8002b3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b28:	2b80      	cmp	r3, #128	; 0x80
 8002b2a:	d107      	bne.n	8002b3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 fa6b 	bl	8003012 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b46:	2b40      	cmp	r3, #64	; 0x40
 8002b48:	d10e      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b54:	2b40      	cmp	r3, #64	; 0x40
 8002b56:	d107      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f8fc 	bl	8002d60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	f003 0320 	and.w	r3, r3, #32
 8002b72:	2b20      	cmp	r3, #32
 8002b74:	d10e      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f003 0320 	and.w	r3, r3, #32
 8002b80:	2b20      	cmp	r3, #32
 8002b82:	d107      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f06f 0220 	mvn.w	r2, #32
 8002b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 fa36 	bl	8003000 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b94:	bf00      	nop
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d101      	bne.n	8002bb8 <HAL_TIM_ConfigClockSource+0x1c>
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	e0b4      	b.n	8002d22 <HAL_TIM_ConfigClockSource+0x186>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002bd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68ba      	ldr	r2, [r7, #8]
 8002be6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bf0:	d03e      	beq.n	8002c70 <HAL_TIM_ConfigClockSource+0xd4>
 8002bf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bf6:	f200 8087 	bhi.w	8002d08 <HAL_TIM_ConfigClockSource+0x16c>
 8002bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bfe:	f000 8086 	beq.w	8002d0e <HAL_TIM_ConfigClockSource+0x172>
 8002c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c06:	d87f      	bhi.n	8002d08 <HAL_TIM_ConfigClockSource+0x16c>
 8002c08:	2b70      	cmp	r3, #112	; 0x70
 8002c0a:	d01a      	beq.n	8002c42 <HAL_TIM_ConfigClockSource+0xa6>
 8002c0c:	2b70      	cmp	r3, #112	; 0x70
 8002c0e:	d87b      	bhi.n	8002d08 <HAL_TIM_ConfigClockSource+0x16c>
 8002c10:	2b60      	cmp	r3, #96	; 0x60
 8002c12:	d050      	beq.n	8002cb6 <HAL_TIM_ConfigClockSource+0x11a>
 8002c14:	2b60      	cmp	r3, #96	; 0x60
 8002c16:	d877      	bhi.n	8002d08 <HAL_TIM_ConfigClockSource+0x16c>
 8002c18:	2b50      	cmp	r3, #80	; 0x50
 8002c1a:	d03c      	beq.n	8002c96 <HAL_TIM_ConfigClockSource+0xfa>
 8002c1c:	2b50      	cmp	r3, #80	; 0x50
 8002c1e:	d873      	bhi.n	8002d08 <HAL_TIM_ConfigClockSource+0x16c>
 8002c20:	2b40      	cmp	r3, #64	; 0x40
 8002c22:	d058      	beq.n	8002cd6 <HAL_TIM_ConfigClockSource+0x13a>
 8002c24:	2b40      	cmp	r3, #64	; 0x40
 8002c26:	d86f      	bhi.n	8002d08 <HAL_TIM_ConfigClockSource+0x16c>
 8002c28:	2b30      	cmp	r3, #48	; 0x30
 8002c2a:	d064      	beq.n	8002cf6 <HAL_TIM_ConfigClockSource+0x15a>
 8002c2c:	2b30      	cmp	r3, #48	; 0x30
 8002c2e:	d86b      	bhi.n	8002d08 <HAL_TIM_ConfigClockSource+0x16c>
 8002c30:	2b20      	cmp	r3, #32
 8002c32:	d060      	beq.n	8002cf6 <HAL_TIM_ConfigClockSource+0x15a>
 8002c34:	2b20      	cmp	r3, #32
 8002c36:	d867      	bhi.n	8002d08 <HAL_TIM_ConfigClockSource+0x16c>
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d05c      	beq.n	8002cf6 <HAL_TIM_ConfigClockSource+0x15a>
 8002c3c:	2b10      	cmp	r3, #16
 8002c3e:	d05a      	beq.n	8002cf6 <HAL_TIM_ConfigClockSource+0x15a>
 8002c40:	e062      	b.n	8002d08 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6818      	ldr	r0, [r3, #0]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	6899      	ldr	r1, [r3, #8]
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f000 f95e 	bl	8002f12 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	609a      	str	r2, [r3, #8]
      break;
 8002c6e:	e04f      	b.n	8002d10 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6818      	ldr	r0, [r3, #0]
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	6899      	ldr	r1, [r3, #8]
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	f000 f947 	bl	8002f12 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689a      	ldr	r2, [r3, #8]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c92:	609a      	str	r2, [r3, #8]
      break;
 8002c94:	e03c      	b.n	8002d10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6818      	ldr	r0, [r3, #0]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	6859      	ldr	r1, [r3, #4]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	f000 f8be 	bl	8002e24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2150      	movs	r1, #80	; 0x50
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 f915 	bl	8002ede <TIM_ITRx_SetConfig>
      break;
 8002cb4:	e02c      	b.n	8002d10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6818      	ldr	r0, [r3, #0]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	6859      	ldr	r1, [r3, #4]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	f000 f8dc 	bl	8002e80 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2160      	movs	r1, #96	; 0x60
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f000 f905 	bl	8002ede <TIM_ITRx_SetConfig>
      break;
 8002cd4:	e01c      	b.n	8002d10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6818      	ldr	r0, [r3, #0]
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	6859      	ldr	r1, [r3, #4]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	f000 f89e 	bl	8002e24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2140      	movs	r1, #64	; 0x40
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f000 f8f5 	bl	8002ede <TIM_ITRx_SetConfig>
      break;
 8002cf4:	e00c      	b.n	8002d10 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4619      	mov	r1, r3
 8002d00:	4610      	mov	r0, r2
 8002d02:	f000 f8ec 	bl	8002ede <TIM_ITRx_SetConfig>
      break;
 8002d06:	e003      	b.n	8002d10 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d0c:	e000      	b.n	8002d10 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr

08002d3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bc80      	pop	{r7}
 8002d4c:	4770      	bx	lr

08002d4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr

08002d60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bc80      	pop	{r7}
 8002d70:	4770      	bx	lr
	...

08002d74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a25      	ldr	r2, [pc, #148]	; (8002e1c <TIM_Base_SetConfig+0xa8>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d007      	beq.n	8002d9c <TIM_Base_SetConfig+0x28>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d92:	d003      	beq.n	8002d9c <TIM_Base_SetConfig+0x28>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a22      	ldr	r2, [pc, #136]	; (8002e20 <TIM_Base_SetConfig+0xac>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d108      	bne.n	8002dae <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002da2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a1a      	ldr	r2, [pc, #104]	; (8002e1c <TIM_Base_SetConfig+0xa8>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d007      	beq.n	8002dc6 <TIM_Base_SetConfig+0x52>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dbc:	d003      	beq.n	8002dc6 <TIM_Base_SetConfig+0x52>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a17      	ldr	r2, [pc, #92]	; (8002e20 <TIM_Base_SetConfig+0xac>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d108      	bne.n	8002dd8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a07      	ldr	r2, [pc, #28]	; (8002e1c <TIM_Base_SetConfig+0xa8>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d103      	bne.n	8002e0c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	691a      	ldr	r2, [r3, #16]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	615a      	str	r2, [r3, #20]
}
 8002e12:	bf00      	nop
 8002e14:	3714      	adds	r7, #20
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr
 8002e1c:	40012c00 	.word	0x40012c00
 8002e20:	40000400 	.word	0x40000400

08002e24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b087      	sub	sp, #28
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	f023 0201 	bic.w	r2, r3, #1
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	011b      	lsls	r3, r3, #4
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f023 030a 	bic.w	r3, r3, #10
 8002e60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	621a      	str	r2, [r3, #32]
}
 8002e76:	bf00      	nop
 8002e78:	371c      	adds	r7, #28
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr

08002e80 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b087      	sub	sp, #28
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	f023 0210 	bic.w	r2, r3, #16
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002eaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	031b      	lsls	r3, r3, #12
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ebc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	621a      	str	r2, [r3, #32]
}
 8002ed4:	bf00      	nop
 8002ed6:	371c      	adds	r7, #28
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bc80      	pop	{r7}
 8002edc:	4770      	bx	lr

08002ede <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b085      	sub	sp, #20
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
 8002ee6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ef4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	f043 0307 	orr.w	r3, r3, #7
 8002f00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	609a      	str	r2, [r3, #8]
}
 8002f08:	bf00      	nop
 8002f0a:	3714      	adds	r7, #20
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc80      	pop	{r7}
 8002f10:	4770      	bx	lr

08002f12 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b087      	sub	sp, #28
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	60f8      	str	r0, [r7, #12]
 8002f1a:	60b9      	str	r1, [r7, #8]
 8002f1c:	607a      	str	r2, [r7, #4]
 8002f1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f2c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	021a      	lsls	r2, r3, #8
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	431a      	orrs	r2, r3
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	609a      	str	r2, [r3, #8]
}
 8002f46:	bf00      	nop
 8002f48:	371c      	adds	r7, #28
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bc80      	pop	{r7}
 8002f4e:	4770      	bx	lr

08002f50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d101      	bne.n	8002f68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f64:	2302      	movs	r3, #2
 8002f66:	e041      	b.n	8002fec <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2202      	movs	r2, #2
 8002f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a14      	ldr	r2, [pc, #80]	; (8002ff8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d009      	beq.n	8002fc0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb4:	d004      	beq.n	8002fc0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a10      	ldr	r2, [pc, #64]	; (8002ffc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d10c      	bne.n	8002fda <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fc6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bc80      	pop	{r7}
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	40012c00 	.word	0x40012c00
 8002ffc:	40000400 	.word	0x40000400

08003000 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	bc80      	pop	{r7}
 8003010:	4770      	bx	lr

08003012 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003012:	b480      	push	{r7}
 8003014:	b083      	sub	sp, #12
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	bc80      	pop	{r7}
 8003022:	4770      	bx	lr

08003024 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e042      	b.n	80030bc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d106      	bne.n	8003050 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7fd ffe2 	bl	8001014 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2224      	movs	r2, #36	; 0x24
 8003054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68da      	ldr	r2, [r3, #12]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003066:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 fd71 	bl	8003b50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	691a      	ldr	r2, [r3, #16]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800307c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	695a      	ldr	r2, [r3, #20]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800308c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68da      	ldr	r2, [r3, #12]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800309c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2220      	movs	r2, #32
 80030a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2220      	movs	r2, #32
 80030b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3708      	adds	r7, #8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b08a      	sub	sp, #40	; 0x28
 80030c8:	af02      	add	r7, sp, #8
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	603b      	str	r3, [r7, #0]
 80030d0:	4613      	mov	r3, r2
 80030d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030d4:	2300      	movs	r3, #0
 80030d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b20      	cmp	r3, #32
 80030e2:	d16d      	bne.n	80031c0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d002      	beq.n	80030f0 <HAL_UART_Transmit+0x2c>
 80030ea:	88fb      	ldrh	r3, [r7, #6]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e066      	b.n	80031c2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2221      	movs	r2, #33	; 0x21
 80030fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003102:	f7fe fc0d 	bl	8001920 <HAL_GetTick>
 8003106:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	88fa      	ldrh	r2, [r7, #6]
 800310c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	88fa      	ldrh	r2, [r7, #6]
 8003112:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800311c:	d108      	bne.n	8003130 <HAL_UART_Transmit+0x6c>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d104      	bne.n	8003130 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003126:	2300      	movs	r3, #0
 8003128:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	61bb      	str	r3, [r7, #24]
 800312e:	e003      	b.n	8003138 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003134:	2300      	movs	r3, #0
 8003136:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003138:	e02a      	b.n	8003190 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	2200      	movs	r2, #0
 8003142:	2180      	movs	r1, #128	; 0x80
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 faf9 	bl	800373c <UART_WaitOnFlagUntilTimeout>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e036      	b.n	80031c2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10b      	bne.n	8003172 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	881b      	ldrh	r3, [r3, #0]
 800315e:	461a      	mov	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003168:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	3302      	adds	r3, #2
 800316e:	61bb      	str	r3, [r7, #24]
 8003170:	e007      	b.n	8003182 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	781a      	ldrb	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	3301      	adds	r3, #1
 8003180:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003186:	b29b      	uxth	r3, r3
 8003188:	3b01      	subs	r3, #1
 800318a:	b29a      	uxth	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003194:	b29b      	uxth	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1cf      	bne.n	800313a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	2200      	movs	r2, #0
 80031a2:	2140      	movs	r1, #64	; 0x40
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f000 fac9 	bl	800373c <UART_WaitOnFlagUntilTimeout>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e006      	b.n	80031c2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80031bc:	2300      	movs	r3, #0
 80031be:	e000      	b.n	80031c2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80031c0:	2302      	movs	r3, #2
  }
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3720      	adds	r7, #32
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
	...

080031cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b0ba      	sub	sp, #232	; 0xe8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80031f2:	2300      	movs	r3, #0
 80031f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80031fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003202:	f003 030f 	and.w	r3, r3, #15
 8003206:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800320a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10f      	bne.n	8003232 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003216:	f003 0320 	and.w	r3, r3, #32
 800321a:	2b00      	cmp	r3, #0
 800321c:	d009      	beq.n	8003232 <HAL_UART_IRQHandler+0x66>
 800321e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003222:	f003 0320 	and.w	r3, r3, #32
 8003226:	2b00      	cmp	r3, #0
 8003228:	d003      	beq.n	8003232 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 fbd1 	bl	80039d2 <UART_Receive_IT>
      return;
 8003230:	e25b      	b.n	80036ea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003232:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003236:	2b00      	cmp	r3, #0
 8003238:	f000 80de 	beq.w	80033f8 <HAL_UART_IRQHandler+0x22c>
 800323c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	2b00      	cmp	r3, #0
 8003246:	d106      	bne.n	8003256 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800324c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 80d1 	beq.w	80033f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00b      	beq.n	800327a <HAL_UART_IRQHandler+0xae>
 8003262:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800326a:	2b00      	cmp	r3, #0
 800326c:	d005      	beq.n	800327a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003272:	f043 0201 	orr.w	r2, r3, #1
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800327a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800327e:	f003 0304 	and.w	r3, r3, #4
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00b      	beq.n	800329e <HAL_UART_IRQHandler+0xd2>
 8003286:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	d005      	beq.n	800329e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003296:	f043 0202 	orr.w	r2, r3, #2
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800329e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00b      	beq.n	80032c2 <HAL_UART_IRQHandler+0xf6>
 80032aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d005      	beq.n	80032c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ba:	f043 0204 	orr.w	r2, r3, #4
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80032c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032c6:	f003 0308 	and.w	r3, r3, #8
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d011      	beq.n	80032f2 <HAL_UART_IRQHandler+0x126>
 80032ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032d2:	f003 0320 	and.w	r3, r3, #32
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d105      	bne.n	80032e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80032da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d005      	beq.n	80032f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ea:	f043 0208 	orr.w	r2, r3, #8
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f000 81f2 	beq.w	80036e0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003300:	f003 0320 	and.w	r3, r3, #32
 8003304:	2b00      	cmp	r3, #0
 8003306:	d008      	beq.n	800331a <HAL_UART_IRQHandler+0x14e>
 8003308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800330c:	f003 0320 	and.w	r3, r3, #32
 8003310:	2b00      	cmp	r3, #0
 8003312:	d002      	beq.n	800331a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 fb5c 	bl	80039d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003324:	2b00      	cmp	r3, #0
 8003326:	bf14      	ite	ne
 8003328:	2301      	movne	r3, #1
 800332a:	2300      	moveq	r3, #0
 800332c:	b2db      	uxtb	r3, r3
 800332e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003336:	f003 0308 	and.w	r3, r3, #8
 800333a:	2b00      	cmp	r3, #0
 800333c:	d103      	bne.n	8003346 <HAL_UART_IRQHandler+0x17a>
 800333e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003342:	2b00      	cmp	r3, #0
 8003344:	d04f      	beq.n	80033e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 fa66 	bl	8003818 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003356:	2b00      	cmp	r3, #0
 8003358:	d041      	beq.n	80033de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	3314      	adds	r3, #20
 8003360:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003364:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003368:	e853 3f00 	ldrex	r3, [r3]
 800336c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003370:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003374:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003378:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	3314      	adds	r3, #20
 8003382:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003386:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800338a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800338e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003392:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003396:	e841 2300 	strex	r3, r2, [r1]
 800339a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800339e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1d9      	bne.n	800335a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d013      	beq.n	80033d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b2:	4a7e      	ldr	r2, [pc, #504]	; (80035ac <HAL_UART_IRQHandler+0x3e0>)
 80033b4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7fe fc02 	bl	8001bc4 <HAL_DMA_Abort_IT>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d016      	beq.n	80033f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033d0:	4610      	mov	r0, r2
 80033d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d4:	e00e      	b.n	80033f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f99c 	bl	8003714 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033dc:	e00a      	b.n	80033f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f998 	bl	8003714 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033e4:	e006      	b.n	80033f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f994 	bl	8003714 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80033f2:	e175      	b.n	80036e0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033f4:	bf00      	nop
    return;
 80033f6:	e173      	b.n	80036e0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	f040 814f 	bne.w	80036a0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003406:	f003 0310 	and.w	r3, r3, #16
 800340a:	2b00      	cmp	r3, #0
 800340c:	f000 8148 	beq.w	80036a0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003414:	f003 0310 	and.w	r3, r3, #16
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 8141 	beq.w	80036a0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800341e:	2300      	movs	r3, #0
 8003420:	60bb      	str	r3, [r7, #8]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	60bb      	str	r3, [r7, #8]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	60bb      	str	r3, [r7, #8]
 8003432:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 80b6 	beq.w	80035b0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003450:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 8145 	beq.w	80036e4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800345e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003462:	429a      	cmp	r2, r3
 8003464:	f080 813e 	bcs.w	80036e4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800346e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	2b20      	cmp	r3, #32
 8003478:	f000 8088 	beq.w	800358c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	330c      	adds	r3, #12
 8003482:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003486:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800348a:	e853 3f00 	ldrex	r3, [r3]
 800348e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003492:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003496:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800349a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	330c      	adds	r3, #12
 80034a4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80034a8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80034ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80034b4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80034b8:	e841 2300 	strex	r3, r2, [r1]
 80034bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80034c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1d9      	bne.n	800347c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	3314      	adds	r3, #20
 80034ce:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034d2:	e853 3f00 	ldrex	r3, [r3]
 80034d6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80034d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034da:	f023 0301 	bic.w	r3, r3, #1
 80034de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	3314      	adds	r3, #20
 80034e8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80034ec:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80034f0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80034f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80034f8:	e841 2300 	strex	r3, r2, [r1]
 80034fc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80034fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1e1      	bne.n	80034c8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	3314      	adds	r3, #20
 800350a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800350c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800350e:	e853 3f00 	ldrex	r3, [r3]
 8003512:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003514:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003516:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800351a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	3314      	adds	r3, #20
 8003524:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003528:	66fa      	str	r2, [r7, #108]	; 0x6c
 800352a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800352c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800352e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003530:	e841 2300 	strex	r3, r2, [r1]
 8003534:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003536:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1e3      	bne.n	8003504 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2220      	movs	r2, #32
 8003540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	330c      	adds	r3, #12
 8003550:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003554:	e853 3f00 	ldrex	r3, [r3]
 8003558:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800355a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800355c:	f023 0310 	bic.w	r3, r3, #16
 8003560:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	330c      	adds	r3, #12
 800356a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800356e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003570:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003572:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003574:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003576:	e841 2300 	strex	r3, r2, [r1]
 800357a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800357c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1e3      	bne.n	800354a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003586:	4618      	mov	r0, r3
 8003588:	f7fe fae1 	bl	8001b4e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2202      	movs	r2, #2
 8003590:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800359a:	b29b      	uxth	r3, r3
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	b29b      	uxth	r3, r3
 80035a0:	4619      	mov	r1, r3
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f8bf 	bl	8003726 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80035a8:	e09c      	b.n	80036e4 <HAL_UART_IRQHandler+0x518>
 80035aa:	bf00      	nop
 80035ac:	080038dd 	.word	0x080038dd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f000 808e 	beq.w	80036e8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80035cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f000 8089 	beq.w	80036e8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	330c      	adds	r3, #12
 80035dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e0:	e853 3f00 	ldrex	r3, [r3]
 80035e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80035e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	330c      	adds	r3, #12
 80035f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80035fa:	647a      	str	r2, [r7, #68]	; 0x44
 80035fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003600:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003602:	e841 2300 	strex	r3, r2, [r1]
 8003606:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1e3      	bne.n	80035d6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	3314      	adds	r3, #20
 8003614:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003618:	e853 3f00 	ldrex	r3, [r3]
 800361c:	623b      	str	r3, [r7, #32]
   return(result);
 800361e:	6a3b      	ldr	r3, [r7, #32]
 8003620:	f023 0301 	bic.w	r3, r3, #1
 8003624:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	3314      	adds	r3, #20
 800362e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003632:	633a      	str	r2, [r7, #48]	; 0x30
 8003634:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003636:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003638:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800363a:	e841 2300 	strex	r3, r2, [r1]
 800363e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1e3      	bne.n	800360e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2220      	movs	r2, #32
 800364a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	330c      	adds	r3, #12
 800365a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	e853 3f00 	ldrex	r3, [r3]
 8003662:	60fb      	str	r3, [r7, #12]
   return(result);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f023 0310 	bic.w	r3, r3, #16
 800366a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	330c      	adds	r3, #12
 8003674:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003678:	61fa      	str	r2, [r7, #28]
 800367a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367c:	69b9      	ldr	r1, [r7, #24]
 800367e:	69fa      	ldr	r2, [r7, #28]
 8003680:	e841 2300 	strex	r3, r2, [r1]
 8003684:	617b      	str	r3, [r7, #20]
   return(result);
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1e3      	bne.n	8003654 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2202      	movs	r2, #2
 8003690:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003692:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003696:	4619      	mov	r1, r3
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 f844 	bl	8003726 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800369e:	e023      	b.n	80036e8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80036a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d009      	beq.n	80036c0 <HAL_UART_IRQHandler+0x4f4>
 80036ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d003      	beq.n	80036c0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f923 	bl	8003904 <UART_Transmit_IT>
    return;
 80036be:	e014      	b.n	80036ea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80036c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00e      	beq.n	80036ea <HAL_UART_IRQHandler+0x51e>
 80036cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d008      	beq.n	80036ea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 f962 	bl	80039a2 <UART_EndTransmit_IT>
    return;
 80036de:	e004      	b.n	80036ea <HAL_UART_IRQHandler+0x51e>
    return;
 80036e0:	bf00      	nop
 80036e2:	e002      	b.n	80036ea <HAL_UART_IRQHandler+0x51e>
      return;
 80036e4:	bf00      	nop
 80036e6:	e000      	b.n	80036ea <HAL_UART_IRQHandler+0x51e>
      return;
 80036e8:	bf00      	nop
  }
}
 80036ea:	37e8      	adds	r7, #232	; 0xe8
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bc80      	pop	{r7}
 8003700:	4770      	bx	lr

08003702 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003702:	b480      	push	{r7}
 8003704:	b083      	sub	sp, #12
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	bc80      	pop	{r7}
 8003712:	4770      	bx	lr

08003714 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	bc80      	pop	{r7}
 8003724:	4770      	bx	lr

08003726 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003726:	b480      	push	{r7}
 8003728:	b083      	sub	sp, #12
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
 800372e:	460b      	mov	r3, r1
 8003730:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003732:	bf00      	nop
 8003734:	370c      	adds	r7, #12
 8003736:	46bd      	mov	sp, r7
 8003738:	bc80      	pop	{r7}
 800373a:	4770      	bx	lr

0800373c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b090      	sub	sp, #64	; 0x40
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	603b      	str	r3, [r7, #0]
 8003748:	4613      	mov	r3, r2
 800374a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800374c:	e050      	b.n	80037f0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800374e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003754:	d04c      	beq.n	80037f0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003758:	2b00      	cmp	r3, #0
 800375a:	d007      	beq.n	800376c <UART_WaitOnFlagUntilTimeout+0x30>
 800375c:	f7fe f8e0 	bl	8001920 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003768:	429a      	cmp	r2, r3
 800376a:	d241      	bcs.n	80037f0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	330c      	adds	r3, #12
 8003772:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003776:	e853 3f00 	ldrex	r3, [r3]
 800377a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003782:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	330c      	adds	r3, #12
 800378a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800378c:	637a      	str	r2, [r7, #52]	; 0x34
 800378e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003790:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003792:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003794:	e841 2300 	strex	r3, r2, [r1]
 8003798:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800379a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1e5      	bne.n	800376c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	3314      	adds	r3, #20
 80037a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	e853 3f00 	ldrex	r3, [r3]
 80037ae:	613b      	str	r3, [r7, #16]
   return(result);
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	f023 0301 	bic.w	r3, r3, #1
 80037b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	3314      	adds	r3, #20
 80037be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037c0:	623a      	str	r2, [r7, #32]
 80037c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c4:	69f9      	ldr	r1, [r7, #28]
 80037c6:	6a3a      	ldr	r2, [r7, #32]
 80037c8:	e841 2300 	strex	r3, r2, [r1]
 80037cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1e5      	bne.n	80037a0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2220      	movs	r2, #32
 80037d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2220      	movs	r2, #32
 80037e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e00f      	b.n	8003810 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	4013      	ands	r3, r2
 80037fa:	68ba      	ldr	r2, [r7, #8]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	bf0c      	ite	eq
 8003800:	2301      	moveq	r3, #1
 8003802:	2300      	movne	r3, #0
 8003804:	b2db      	uxtb	r3, r3
 8003806:	461a      	mov	r2, r3
 8003808:	79fb      	ldrb	r3, [r7, #7]
 800380a:	429a      	cmp	r2, r3
 800380c:	d09f      	beq.n	800374e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3740      	adds	r7, #64	; 0x40
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003818:	b480      	push	{r7}
 800381a:	b095      	sub	sp, #84	; 0x54
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	330c      	adds	r3, #12
 8003826:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800382a:	e853 3f00 	ldrex	r3, [r3]
 800382e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003832:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003836:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	330c      	adds	r3, #12
 800383e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003840:	643a      	str	r2, [r7, #64]	; 0x40
 8003842:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003844:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003846:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003848:	e841 2300 	strex	r3, r2, [r1]
 800384c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800384e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1e5      	bne.n	8003820 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	3314      	adds	r3, #20
 800385a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385c:	6a3b      	ldr	r3, [r7, #32]
 800385e:	e853 3f00 	ldrex	r3, [r3]
 8003862:	61fb      	str	r3, [r7, #28]
   return(result);
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	f023 0301 	bic.w	r3, r3, #1
 800386a:	64bb      	str	r3, [r7, #72]	; 0x48
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	3314      	adds	r3, #20
 8003872:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003874:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003876:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003878:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800387a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800387c:	e841 2300 	strex	r3, r2, [r1]
 8003880:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1e5      	bne.n	8003854 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388c:	2b01      	cmp	r3, #1
 800388e:	d119      	bne.n	80038c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	330c      	adds	r3, #12
 8003896:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	e853 3f00 	ldrex	r3, [r3]
 800389e:	60bb      	str	r3, [r7, #8]
   return(result);
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	f023 0310 	bic.w	r3, r3, #16
 80038a6:	647b      	str	r3, [r7, #68]	; 0x44
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	330c      	adds	r3, #12
 80038ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038b0:	61ba      	str	r2, [r7, #24]
 80038b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b4:	6979      	ldr	r1, [r7, #20]
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	e841 2300 	strex	r3, r2, [r1]
 80038bc:	613b      	str	r3, [r7, #16]
   return(result);
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1e5      	bne.n	8003890 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2220      	movs	r2, #32
 80038c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80038d2:	bf00      	nop
 80038d4:	3754      	adds	r7, #84	; 0x54
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bc80      	pop	{r7}
 80038da:	4770      	bx	lr

080038dc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f7ff ff0c 	bl	8003714 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038fc:	bf00      	nop
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b21      	cmp	r3, #33	; 0x21
 8003916:	d13e      	bne.n	8003996 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003920:	d114      	bne.n	800394c <UART_Transmit_IT+0x48>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d110      	bne.n	800394c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	881b      	ldrh	r3, [r3, #0]
 8003934:	461a      	mov	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800393e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	1c9a      	adds	r2, r3, #2
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	621a      	str	r2, [r3, #32]
 800394a:	e008      	b.n	800395e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	1c59      	adds	r1, r3, #1
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	6211      	str	r1, [r2, #32]
 8003956:	781a      	ldrb	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003962:	b29b      	uxth	r3, r3
 8003964:	3b01      	subs	r3, #1
 8003966:	b29b      	uxth	r3, r3
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	4619      	mov	r1, r3
 800396c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10f      	bne.n	8003992 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68da      	ldr	r2, [r3, #12]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003980:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68da      	ldr	r2, [r3, #12]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003990:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003992:	2300      	movs	r3, #0
 8003994:	e000      	b.n	8003998 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003996:	2302      	movs	r3, #2
  }
}
 8003998:	4618      	mov	r0, r3
 800399a:	3714      	adds	r7, #20
 800399c:	46bd      	mov	sp, r7
 800399e:	bc80      	pop	{r7}
 80039a0:	4770      	bx	lr

080039a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b082      	sub	sp, #8
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68da      	ldr	r2, [r3, #12]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2220      	movs	r2, #32
 80039be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7ff fe94 	bl	80036f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b08c      	sub	sp, #48	; 0x30
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b22      	cmp	r3, #34	; 0x22
 80039e4:	f040 80ae 	bne.w	8003b44 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039f0:	d117      	bne.n	8003a22 <UART_Receive_IT+0x50>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d113      	bne.n	8003a22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80039fa:	2300      	movs	r3, #0
 80039fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a02:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1a:	1c9a      	adds	r2, r3, #2
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	629a      	str	r2, [r3, #40]	; 0x28
 8003a20:	e026      	b.n	8003a70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a26:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a34:	d007      	beq.n	8003a46 <UART_Receive_IT+0x74>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10a      	bne.n	8003a54 <UART_Receive_IT+0x82>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d106      	bne.n	8003a54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	b2da      	uxtb	r2, r3
 8003a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a50:	701a      	strb	r2, [r3, #0]
 8003a52:	e008      	b.n	8003a66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a60:	b2da      	uxtb	r2, r3
 8003a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6a:	1c5a      	adds	r2, r3, #1
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	3b01      	subs	r3, #1
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d15d      	bne.n	8003b40 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68da      	ldr	r2, [r3, #12]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 0220 	bic.w	r2, r2, #32
 8003a92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68da      	ldr	r2, [r3, #12]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003aa2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	695a      	ldr	r2, [r3, #20]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 0201 	bic.w	r2, r2, #1
 8003ab2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d135      	bne.n	8003b36 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	330c      	adds	r3, #12
 8003ad6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	e853 3f00 	ldrex	r3, [r3]
 8003ade:	613b      	str	r3, [r7, #16]
   return(result);
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	f023 0310 	bic.w	r3, r3, #16
 8003ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	330c      	adds	r3, #12
 8003aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003af0:	623a      	str	r2, [r7, #32]
 8003af2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af4:	69f9      	ldr	r1, [r7, #28]
 8003af6:	6a3a      	ldr	r2, [r7, #32]
 8003af8:	e841 2300 	strex	r3, r2, [r1]
 8003afc:	61bb      	str	r3, [r7, #24]
   return(result);
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1e5      	bne.n	8003ad0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0310 	and.w	r3, r3, #16
 8003b0e:	2b10      	cmp	r3, #16
 8003b10:	d10a      	bne.n	8003b28 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b12:	2300      	movs	r3, #0
 8003b14:	60fb      	str	r3, [r7, #12]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	60fb      	str	r3, [r7, #12]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	60fb      	str	r3, [r7, #12]
 8003b26:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7ff fdf9 	bl	8003726 <HAL_UARTEx_RxEventCallback>
 8003b34:	e002      	b.n	8003b3c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7ff fde3 	bl	8003702 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	e002      	b.n	8003b46 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003b40:	2300      	movs	r3, #0
 8003b42:	e000      	b.n	8003b46 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003b44:	2302      	movs	r3, #2
  }
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3730      	adds	r7, #48	; 0x30
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
	...

08003b50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68da      	ldr	r2, [r3, #12]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	689a      	ldr	r2, [r3, #8]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003b8a:	f023 030c 	bic.w	r3, r3, #12
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	6812      	ldr	r2, [r2, #0]
 8003b92:	68b9      	ldr	r1, [r7, #8]
 8003b94:	430b      	orrs	r3, r1
 8003b96:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	699a      	ldr	r2, [r3, #24]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a2c      	ldr	r2, [pc, #176]	; (8003c64 <UART_SetConfig+0x114>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d103      	bne.n	8003bc0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003bb8:	f7fe fe1a 	bl	80027f0 <HAL_RCC_GetPCLK2Freq>
 8003bbc:	60f8      	str	r0, [r7, #12]
 8003bbe:	e002      	b.n	8003bc6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003bc0:	f7fe fe02 	bl	80027c8 <HAL_RCC_GetPCLK1Freq>
 8003bc4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	4413      	add	r3, r2
 8003bce:	009a      	lsls	r2, r3, #2
 8003bd0:	441a      	add	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bdc:	4a22      	ldr	r2, [pc, #136]	; (8003c68 <UART_SetConfig+0x118>)
 8003bde:	fba2 2303 	umull	r2, r3, r2, r3
 8003be2:	095b      	lsrs	r3, r3, #5
 8003be4:	0119      	lsls	r1, r3, #4
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	4613      	mov	r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	4413      	add	r3, r2
 8003bee:	009a      	lsls	r2, r3, #2
 8003bf0:	441a      	add	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bfc:	4b1a      	ldr	r3, [pc, #104]	; (8003c68 <UART_SetConfig+0x118>)
 8003bfe:	fba3 0302 	umull	r0, r3, r3, r2
 8003c02:	095b      	lsrs	r3, r3, #5
 8003c04:	2064      	movs	r0, #100	; 0x64
 8003c06:	fb00 f303 	mul.w	r3, r0, r3
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	011b      	lsls	r3, r3, #4
 8003c0e:	3332      	adds	r3, #50	; 0x32
 8003c10:	4a15      	ldr	r2, [pc, #84]	; (8003c68 <UART_SetConfig+0x118>)
 8003c12:	fba2 2303 	umull	r2, r3, r2, r3
 8003c16:	095b      	lsrs	r3, r3, #5
 8003c18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c1c:	4419      	add	r1, r3
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	4613      	mov	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4413      	add	r3, r2
 8003c26:	009a      	lsls	r2, r3, #2
 8003c28:	441a      	add	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c34:	4b0c      	ldr	r3, [pc, #48]	; (8003c68 <UART_SetConfig+0x118>)
 8003c36:	fba3 0302 	umull	r0, r3, r3, r2
 8003c3a:	095b      	lsrs	r3, r3, #5
 8003c3c:	2064      	movs	r0, #100	; 0x64
 8003c3e:	fb00 f303 	mul.w	r3, r0, r3
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	011b      	lsls	r3, r3, #4
 8003c46:	3332      	adds	r3, #50	; 0x32
 8003c48:	4a07      	ldr	r2, [pc, #28]	; (8003c68 <UART_SetConfig+0x118>)
 8003c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4e:	095b      	lsrs	r3, r3, #5
 8003c50:	f003 020f 	and.w	r2, r3, #15
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	440a      	add	r2, r1
 8003c5a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c5c:	bf00      	nop
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	40013800 	.word	0x40013800
 8003c68:	51eb851f 	.word	0x51eb851f

08003c6c <__errno>:
 8003c6c:	4b01      	ldr	r3, [pc, #4]	; (8003c74 <__errno+0x8>)
 8003c6e:	6818      	ldr	r0, [r3, #0]
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	20000068 	.word	0x20000068

08003c78 <__libc_init_array>:
 8003c78:	b570      	push	{r4, r5, r6, lr}
 8003c7a:	2600      	movs	r6, #0
 8003c7c:	4d0c      	ldr	r5, [pc, #48]	; (8003cb0 <__libc_init_array+0x38>)
 8003c7e:	4c0d      	ldr	r4, [pc, #52]	; (8003cb4 <__libc_init_array+0x3c>)
 8003c80:	1b64      	subs	r4, r4, r5
 8003c82:	10a4      	asrs	r4, r4, #2
 8003c84:	42a6      	cmp	r6, r4
 8003c86:	d109      	bne.n	8003c9c <__libc_init_array+0x24>
 8003c88:	f000 fce4 	bl	8004654 <_init>
 8003c8c:	2600      	movs	r6, #0
 8003c8e:	4d0a      	ldr	r5, [pc, #40]	; (8003cb8 <__libc_init_array+0x40>)
 8003c90:	4c0a      	ldr	r4, [pc, #40]	; (8003cbc <__libc_init_array+0x44>)
 8003c92:	1b64      	subs	r4, r4, r5
 8003c94:	10a4      	asrs	r4, r4, #2
 8003c96:	42a6      	cmp	r6, r4
 8003c98:	d105      	bne.n	8003ca6 <__libc_init_array+0x2e>
 8003c9a:	bd70      	pop	{r4, r5, r6, pc}
 8003c9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ca0:	4798      	blx	r3
 8003ca2:	3601      	adds	r6, #1
 8003ca4:	e7ee      	b.n	8003c84 <__libc_init_array+0xc>
 8003ca6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003caa:	4798      	blx	r3
 8003cac:	3601      	adds	r6, #1
 8003cae:	e7f2      	b.n	8003c96 <__libc_init_array+0x1e>
 8003cb0:	08004834 	.word	0x08004834
 8003cb4:	08004834 	.word	0x08004834
 8003cb8:	08004834 	.word	0x08004834
 8003cbc:	08004838 	.word	0x08004838

08003cc0 <memset>:
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	4402      	add	r2, r0
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d100      	bne.n	8003cca <memset+0xa>
 8003cc8:	4770      	bx	lr
 8003cca:	f803 1b01 	strb.w	r1, [r3], #1
 8003cce:	e7f9      	b.n	8003cc4 <memset+0x4>

08003cd0 <_puts_r>:
 8003cd0:	b570      	push	{r4, r5, r6, lr}
 8003cd2:	460e      	mov	r6, r1
 8003cd4:	4605      	mov	r5, r0
 8003cd6:	b118      	cbz	r0, 8003ce0 <_puts_r+0x10>
 8003cd8:	6983      	ldr	r3, [r0, #24]
 8003cda:	b90b      	cbnz	r3, 8003ce0 <_puts_r+0x10>
 8003cdc:	f000 fa48 	bl	8004170 <__sinit>
 8003ce0:	69ab      	ldr	r3, [r5, #24]
 8003ce2:	68ac      	ldr	r4, [r5, #8]
 8003ce4:	b913      	cbnz	r3, 8003cec <_puts_r+0x1c>
 8003ce6:	4628      	mov	r0, r5
 8003ce8:	f000 fa42 	bl	8004170 <__sinit>
 8003cec:	4b2c      	ldr	r3, [pc, #176]	; (8003da0 <_puts_r+0xd0>)
 8003cee:	429c      	cmp	r4, r3
 8003cf0:	d120      	bne.n	8003d34 <_puts_r+0x64>
 8003cf2:	686c      	ldr	r4, [r5, #4]
 8003cf4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003cf6:	07db      	lsls	r3, r3, #31
 8003cf8:	d405      	bmi.n	8003d06 <_puts_r+0x36>
 8003cfa:	89a3      	ldrh	r3, [r4, #12]
 8003cfc:	0598      	lsls	r0, r3, #22
 8003cfe:	d402      	bmi.n	8003d06 <_puts_r+0x36>
 8003d00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d02:	f000 fad3 	bl	80042ac <__retarget_lock_acquire_recursive>
 8003d06:	89a3      	ldrh	r3, [r4, #12]
 8003d08:	0719      	lsls	r1, r3, #28
 8003d0a:	d51d      	bpl.n	8003d48 <_puts_r+0x78>
 8003d0c:	6923      	ldr	r3, [r4, #16]
 8003d0e:	b1db      	cbz	r3, 8003d48 <_puts_r+0x78>
 8003d10:	3e01      	subs	r6, #1
 8003d12:	68a3      	ldr	r3, [r4, #8]
 8003d14:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	60a3      	str	r3, [r4, #8]
 8003d1c:	bb39      	cbnz	r1, 8003d6e <_puts_r+0x9e>
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	da38      	bge.n	8003d94 <_puts_r+0xc4>
 8003d22:	4622      	mov	r2, r4
 8003d24:	210a      	movs	r1, #10
 8003d26:	4628      	mov	r0, r5
 8003d28:	f000 f848 	bl	8003dbc <__swbuf_r>
 8003d2c:	3001      	adds	r0, #1
 8003d2e:	d011      	beq.n	8003d54 <_puts_r+0x84>
 8003d30:	250a      	movs	r5, #10
 8003d32:	e011      	b.n	8003d58 <_puts_r+0x88>
 8003d34:	4b1b      	ldr	r3, [pc, #108]	; (8003da4 <_puts_r+0xd4>)
 8003d36:	429c      	cmp	r4, r3
 8003d38:	d101      	bne.n	8003d3e <_puts_r+0x6e>
 8003d3a:	68ac      	ldr	r4, [r5, #8]
 8003d3c:	e7da      	b.n	8003cf4 <_puts_r+0x24>
 8003d3e:	4b1a      	ldr	r3, [pc, #104]	; (8003da8 <_puts_r+0xd8>)
 8003d40:	429c      	cmp	r4, r3
 8003d42:	bf08      	it	eq
 8003d44:	68ec      	ldreq	r4, [r5, #12]
 8003d46:	e7d5      	b.n	8003cf4 <_puts_r+0x24>
 8003d48:	4621      	mov	r1, r4
 8003d4a:	4628      	mov	r0, r5
 8003d4c:	f000 f888 	bl	8003e60 <__swsetup_r>
 8003d50:	2800      	cmp	r0, #0
 8003d52:	d0dd      	beq.n	8003d10 <_puts_r+0x40>
 8003d54:	f04f 35ff 	mov.w	r5, #4294967295
 8003d58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d5a:	07da      	lsls	r2, r3, #31
 8003d5c:	d405      	bmi.n	8003d6a <_puts_r+0x9a>
 8003d5e:	89a3      	ldrh	r3, [r4, #12]
 8003d60:	059b      	lsls	r3, r3, #22
 8003d62:	d402      	bmi.n	8003d6a <_puts_r+0x9a>
 8003d64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d66:	f000 faa2 	bl	80042ae <__retarget_lock_release_recursive>
 8003d6a:	4628      	mov	r0, r5
 8003d6c:	bd70      	pop	{r4, r5, r6, pc}
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	da04      	bge.n	8003d7c <_puts_r+0xac>
 8003d72:	69a2      	ldr	r2, [r4, #24]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	dc06      	bgt.n	8003d86 <_puts_r+0xb6>
 8003d78:	290a      	cmp	r1, #10
 8003d7a:	d004      	beq.n	8003d86 <_puts_r+0xb6>
 8003d7c:	6823      	ldr	r3, [r4, #0]
 8003d7e:	1c5a      	adds	r2, r3, #1
 8003d80:	6022      	str	r2, [r4, #0]
 8003d82:	7019      	strb	r1, [r3, #0]
 8003d84:	e7c5      	b.n	8003d12 <_puts_r+0x42>
 8003d86:	4622      	mov	r2, r4
 8003d88:	4628      	mov	r0, r5
 8003d8a:	f000 f817 	bl	8003dbc <__swbuf_r>
 8003d8e:	3001      	adds	r0, #1
 8003d90:	d1bf      	bne.n	8003d12 <_puts_r+0x42>
 8003d92:	e7df      	b.n	8003d54 <_puts_r+0x84>
 8003d94:	250a      	movs	r5, #10
 8003d96:	6823      	ldr	r3, [r4, #0]
 8003d98:	1c5a      	adds	r2, r3, #1
 8003d9a:	6022      	str	r2, [r4, #0]
 8003d9c:	701d      	strb	r5, [r3, #0]
 8003d9e:	e7db      	b.n	8003d58 <_puts_r+0x88>
 8003da0:	080047f4 	.word	0x080047f4
 8003da4:	08004814 	.word	0x08004814
 8003da8:	080047d4 	.word	0x080047d4

08003dac <puts>:
 8003dac:	4b02      	ldr	r3, [pc, #8]	; (8003db8 <puts+0xc>)
 8003dae:	4601      	mov	r1, r0
 8003db0:	6818      	ldr	r0, [r3, #0]
 8003db2:	f7ff bf8d 	b.w	8003cd0 <_puts_r>
 8003db6:	bf00      	nop
 8003db8:	20000068 	.word	0x20000068

08003dbc <__swbuf_r>:
 8003dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dbe:	460e      	mov	r6, r1
 8003dc0:	4614      	mov	r4, r2
 8003dc2:	4605      	mov	r5, r0
 8003dc4:	b118      	cbz	r0, 8003dce <__swbuf_r+0x12>
 8003dc6:	6983      	ldr	r3, [r0, #24]
 8003dc8:	b90b      	cbnz	r3, 8003dce <__swbuf_r+0x12>
 8003dca:	f000 f9d1 	bl	8004170 <__sinit>
 8003dce:	4b21      	ldr	r3, [pc, #132]	; (8003e54 <__swbuf_r+0x98>)
 8003dd0:	429c      	cmp	r4, r3
 8003dd2:	d12b      	bne.n	8003e2c <__swbuf_r+0x70>
 8003dd4:	686c      	ldr	r4, [r5, #4]
 8003dd6:	69a3      	ldr	r3, [r4, #24]
 8003dd8:	60a3      	str	r3, [r4, #8]
 8003dda:	89a3      	ldrh	r3, [r4, #12]
 8003ddc:	071a      	lsls	r2, r3, #28
 8003dde:	d52f      	bpl.n	8003e40 <__swbuf_r+0x84>
 8003de0:	6923      	ldr	r3, [r4, #16]
 8003de2:	b36b      	cbz	r3, 8003e40 <__swbuf_r+0x84>
 8003de4:	6923      	ldr	r3, [r4, #16]
 8003de6:	6820      	ldr	r0, [r4, #0]
 8003de8:	b2f6      	uxtb	r6, r6
 8003dea:	1ac0      	subs	r0, r0, r3
 8003dec:	6963      	ldr	r3, [r4, #20]
 8003dee:	4637      	mov	r7, r6
 8003df0:	4283      	cmp	r3, r0
 8003df2:	dc04      	bgt.n	8003dfe <__swbuf_r+0x42>
 8003df4:	4621      	mov	r1, r4
 8003df6:	4628      	mov	r0, r5
 8003df8:	f000 f926 	bl	8004048 <_fflush_r>
 8003dfc:	bb30      	cbnz	r0, 8003e4c <__swbuf_r+0x90>
 8003dfe:	68a3      	ldr	r3, [r4, #8]
 8003e00:	3001      	adds	r0, #1
 8003e02:	3b01      	subs	r3, #1
 8003e04:	60a3      	str	r3, [r4, #8]
 8003e06:	6823      	ldr	r3, [r4, #0]
 8003e08:	1c5a      	adds	r2, r3, #1
 8003e0a:	6022      	str	r2, [r4, #0]
 8003e0c:	701e      	strb	r6, [r3, #0]
 8003e0e:	6963      	ldr	r3, [r4, #20]
 8003e10:	4283      	cmp	r3, r0
 8003e12:	d004      	beq.n	8003e1e <__swbuf_r+0x62>
 8003e14:	89a3      	ldrh	r3, [r4, #12]
 8003e16:	07db      	lsls	r3, r3, #31
 8003e18:	d506      	bpl.n	8003e28 <__swbuf_r+0x6c>
 8003e1a:	2e0a      	cmp	r6, #10
 8003e1c:	d104      	bne.n	8003e28 <__swbuf_r+0x6c>
 8003e1e:	4621      	mov	r1, r4
 8003e20:	4628      	mov	r0, r5
 8003e22:	f000 f911 	bl	8004048 <_fflush_r>
 8003e26:	b988      	cbnz	r0, 8003e4c <__swbuf_r+0x90>
 8003e28:	4638      	mov	r0, r7
 8003e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e2c:	4b0a      	ldr	r3, [pc, #40]	; (8003e58 <__swbuf_r+0x9c>)
 8003e2e:	429c      	cmp	r4, r3
 8003e30:	d101      	bne.n	8003e36 <__swbuf_r+0x7a>
 8003e32:	68ac      	ldr	r4, [r5, #8]
 8003e34:	e7cf      	b.n	8003dd6 <__swbuf_r+0x1a>
 8003e36:	4b09      	ldr	r3, [pc, #36]	; (8003e5c <__swbuf_r+0xa0>)
 8003e38:	429c      	cmp	r4, r3
 8003e3a:	bf08      	it	eq
 8003e3c:	68ec      	ldreq	r4, [r5, #12]
 8003e3e:	e7ca      	b.n	8003dd6 <__swbuf_r+0x1a>
 8003e40:	4621      	mov	r1, r4
 8003e42:	4628      	mov	r0, r5
 8003e44:	f000 f80c 	bl	8003e60 <__swsetup_r>
 8003e48:	2800      	cmp	r0, #0
 8003e4a:	d0cb      	beq.n	8003de4 <__swbuf_r+0x28>
 8003e4c:	f04f 37ff 	mov.w	r7, #4294967295
 8003e50:	e7ea      	b.n	8003e28 <__swbuf_r+0x6c>
 8003e52:	bf00      	nop
 8003e54:	080047f4 	.word	0x080047f4
 8003e58:	08004814 	.word	0x08004814
 8003e5c:	080047d4 	.word	0x080047d4

08003e60 <__swsetup_r>:
 8003e60:	4b32      	ldr	r3, [pc, #200]	; (8003f2c <__swsetup_r+0xcc>)
 8003e62:	b570      	push	{r4, r5, r6, lr}
 8003e64:	681d      	ldr	r5, [r3, #0]
 8003e66:	4606      	mov	r6, r0
 8003e68:	460c      	mov	r4, r1
 8003e6a:	b125      	cbz	r5, 8003e76 <__swsetup_r+0x16>
 8003e6c:	69ab      	ldr	r3, [r5, #24]
 8003e6e:	b913      	cbnz	r3, 8003e76 <__swsetup_r+0x16>
 8003e70:	4628      	mov	r0, r5
 8003e72:	f000 f97d 	bl	8004170 <__sinit>
 8003e76:	4b2e      	ldr	r3, [pc, #184]	; (8003f30 <__swsetup_r+0xd0>)
 8003e78:	429c      	cmp	r4, r3
 8003e7a:	d10f      	bne.n	8003e9c <__swsetup_r+0x3c>
 8003e7c:	686c      	ldr	r4, [r5, #4]
 8003e7e:	89a3      	ldrh	r3, [r4, #12]
 8003e80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e84:	0719      	lsls	r1, r3, #28
 8003e86:	d42c      	bmi.n	8003ee2 <__swsetup_r+0x82>
 8003e88:	06dd      	lsls	r5, r3, #27
 8003e8a:	d411      	bmi.n	8003eb0 <__swsetup_r+0x50>
 8003e8c:	2309      	movs	r3, #9
 8003e8e:	6033      	str	r3, [r6, #0]
 8003e90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003e94:	f04f 30ff 	mov.w	r0, #4294967295
 8003e98:	81a3      	strh	r3, [r4, #12]
 8003e9a:	e03e      	b.n	8003f1a <__swsetup_r+0xba>
 8003e9c:	4b25      	ldr	r3, [pc, #148]	; (8003f34 <__swsetup_r+0xd4>)
 8003e9e:	429c      	cmp	r4, r3
 8003ea0:	d101      	bne.n	8003ea6 <__swsetup_r+0x46>
 8003ea2:	68ac      	ldr	r4, [r5, #8]
 8003ea4:	e7eb      	b.n	8003e7e <__swsetup_r+0x1e>
 8003ea6:	4b24      	ldr	r3, [pc, #144]	; (8003f38 <__swsetup_r+0xd8>)
 8003ea8:	429c      	cmp	r4, r3
 8003eaa:	bf08      	it	eq
 8003eac:	68ec      	ldreq	r4, [r5, #12]
 8003eae:	e7e6      	b.n	8003e7e <__swsetup_r+0x1e>
 8003eb0:	0758      	lsls	r0, r3, #29
 8003eb2:	d512      	bpl.n	8003eda <__swsetup_r+0x7a>
 8003eb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003eb6:	b141      	cbz	r1, 8003eca <__swsetup_r+0x6a>
 8003eb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ebc:	4299      	cmp	r1, r3
 8003ebe:	d002      	beq.n	8003ec6 <__swsetup_r+0x66>
 8003ec0:	4630      	mov	r0, r6
 8003ec2:	f000 fa59 	bl	8004378 <_free_r>
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	6363      	str	r3, [r4, #52]	; 0x34
 8003eca:	89a3      	ldrh	r3, [r4, #12]
 8003ecc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003ed0:	81a3      	strh	r3, [r4, #12]
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	6063      	str	r3, [r4, #4]
 8003ed6:	6923      	ldr	r3, [r4, #16]
 8003ed8:	6023      	str	r3, [r4, #0]
 8003eda:	89a3      	ldrh	r3, [r4, #12]
 8003edc:	f043 0308 	orr.w	r3, r3, #8
 8003ee0:	81a3      	strh	r3, [r4, #12]
 8003ee2:	6923      	ldr	r3, [r4, #16]
 8003ee4:	b94b      	cbnz	r3, 8003efa <__swsetup_r+0x9a>
 8003ee6:	89a3      	ldrh	r3, [r4, #12]
 8003ee8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003eec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ef0:	d003      	beq.n	8003efa <__swsetup_r+0x9a>
 8003ef2:	4621      	mov	r1, r4
 8003ef4:	4630      	mov	r0, r6
 8003ef6:	f000 f9ff 	bl	80042f8 <__smakebuf_r>
 8003efa:	89a0      	ldrh	r0, [r4, #12]
 8003efc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f00:	f010 0301 	ands.w	r3, r0, #1
 8003f04:	d00a      	beq.n	8003f1c <__swsetup_r+0xbc>
 8003f06:	2300      	movs	r3, #0
 8003f08:	60a3      	str	r3, [r4, #8]
 8003f0a:	6963      	ldr	r3, [r4, #20]
 8003f0c:	425b      	negs	r3, r3
 8003f0e:	61a3      	str	r3, [r4, #24]
 8003f10:	6923      	ldr	r3, [r4, #16]
 8003f12:	b943      	cbnz	r3, 8003f26 <__swsetup_r+0xc6>
 8003f14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003f18:	d1ba      	bne.n	8003e90 <__swsetup_r+0x30>
 8003f1a:	bd70      	pop	{r4, r5, r6, pc}
 8003f1c:	0781      	lsls	r1, r0, #30
 8003f1e:	bf58      	it	pl
 8003f20:	6963      	ldrpl	r3, [r4, #20]
 8003f22:	60a3      	str	r3, [r4, #8]
 8003f24:	e7f4      	b.n	8003f10 <__swsetup_r+0xb0>
 8003f26:	2000      	movs	r0, #0
 8003f28:	e7f7      	b.n	8003f1a <__swsetup_r+0xba>
 8003f2a:	bf00      	nop
 8003f2c:	20000068 	.word	0x20000068
 8003f30:	080047f4 	.word	0x080047f4
 8003f34:	08004814 	.word	0x08004814
 8003f38:	080047d4 	.word	0x080047d4

08003f3c <__sflush_r>:
 8003f3c:	898a      	ldrh	r2, [r1, #12]
 8003f3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f42:	4605      	mov	r5, r0
 8003f44:	0710      	lsls	r0, r2, #28
 8003f46:	460c      	mov	r4, r1
 8003f48:	d458      	bmi.n	8003ffc <__sflush_r+0xc0>
 8003f4a:	684b      	ldr	r3, [r1, #4]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	dc05      	bgt.n	8003f5c <__sflush_r+0x20>
 8003f50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	dc02      	bgt.n	8003f5c <__sflush_r+0x20>
 8003f56:	2000      	movs	r0, #0
 8003f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f5e:	2e00      	cmp	r6, #0
 8003f60:	d0f9      	beq.n	8003f56 <__sflush_r+0x1a>
 8003f62:	2300      	movs	r3, #0
 8003f64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003f68:	682f      	ldr	r7, [r5, #0]
 8003f6a:	602b      	str	r3, [r5, #0]
 8003f6c:	d032      	beq.n	8003fd4 <__sflush_r+0x98>
 8003f6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003f70:	89a3      	ldrh	r3, [r4, #12]
 8003f72:	075a      	lsls	r2, r3, #29
 8003f74:	d505      	bpl.n	8003f82 <__sflush_r+0x46>
 8003f76:	6863      	ldr	r3, [r4, #4]
 8003f78:	1ac0      	subs	r0, r0, r3
 8003f7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f7c:	b10b      	cbz	r3, 8003f82 <__sflush_r+0x46>
 8003f7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f80:	1ac0      	subs	r0, r0, r3
 8003f82:	2300      	movs	r3, #0
 8003f84:	4602      	mov	r2, r0
 8003f86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f88:	4628      	mov	r0, r5
 8003f8a:	6a21      	ldr	r1, [r4, #32]
 8003f8c:	47b0      	blx	r6
 8003f8e:	1c43      	adds	r3, r0, #1
 8003f90:	89a3      	ldrh	r3, [r4, #12]
 8003f92:	d106      	bne.n	8003fa2 <__sflush_r+0x66>
 8003f94:	6829      	ldr	r1, [r5, #0]
 8003f96:	291d      	cmp	r1, #29
 8003f98:	d82c      	bhi.n	8003ff4 <__sflush_r+0xb8>
 8003f9a:	4a2a      	ldr	r2, [pc, #168]	; (8004044 <__sflush_r+0x108>)
 8003f9c:	40ca      	lsrs	r2, r1
 8003f9e:	07d6      	lsls	r6, r2, #31
 8003fa0:	d528      	bpl.n	8003ff4 <__sflush_r+0xb8>
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	6062      	str	r2, [r4, #4]
 8003fa6:	6922      	ldr	r2, [r4, #16]
 8003fa8:	04d9      	lsls	r1, r3, #19
 8003faa:	6022      	str	r2, [r4, #0]
 8003fac:	d504      	bpl.n	8003fb8 <__sflush_r+0x7c>
 8003fae:	1c42      	adds	r2, r0, #1
 8003fb0:	d101      	bne.n	8003fb6 <__sflush_r+0x7a>
 8003fb2:	682b      	ldr	r3, [r5, #0]
 8003fb4:	b903      	cbnz	r3, 8003fb8 <__sflush_r+0x7c>
 8003fb6:	6560      	str	r0, [r4, #84]	; 0x54
 8003fb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003fba:	602f      	str	r7, [r5, #0]
 8003fbc:	2900      	cmp	r1, #0
 8003fbe:	d0ca      	beq.n	8003f56 <__sflush_r+0x1a>
 8003fc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003fc4:	4299      	cmp	r1, r3
 8003fc6:	d002      	beq.n	8003fce <__sflush_r+0x92>
 8003fc8:	4628      	mov	r0, r5
 8003fca:	f000 f9d5 	bl	8004378 <_free_r>
 8003fce:	2000      	movs	r0, #0
 8003fd0:	6360      	str	r0, [r4, #52]	; 0x34
 8003fd2:	e7c1      	b.n	8003f58 <__sflush_r+0x1c>
 8003fd4:	6a21      	ldr	r1, [r4, #32]
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	4628      	mov	r0, r5
 8003fda:	47b0      	blx	r6
 8003fdc:	1c41      	adds	r1, r0, #1
 8003fde:	d1c7      	bne.n	8003f70 <__sflush_r+0x34>
 8003fe0:	682b      	ldr	r3, [r5, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0c4      	beq.n	8003f70 <__sflush_r+0x34>
 8003fe6:	2b1d      	cmp	r3, #29
 8003fe8:	d001      	beq.n	8003fee <__sflush_r+0xb2>
 8003fea:	2b16      	cmp	r3, #22
 8003fec:	d101      	bne.n	8003ff2 <__sflush_r+0xb6>
 8003fee:	602f      	str	r7, [r5, #0]
 8003ff0:	e7b1      	b.n	8003f56 <__sflush_r+0x1a>
 8003ff2:	89a3      	ldrh	r3, [r4, #12]
 8003ff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ff8:	81a3      	strh	r3, [r4, #12]
 8003ffa:	e7ad      	b.n	8003f58 <__sflush_r+0x1c>
 8003ffc:	690f      	ldr	r7, [r1, #16]
 8003ffe:	2f00      	cmp	r7, #0
 8004000:	d0a9      	beq.n	8003f56 <__sflush_r+0x1a>
 8004002:	0793      	lsls	r3, r2, #30
 8004004:	bf18      	it	ne
 8004006:	2300      	movne	r3, #0
 8004008:	680e      	ldr	r6, [r1, #0]
 800400a:	bf08      	it	eq
 800400c:	694b      	ldreq	r3, [r1, #20]
 800400e:	eba6 0807 	sub.w	r8, r6, r7
 8004012:	600f      	str	r7, [r1, #0]
 8004014:	608b      	str	r3, [r1, #8]
 8004016:	f1b8 0f00 	cmp.w	r8, #0
 800401a:	dd9c      	ble.n	8003f56 <__sflush_r+0x1a>
 800401c:	4643      	mov	r3, r8
 800401e:	463a      	mov	r2, r7
 8004020:	4628      	mov	r0, r5
 8004022:	6a21      	ldr	r1, [r4, #32]
 8004024:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004026:	47b0      	blx	r6
 8004028:	2800      	cmp	r0, #0
 800402a:	dc06      	bgt.n	800403a <__sflush_r+0xfe>
 800402c:	89a3      	ldrh	r3, [r4, #12]
 800402e:	f04f 30ff 	mov.w	r0, #4294967295
 8004032:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004036:	81a3      	strh	r3, [r4, #12]
 8004038:	e78e      	b.n	8003f58 <__sflush_r+0x1c>
 800403a:	4407      	add	r7, r0
 800403c:	eba8 0800 	sub.w	r8, r8, r0
 8004040:	e7e9      	b.n	8004016 <__sflush_r+0xda>
 8004042:	bf00      	nop
 8004044:	20400001 	.word	0x20400001

08004048 <_fflush_r>:
 8004048:	b538      	push	{r3, r4, r5, lr}
 800404a:	690b      	ldr	r3, [r1, #16]
 800404c:	4605      	mov	r5, r0
 800404e:	460c      	mov	r4, r1
 8004050:	b913      	cbnz	r3, 8004058 <_fflush_r+0x10>
 8004052:	2500      	movs	r5, #0
 8004054:	4628      	mov	r0, r5
 8004056:	bd38      	pop	{r3, r4, r5, pc}
 8004058:	b118      	cbz	r0, 8004062 <_fflush_r+0x1a>
 800405a:	6983      	ldr	r3, [r0, #24]
 800405c:	b90b      	cbnz	r3, 8004062 <_fflush_r+0x1a>
 800405e:	f000 f887 	bl	8004170 <__sinit>
 8004062:	4b14      	ldr	r3, [pc, #80]	; (80040b4 <_fflush_r+0x6c>)
 8004064:	429c      	cmp	r4, r3
 8004066:	d11b      	bne.n	80040a0 <_fflush_r+0x58>
 8004068:	686c      	ldr	r4, [r5, #4]
 800406a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0ef      	beq.n	8004052 <_fflush_r+0xa>
 8004072:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004074:	07d0      	lsls	r0, r2, #31
 8004076:	d404      	bmi.n	8004082 <_fflush_r+0x3a>
 8004078:	0599      	lsls	r1, r3, #22
 800407a:	d402      	bmi.n	8004082 <_fflush_r+0x3a>
 800407c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800407e:	f000 f915 	bl	80042ac <__retarget_lock_acquire_recursive>
 8004082:	4628      	mov	r0, r5
 8004084:	4621      	mov	r1, r4
 8004086:	f7ff ff59 	bl	8003f3c <__sflush_r>
 800408a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800408c:	4605      	mov	r5, r0
 800408e:	07da      	lsls	r2, r3, #31
 8004090:	d4e0      	bmi.n	8004054 <_fflush_r+0xc>
 8004092:	89a3      	ldrh	r3, [r4, #12]
 8004094:	059b      	lsls	r3, r3, #22
 8004096:	d4dd      	bmi.n	8004054 <_fflush_r+0xc>
 8004098:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800409a:	f000 f908 	bl	80042ae <__retarget_lock_release_recursive>
 800409e:	e7d9      	b.n	8004054 <_fflush_r+0xc>
 80040a0:	4b05      	ldr	r3, [pc, #20]	; (80040b8 <_fflush_r+0x70>)
 80040a2:	429c      	cmp	r4, r3
 80040a4:	d101      	bne.n	80040aa <_fflush_r+0x62>
 80040a6:	68ac      	ldr	r4, [r5, #8]
 80040a8:	e7df      	b.n	800406a <_fflush_r+0x22>
 80040aa:	4b04      	ldr	r3, [pc, #16]	; (80040bc <_fflush_r+0x74>)
 80040ac:	429c      	cmp	r4, r3
 80040ae:	bf08      	it	eq
 80040b0:	68ec      	ldreq	r4, [r5, #12]
 80040b2:	e7da      	b.n	800406a <_fflush_r+0x22>
 80040b4:	080047f4 	.word	0x080047f4
 80040b8:	08004814 	.word	0x08004814
 80040bc:	080047d4 	.word	0x080047d4

080040c0 <std>:
 80040c0:	2300      	movs	r3, #0
 80040c2:	b510      	push	{r4, lr}
 80040c4:	4604      	mov	r4, r0
 80040c6:	e9c0 3300 	strd	r3, r3, [r0]
 80040ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80040ce:	6083      	str	r3, [r0, #8]
 80040d0:	8181      	strh	r1, [r0, #12]
 80040d2:	6643      	str	r3, [r0, #100]	; 0x64
 80040d4:	81c2      	strh	r2, [r0, #14]
 80040d6:	6183      	str	r3, [r0, #24]
 80040d8:	4619      	mov	r1, r3
 80040da:	2208      	movs	r2, #8
 80040dc:	305c      	adds	r0, #92	; 0x5c
 80040de:	f7ff fdef 	bl	8003cc0 <memset>
 80040e2:	4b05      	ldr	r3, [pc, #20]	; (80040f8 <std+0x38>)
 80040e4:	6224      	str	r4, [r4, #32]
 80040e6:	6263      	str	r3, [r4, #36]	; 0x24
 80040e8:	4b04      	ldr	r3, [pc, #16]	; (80040fc <std+0x3c>)
 80040ea:	62a3      	str	r3, [r4, #40]	; 0x28
 80040ec:	4b04      	ldr	r3, [pc, #16]	; (8004100 <std+0x40>)
 80040ee:	62e3      	str	r3, [r4, #44]	; 0x2c
 80040f0:	4b04      	ldr	r3, [pc, #16]	; (8004104 <std+0x44>)
 80040f2:	6323      	str	r3, [r4, #48]	; 0x30
 80040f4:	bd10      	pop	{r4, pc}
 80040f6:	bf00      	nop
 80040f8:	080044e5 	.word	0x080044e5
 80040fc:	08004507 	.word	0x08004507
 8004100:	0800453f 	.word	0x0800453f
 8004104:	08004563 	.word	0x08004563

08004108 <_cleanup_r>:
 8004108:	4901      	ldr	r1, [pc, #4]	; (8004110 <_cleanup_r+0x8>)
 800410a:	f000 b8af 	b.w	800426c <_fwalk_reent>
 800410e:	bf00      	nop
 8004110:	08004049 	.word	0x08004049

08004114 <__sfmoreglue>:
 8004114:	b570      	push	{r4, r5, r6, lr}
 8004116:	2568      	movs	r5, #104	; 0x68
 8004118:	1e4a      	subs	r2, r1, #1
 800411a:	4355      	muls	r5, r2
 800411c:	460e      	mov	r6, r1
 800411e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004122:	f000 f975 	bl	8004410 <_malloc_r>
 8004126:	4604      	mov	r4, r0
 8004128:	b140      	cbz	r0, 800413c <__sfmoreglue+0x28>
 800412a:	2100      	movs	r1, #0
 800412c:	e9c0 1600 	strd	r1, r6, [r0]
 8004130:	300c      	adds	r0, #12
 8004132:	60a0      	str	r0, [r4, #8]
 8004134:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004138:	f7ff fdc2 	bl	8003cc0 <memset>
 800413c:	4620      	mov	r0, r4
 800413e:	bd70      	pop	{r4, r5, r6, pc}

08004140 <__sfp_lock_acquire>:
 8004140:	4801      	ldr	r0, [pc, #4]	; (8004148 <__sfp_lock_acquire+0x8>)
 8004142:	f000 b8b3 	b.w	80042ac <__retarget_lock_acquire_recursive>
 8004146:	bf00      	nop
 8004148:	20000200 	.word	0x20000200

0800414c <__sfp_lock_release>:
 800414c:	4801      	ldr	r0, [pc, #4]	; (8004154 <__sfp_lock_release+0x8>)
 800414e:	f000 b8ae 	b.w	80042ae <__retarget_lock_release_recursive>
 8004152:	bf00      	nop
 8004154:	20000200 	.word	0x20000200

08004158 <__sinit_lock_acquire>:
 8004158:	4801      	ldr	r0, [pc, #4]	; (8004160 <__sinit_lock_acquire+0x8>)
 800415a:	f000 b8a7 	b.w	80042ac <__retarget_lock_acquire_recursive>
 800415e:	bf00      	nop
 8004160:	200001fb 	.word	0x200001fb

08004164 <__sinit_lock_release>:
 8004164:	4801      	ldr	r0, [pc, #4]	; (800416c <__sinit_lock_release+0x8>)
 8004166:	f000 b8a2 	b.w	80042ae <__retarget_lock_release_recursive>
 800416a:	bf00      	nop
 800416c:	200001fb 	.word	0x200001fb

08004170 <__sinit>:
 8004170:	b510      	push	{r4, lr}
 8004172:	4604      	mov	r4, r0
 8004174:	f7ff fff0 	bl	8004158 <__sinit_lock_acquire>
 8004178:	69a3      	ldr	r3, [r4, #24]
 800417a:	b11b      	cbz	r3, 8004184 <__sinit+0x14>
 800417c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004180:	f7ff bff0 	b.w	8004164 <__sinit_lock_release>
 8004184:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004188:	6523      	str	r3, [r4, #80]	; 0x50
 800418a:	4b13      	ldr	r3, [pc, #76]	; (80041d8 <__sinit+0x68>)
 800418c:	4a13      	ldr	r2, [pc, #76]	; (80041dc <__sinit+0x6c>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	62a2      	str	r2, [r4, #40]	; 0x28
 8004192:	42a3      	cmp	r3, r4
 8004194:	bf08      	it	eq
 8004196:	2301      	moveq	r3, #1
 8004198:	4620      	mov	r0, r4
 800419a:	bf08      	it	eq
 800419c:	61a3      	streq	r3, [r4, #24]
 800419e:	f000 f81f 	bl	80041e0 <__sfp>
 80041a2:	6060      	str	r0, [r4, #4]
 80041a4:	4620      	mov	r0, r4
 80041a6:	f000 f81b 	bl	80041e0 <__sfp>
 80041aa:	60a0      	str	r0, [r4, #8]
 80041ac:	4620      	mov	r0, r4
 80041ae:	f000 f817 	bl	80041e0 <__sfp>
 80041b2:	2200      	movs	r2, #0
 80041b4:	2104      	movs	r1, #4
 80041b6:	60e0      	str	r0, [r4, #12]
 80041b8:	6860      	ldr	r0, [r4, #4]
 80041ba:	f7ff ff81 	bl	80040c0 <std>
 80041be:	2201      	movs	r2, #1
 80041c0:	2109      	movs	r1, #9
 80041c2:	68a0      	ldr	r0, [r4, #8]
 80041c4:	f7ff ff7c 	bl	80040c0 <std>
 80041c8:	2202      	movs	r2, #2
 80041ca:	2112      	movs	r1, #18
 80041cc:	68e0      	ldr	r0, [r4, #12]
 80041ce:	f7ff ff77 	bl	80040c0 <std>
 80041d2:	2301      	movs	r3, #1
 80041d4:	61a3      	str	r3, [r4, #24]
 80041d6:	e7d1      	b.n	800417c <__sinit+0xc>
 80041d8:	080047d0 	.word	0x080047d0
 80041dc:	08004109 	.word	0x08004109

080041e0 <__sfp>:
 80041e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041e2:	4607      	mov	r7, r0
 80041e4:	f7ff ffac 	bl	8004140 <__sfp_lock_acquire>
 80041e8:	4b1e      	ldr	r3, [pc, #120]	; (8004264 <__sfp+0x84>)
 80041ea:	681e      	ldr	r6, [r3, #0]
 80041ec:	69b3      	ldr	r3, [r6, #24]
 80041ee:	b913      	cbnz	r3, 80041f6 <__sfp+0x16>
 80041f0:	4630      	mov	r0, r6
 80041f2:	f7ff ffbd 	bl	8004170 <__sinit>
 80041f6:	3648      	adds	r6, #72	; 0x48
 80041f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80041fc:	3b01      	subs	r3, #1
 80041fe:	d503      	bpl.n	8004208 <__sfp+0x28>
 8004200:	6833      	ldr	r3, [r6, #0]
 8004202:	b30b      	cbz	r3, 8004248 <__sfp+0x68>
 8004204:	6836      	ldr	r6, [r6, #0]
 8004206:	e7f7      	b.n	80041f8 <__sfp+0x18>
 8004208:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800420c:	b9d5      	cbnz	r5, 8004244 <__sfp+0x64>
 800420e:	4b16      	ldr	r3, [pc, #88]	; (8004268 <__sfp+0x88>)
 8004210:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004214:	60e3      	str	r3, [r4, #12]
 8004216:	6665      	str	r5, [r4, #100]	; 0x64
 8004218:	f000 f847 	bl	80042aa <__retarget_lock_init_recursive>
 800421c:	f7ff ff96 	bl	800414c <__sfp_lock_release>
 8004220:	2208      	movs	r2, #8
 8004222:	4629      	mov	r1, r5
 8004224:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004228:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800422c:	6025      	str	r5, [r4, #0]
 800422e:	61a5      	str	r5, [r4, #24]
 8004230:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004234:	f7ff fd44 	bl	8003cc0 <memset>
 8004238:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800423c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004240:	4620      	mov	r0, r4
 8004242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004244:	3468      	adds	r4, #104	; 0x68
 8004246:	e7d9      	b.n	80041fc <__sfp+0x1c>
 8004248:	2104      	movs	r1, #4
 800424a:	4638      	mov	r0, r7
 800424c:	f7ff ff62 	bl	8004114 <__sfmoreglue>
 8004250:	4604      	mov	r4, r0
 8004252:	6030      	str	r0, [r6, #0]
 8004254:	2800      	cmp	r0, #0
 8004256:	d1d5      	bne.n	8004204 <__sfp+0x24>
 8004258:	f7ff ff78 	bl	800414c <__sfp_lock_release>
 800425c:	230c      	movs	r3, #12
 800425e:	603b      	str	r3, [r7, #0]
 8004260:	e7ee      	b.n	8004240 <__sfp+0x60>
 8004262:	bf00      	nop
 8004264:	080047d0 	.word	0x080047d0
 8004268:	ffff0001 	.word	0xffff0001

0800426c <_fwalk_reent>:
 800426c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004270:	4606      	mov	r6, r0
 8004272:	4688      	mov	r8, r1
 8004274:	2700      	movs	r7, #0
 8004276:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800427a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800427e:	f1b9 0901 	subs.w	r9, r9, #1
 8004282:	d505      	bpl.n	8004290 <_fwalk_reent+0x24>
 8004284:	6824      	ldr	r4, [r4, #0]
 8004286:	2c00      	cmp	r4, #0
 8004288:	d1f7      	bne.n	800427a <_fwalk_reent+0xe>
 800428a:	4638      	mov	r0, r7
 800428c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004290:	89ab      	ldrh	r3, [r5, #12]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d907      	bls.n	80042a6 <_fwalk_reent+0x3a>
 8004296:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800429a:	3301      	adds	r3, #1
 800429c:	d003      	beq.n	80042a6 <_fwalk_reent+0x3a>
 800429e:	4629      	mov	r1, r5
 80042a0:	4630      	mov	r0, r6
 80042a2:	47c0      	blx	r8
 80042a4:	4307      	orrs	r7, r0
 80042a6:	3568      	adds	r5, #104	; 0x68
 80042a8:	e7e9      	b.n	800427e <_fwalk_reent+0x12>

080042aa <__retarget_lock_init_recursive>:
 80042aa:	4770      	bx	lr

080042ac <__retarget_lock_acquire_recursive>:
 80042ac:	4770      	bx	lr

080042ae <__retarget_lock_release_recursive>:
 80042ae:	4770      	bx	lr

080042b0 <__swhatbuf_r>:
 80042b0:	b570      	push	{r4, r5, r6, lr}
 80042b2:	460e      	mov	r6, r1
 80042b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042b8:	4614      	mov	r4, r2
 80042ba:	2900      	cmp	r1, #0
 80042bc:	461d      	mov	r5, r3
 80042be:	b096      	sub	sp, #88	; 0x58
 80042c0:	da07      	bge.n	80042d2 <__swhatbuf_r+0x22>
 80042c2:	2300      	movs	r3, #0
 80042c4:	602b      	str	r3, [r5, #0]
 80042c6:	89b3      	ldrh	r3, [r6, #12]
 80042c8:	061a      	lsls	r2, r3, #24
 80042ca:	d410      	bmi.n	80042ee <__swhatbuf_r+0x3e>
 80042cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042d0:	e00e      	b.n	80042f0 <__swhatbuf_r+0x40>
 80042d2:	466a      	mov	r2, sp
 80042d4:	f000 f96c 	bl	80045b0 <_fstat_r>
 80042d8:	2800      	cmp	r0, #0
 80042da:	dbf2      	blt.n	80042c2 <__swhatbuf_r+0x12>
 80042dc:	9a01      	ldr	r2, [sp, #4]
 80042de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80042e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80042e6:	425a      	negs	r2, r3
 80042e8:	415a      	adcs	r2, r3
 80042ea:	602a      	str	r2, [r5, #0]
 80042ec:	e7ee      	b.n	80042cc <__swhatbuf_r+0x1c>
 80042ee:	2340      	movs	r3, #64	; 0x40
 80042f0:	2000      	movs	r0, #0
 80042f2:	6023      	str	r3, [r4, #0]
 80042f4:	b016      	add	sp, #88	; 0x58
 80042f6:	bd70      	pop	{r4, r5, r6, pc}

080042f8 <__smakebuf_r>:
 80042f8:	898b      	ldrh	r3, [r1, #12]
 80042fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80042fc:	079d      	lsls	r5, r3, #30
 80042fe:	4606      	mov	r6, r0
 8004300:	460c      	mov	r4, r1
 8004302:	d507      	bpl.n	8004314 <__smakebuf_r+0x1c>
 8004304:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004308:	6023      	str	r3, [r4, #0]
 800430a:	6123      	str	r3, [r4, #16]
 800430c:	2301      	movs	r3, #1
 800430e:	6163      	str	r3, [r4, #20]
 8004310:	b002      	add	sp, #8
 8004312:	bd70      	pop	{r4, r5, r6, pc}
 8004314:	466a      	mov	r2, sp
 8004316:	ab01      	add	r3, sp, #4
 8004318:	f7ff ffca 	bl	80042b0 <__swhatbuf_r>
 800431c:	9900      	ldr	r1, [sp, #0]
 800431e:	4605      	mov	r5, r0
 8004320:	4630      	mov	r0, r6
 8004322:	f000 f875 	bl	8004410 <_malloc_r>
 8004326:	b948      	cbnz	r0, 800433c <__smakebuf_r+0x44>
 8004328:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800432c:	059a      	lsls	r2, r3, #22
 800432e:	d4ef      	bmi.n	8004310 <__smakebuf_r+0x18>
 8004330:	f023 0303 	bic.w	r3, r3, #3
 8004334:	f043 0302 	orr.w	r3, r3, #2
 8004338:	81a3      	strh	r3, [r4, #12]
 800433a:	e7e3      	b.n	8004304 <__smakebuf_r+0xc>
 800433c:	4b0d      	ldr	r3, [pc, #52]	; (8004374 <__smakebuf_r+0x7c>)
 800433e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004340:	89a3      	ldrh	r3, [r4, #12]
 8004342:	6020      	str	r0, [r4, #0]
 8004344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004348:	81a3      	strh	r3, [r4, #12]
 800434a:	9b00      	ldr	r3, [sp, #0]
 800434c:	6120      	str	r0, [r4, #16]
 800434e:	6163      	str	r3, [r4, #20]
 8004350:	9b01      	ldr	r3, [sp, #4]
 8004352:	b15b      	cbz	r3, 800436c <__smakebuf_r+0x74>
 8004354:	4630      	mov	r0, r6
 8004356:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800435a:	f000 f93b 	bl	80045d4 <_isatty_r>
 800435e:	b128      	cbz	r0, 800436c <__smakebuf_r+0x74>
 8004360:	89a3      	ldrh	r3, [r4, #12]
 8004362:	f023 0303 	bic.w	r3, r3, #3
 8004366:	f043 0301 	orr.w	r3, r3, #1
 800436a:	81a3      	strh	r3, [r4, #12]
 800436c:	89a0      	ldrh	r0, [r4, #12]
 800436e:	4305      	orrs	r5, r0
 8004370:	81a5      	strh	r5, [r4, #12]
 8004372:	e7cd      	b.n	8004310 <__smakebuf_r+0x18>
 8004374:	08004109 	.word	0x08004109

08004378 <_free_r>:
 8004378:	b538      	push	{r3, r4, r5, lr}
 800437a:	4605      	mov	r5, r0
 800437c:	2900      	cmp	r1, #0
 800437e:	d043      	beq.n	8004408 <_free_r+0x90>
 8004380:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004384:	1f0c      	subs	r4, r1, #4
 8004386:	2b00      	cmp	r3, #0
 8004388:	bfb8      	it	lt
 800438a:	18e4      	addlt	r4, r4, r3
 800438c:	f000 f944 	bl	8004618 <__malloc_lock>
 8004390:	4a1e      	ldr	r2, [pc, #120]	; (800440c <_free_r+0x94>)
 8004392:	6813      	ldr	r3, [r2, #0]
 8004394:	4610      	mov	r0, r2
 8004396:	b933      	cbnz	r3, 80043a6 <_free_r+0x2e>
 8004398:	6063      	str	r3, [r4, #4]
 800439a:	6014      	str	r4, [r2, #0]
 800439c:	4628      	mov	r0, r5
 800439e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043a2:	f000 b93f 	b.w	8004624 <__malloc_unlock>
 80043a6:	42a3      	cmp	r3, r4
 80043a8:	d90a      	bls.n	80043c0 <_free_r+0x48>
 80043aa:	6821      	ldr	r1, [r4, #0]
 80043ac:	1862      	adds	r2, r4, r1
 80043ae:	4293      	cmp	r3, r2
 80043b0:	bf01      	itttt	eq
 80043b2:	681a      	ldreq	r2, [r3, #0]
 80043b4:	685b      	ldreq	r3, [r3, #4]
 80043b6:	1852      	addeq	r2, r2, r1
 80043b8:	6022      	streq	r2, [r4, #0]
 80043ba:	6063      	str	r3, [r4, #4]
 80043bc:	6004      	str	r4, [r0, #0]
 80043be:	e7ed      	b.n	800439c <_free_r+0x24>
 80043c0:	461a      	mov	r2, r3
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	b10b      	cbz	r3, 80043ca <_free_r+0x52>
 80043c6:	42a3      	cmp	r3, r4
 80043c8:	d9fa      	bls.n	80043c0 <_free_r+0x48>
 80043ca:	6811      	ldr	r1, [r2, #0]
 80043cc:	1850      	adds	r0, r2, r1
 80043ce:	42a0      	cmp	r0, r4
 80043d0:	d10b      	bne.n	80043ea <_free_r+0x72>
 80043d2:	6820      	ldr	r0, [r4, #0]
 80043d4:	4401      	add	r1, r0
 80043d6:	1850      	adds	r0, r2, r1
 80043d8:	4283      	cmp	r3, r0
 80043da:	6011      	str	r1, [r2, #0]
 80043dc:	d1de      	bne.n	800439c <_free_r+0x24>
 80043de:	6818      	ldr	r0, [r3, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	4401      	add	r1, r0
 80043e4:	6011      	str	r1, [r2, #0]
 80043e6:	6053      	str	r3, [r2, #4]
 80043e8:	e7d8      	b.n	800439c <_free_r+0x24>
 80043ea:	d902      	bls.n	80043f2 <_free_r+0x7a>
 80043ec:	230c      	movs	r3, #12
 80043ee:	602b      	str	r3, [r5, #0]
 80043f0:	e7d4      	b.n	800439c <_free_r+0x24>
 80043f2:	6820      	ldr	r0, [r4, #0]
 80043f4:	1821      	adds	r1, r4, r0
 80043f6:	428b      	cmp	r3, r1
 80043f8:	bf01      	itttt	eq
 80043fa:	6819      	ldreq	r1, [r3, #0]
 80043fc:	685b      	ldreq	r3, [r3, #4]
 80043fe:	1809      	addeq	r1, r1, r0
 8004400:	6021      	streq	r1, [r4, #0]
 8004402:	6063      	str	r3, [r4, #4]
 8004404:	6054      	str	r4, [r2, #4]
 8004406:	e7c9      	b.n	800439c <_free_r+0x24>
 8004408:	bd38      	pop	{r3, r4, r5, pc}
 800440a:	bf00      	nop
 800440c:	2000015c 	.word	0x2000015c

08004410 <_malloc_r>:
 8004410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004412:	1ccd      	adds	r5, r1, #3
 8004414:	f025 0503 	bic.w	r5, r5, #3
 8004418:	3508      	adds	r5, #8
 800441a:	2d0c      	cmp	r5, #12
 800441c:	bf38      	it	cc
 800441e:	250c      	movcc	r5, #12
 8004420:	2d00      	cmp	r5, #0
 8004422:	4606      	mov	r6, r0
 8004424:	db01      	blt.n	800442a <_malloc_r+0x1a>
 8004426:	42a9      	cmp	r1, r5
 8004428:	d903      	bls.n	8004432 <_malloc_r+0x22>
 800442a:	230c      	movs	r3, #12
 800442c:	6033      	str	r3, [r6, #0]
 800442e:	2000      	movs	r0, #0
 8004430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004432:	f000 f8f1 	bl	8004618 <__malloc_lock>
 8004436:	4921      	ldr	r1, [pc, #132]	; (80044bc <_malloc_r+0xac>)
 8004438:	680a      	ldr	r2, [r1, #0]
 800443a:	4614      	mov	r4, r2
 800443c:	b99c      	cbnz	r4, 8004466 <_malloc_r+0x56>
 800443e:	4f20      	ldr	r7, [pc, #128]	; (80044c0 <_malloc_r+0xb0>)
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	b923      	cbnz	r3, 800444e <_malloc_r+0x3e>
 8004444:	4621      	mov	r1, r4
 8004446:	4630      	mov	r0, r6
 8004448:	f000 f83c 	bl	80044c4 <_sbrk_r>
 800444c:	6038      	str	r0, [r7, #0]
 800444e:	4629      	mov	r1, r5
 8004450:	4630      	mov	r0, r6
 8004452:	f000 f837 	bl	80044c4 <_sbrk_r>
 8004456:	1c43      	adds	r3, r0, #1
 8004458:	d123      	bne.n	80044a2 <_malloc_r+0x92>
 800445a:	230c      	movs	r3, #12
 800445c:	4630      	mov	r0, r6
 800445e:	6033      	str	r3, [r6, #0]
 8004460:	f000 f8e0 	bl	8004624 <__malloc_unlock>
 8004464:	e7e3      	b.n	800442e <_malloc_r+0x1e>
 8004466:	6823      	ldr	r3, [r4, #0]
 8004468:	1b5b      	subs	r3, r3, r5
 800446a:	d417      	bmi.n	800449c <_malloc_r+0x8c>
 800446c:	2b0b      	cmp	r3, #11
 800446e:	d903      	bls.n	8004478 <_malloc_r+0x68>
 8004470:	6023      	str	r3, [r4, #0]
 8004472:	441c      	add	r4, r3
 8004474:	6025      	str	r5, [r4, #0]
 8004476:	e004      	b.n	8004482 <_malloc_r+0x72>
 8004478:	6863      	ldr	r3, [r4, #4]
 800447a:	42a2      	cmp	r2, r4
 800447c:	bf0c      	ite	eq
 800447e:	600b      	streq	r3, [r1, #0]
 8004480:	6053      	strne	r3, [r2, #4]
 8004482:	4630      	mov	r0, r6
 8004484:	f000 f8ce 	bl	8004624 <__malloc_unlock>
 8004488:	f104 000b 	add.w	r0, r4, #11
 800448c:	1d23      	adds	r3, r4, #4
 800448e:	f020 0007 	bic.w	r0, r0, #7
 8004492:	1ac2      	subs	r2, r0, r3
 8004494:	d0cc      	beq.n	8004430 <_malloc_r+0x20>
 8004496:	1a1b      	subs	r3, r3, r0
 8004498:	50a3      	str	r3, [r4, r2]
 800449a:	e7c9      	b.n	8004430 <_malloc_r+0x20>
 800449c:	4622      	mov	r2, r4
 800449e:	6864      	ldr	r4, [r4, #4]
 80044a0:	e7cc      	b.n	800443c <_malloc_r+0x2c>
 80044a2:	1cc4      	adds	r4, r0, #3
 80044a4:	f024 0403 	bic.w	r4, r4, #3
 80044a8:	42a0      	cmp	r0, r4
 80044aa:	d0e3      	beq.n	8004474 <_malloc_r+0x64>
 80044ac:	1a21      	subs	r1, r4, r0
 80044ae:	4630      	mov	r0, r6
 80044b0:	f000 f808 	bl	80044c4 <_sbrk_r>
 80044b4:	3001      	adds	r0, #1
 80044b6:	d1dd      	bne.n	8004474 <_malloc_r+0x64>
 80044b8:	e7cf      	b.n	800445a <_malloc_r+0x4a>
 80044ba:	bf00      	nop
 80044bc:	2000015c 	.word	0x2000015c
 80044c0:	20000160 	.word	0x20000160

080044c4 <_sbrk_r>:
 80044c4:	b538      	push	{r3, r4, r5, lr}
 80044c6:	2300      	movs	r3, #0
 80044c8:	4d05      	ldr	r5, [pc, #20]	; (80044e0 <_sbrk_r+0x1c>)
 80044ca:	4604      	mov	r4, r0
 80044cc:	4608      	mov	r0, r1
 80044ce:	602b      	str	r3, [r5, #0]
 80044d0:	f7fc fe7c 	bl	80011cc <_sbrk>
 80044d4:	1c43      	adds	r3, r0, #1
 80044d6:	d102      	bne.n	80044de <_sbrk_r+0x1a>
 80044d8:	682b      	ldr	r3, [r5, #0]
 80044da:	b103      	cbz	r3, 80044de <_sbrk_r+0x1a>
 80044dc:	6023      	str	r3, [r4, #0]
 80044de:	bd38      	pop	{r3, r4, r5, pc}
 80044e0:	20000204 	.word	0x20000204

080044e4 <__sread>:
 80044e4:	b510      	push	{r4, lr}
 80044e6:	460c      	mov	r4, r1
 80044e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044ec:	f000 f8a0 	bl	8004630 <_read_r>
 80044f0:	2800      	cmp	r0, #0
 80044f2:	bfab      	itete	ge
 80044f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80044f6:	89a3      	ldrhlt	r3, [r4, #12]
 80044f8:	181b      	addge	r3, r3, r0
 80044fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80044fe:	bfac      	ite	ge
 8004500:	6563      	strge	r3, [r4, #84]	; 0x54
 8004502:	81a3      	strhlt	r3, [r4, #12]
 8004504:	bd10      	pop	{r4, pc}

08004506 <__swrite>:
 8004506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800450a:	461f      	mov	r7, r3
 800450c:	898b      	ldrh	r3, [r1, #12]
 800450e:	4605      	mov	r5, r0
 8004510:	05db      	lsls	r3, r3, #23
 8004512:	460c      	mov	r4, r1
 8004514:	4616      	mov	r6, r2
 8004516:	d505      	bpl.n	8004524 <__swrite+0x1e>
 8004518:	2302      	movs	r3, #2
 800451a:	2200      	movs	r2, #0
 800451c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004520:	f000 f868 	bl	80045f4 <_lseek_r>
 8004524:	89a3      	ldrh	r3, [r4, #12]
 8004526:	4632      	mov	r2, r6
 8004528:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800452c:	81a3      	strh	r3, [r4, #12]
 800452e:	4628      	mov	r0, r5
 8004530:	463b      	mov	r3, r7
 8004532:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004536:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800453a:	f000 b817 	b.w	800456c <_write_r>

0800453e <__sseek>:
 800453e:	b510      	push	{r4, lr}
 8004540:	460c      	mov	r4, r1
 8004542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004546:	f000 f855 	bl	80045f4 <_lseek_r>
 800454a:	1c43      	adds	r3, r0, #1
 800454c:	89a3      	ldrh	r3, [r4, #12]
 800454e:	bf15      	itete	ne
 8004550:	6560      	strne	r0, [r4, #84]	; 0x54
 8004552:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004556:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800455a:	81a3      	strheq	r3, [r4, #12]
 800455c:	bf18      	it	ne
 800455e:	81a3      	strhne	r3, [r4, #12]
 8004560:	bd10      	pop	{r4, pc}

08004562 <__sclose>:
 8004562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004566:	f000 b813 	b.w	8004590 <_close_r>
	...

0800456c <_write_r>:
 800456c:	b538      	push	{r3, r4, r5, lr}
 800456e:	4604      	mov	r4, r0
 8004570:	4608      	mov	r0, r1
 8004572:	4611      	mov	r1, r2
 8004574:	2200      	movs	r2, #0
 8004576:	4d05      	ldr	r5, [pc, #20]	; (800458c <_write_r+0x20>)
 8004578:	602a      	str	r2, [r5, #0]
 800457a:	461a      	mov	r2, r3
 800457c:	f7fc fbf2 	bl	8000d64 <_write>
 8004580:	1c43      	adds	r3, r0, #1
 8004582:	d102      	bne.n	800458a <_write_r+0x1e>
 8004584:	682b      	ldr	r3, [r5, #0]
 8004586:	b103      	cbz	r3, 800458a <_write_r+0x1e>
 8004588:	6023      	str	r3, [r4, #0]
 800458a:	bd38      	pop	{r3, r4, r5, pc}
 800458c:	20000204 	.word	0x20000204

08004590 <_close_r>:
 8004590:	b538      	push	{r3, r4, r5, lr}
 8004592:	2300      	movs	r3, #0
 8004594:	4d05      	ldr	r5, [pc, #20]	; (80045ac <_close_r+0x1c>)
 8004596:	4604      	mov	r4, r0
 8004598:	4608      	mov	r0, r1
 800459a:	602b      	str	r3, [r5, #0]
 800459c:	f7fc fde5 	bl	800116a <_close>
 80045a0:	1c43      	adds	r3, r0, #1
 80045a2:	d102      	bne.n	80045aa <_close_r+0x1a>
 80045a4:	682b      	ldr	r3, [r5, #0]
 80045a6:	b103      	cbz	r3, 80045aa <_close_r+0x1a>
 80045a8:	6023      	str	r3, [r4, #0]
 80045aa:	bd38      	pop	{r3, r4, r5, pc}
 80045ac:	20000204 	.word	0x20000204

080045b0 <_fstat_r>:
 80045b0:	b538      	push	{r3, r4, r5, lr}
 80045b2:	2300      	movs	r3, #0
 80045b4:	4d06      	ldr	r5, [pc, #24]	; (80045d0 <_fstat_r+0x20>)
 80045b6:	4604      	mov	r4, r0
 80045b8:	4608      	mov	r0, r1
 80045ba:	4611      	mov	r1, r2
 80045bc:	602b      	str	r3, [r5, #0]
 80045be:	f7fc fddf 	bl	8001180 <_fstat>
 80045c2:	1c43      	adds	r3, r0, #1
 80045c4:	d102      	bne.n	80045cc <_fstat_r+0x1c>
 80045c6:	682b      	ldr	r3, [r5, #0]
 80045c8:	b103      	cbz	r3, 80045cc <_fstat_r+0x1c>
 80045ca:	6023      	str	r3, [r4, #0]
 80045cc:	bd38      	pop	{r3, r4, r5, pc}
 80045ce:	bf00      	nop
 80045d0:	20000204 	.word	0x20000204

080045d4 <_isatty_r>:
 80045d4:	b538      	push	{r3, r4, r5, lr}
 80045d6:	2300      	movs	r3, #0
 80045d8:	4d05      	ldr	r5, [pc, #20]	; (80045f0 <_isatty_r+0x1c>)
 80045da:	4604      	mov	r4, r0
 80045dc:	4608      	mov	r0, r1
 80045de:	602b      	str	r3, [r5, #0]
 80045e0:	f7fc fddd 	bl	800119e <_isatty>
 80045e4:	1c43      	adds	r3, r0, #1
 80045e6:	d102      	bne.n	80045ee <_isatty_r+0x1a>
 80045e8:	682b      	ldr	r3, [r5, #0]
 80045ea:	b103      	cbz	r3, 80045ee <_isatty_r+0x1a>
 80045ec:	6023      	str	r3, [r4, #0]
 80045ee:	bd38      	pop	{r3, r4, r5, pc}
 80045f0:	20000204 	.word	0x20000204

080045f4 <_lseek_r>:
 80045f4:	b538      	push	{r3, r4, r5, lr}
 80045f6:	4604      	mov	r4, r0
 80045f8:	4608      	mov	r0, r1
 80045fa:	4611      	mov	r1, r2
 80045fc:	2200      	movs	r2, #0
 80045fe:	4d05      	ldr	r5, [pc, #20]	; (8004614 <_lseek_r+0x20>)
 8004600:	602a      	str	r2, [r5, #0]
 8004602:	461a      	mov	r2, r3
 8004604:	f7fc fdd5 	bl	80011b2 <_lseek>
 8004608:	1c43      	adds	r3, r0, #1
 800460a:	d102      	bne.n	8004612 <_lseek_r+0x1e>
 800460c:	682b      	ldr	r3, [r5, #0]
 800460e:	b103      	cbz	r3, 8004612 <_lseek_r+0x1e>
 8004610:	6023      	str	r3, [r4, #0]
 8004612:	bd38      	pop	{r3, r4, r5, pc}
 8004614:	20000204 	.word	0x20000204

08004618 <__malloc_lock>:
 8004618:	4801      	ldr	r0, [pc, #4]	; (8004620 <__malloc_lock+0x8>)
 800461a:	f7ff be47 	b.w	80042ac <__retarget_lock_acquire_recursive>
 800461e:	bf00      	nop
 8004620:	200001fc 	.word	0x200001fc

08004624 <__malloc_unlock>:
 8004624:	4801      	ldr	r0, [pc, #4]	; (800462c <__malloc_unlock+0x8>)
 8004626:	f7ff be42 	b.w	80042ae <__retarget_lock_release_recursive>
 800462a:	bf00      	nop
 800462c:	200001fc 	.word	0x200001fc

08004630 <_read_r>:
 8004630:	b538      	push	{r3, r4, r5, lr}
 8004632:	4604      	mov	r4, r0
 8004634:	4608      	mov	r0, r1
 8004636:	4611      	mov	r1, r2
 8004638:	2200      	movs	r2, #0
 800463a:	4d05      	ldr	r5, [pc, #20]	; (8004650 <_read_r+0x20>)
 800463c:	602a      	str	r2, [r5, #0]
 800463e:	461a      	mov	r2, r3
 8004640:	f7fc fd76 	bl	8001130 <_read>
 8004644:	1c43      	adds	r3, r0, #1
 8004646:	d102      	bne.n	800464e <_read_r+0x1e>
 8004648:	682b      	ldr	r3, [r5, #0]
 800464a:	b103      	cbz	r3, 800464e <_read_r+0x1e>
 800464c:	6023      	str	r3, [r4, #0]
 800464e:	bd38      	pop	{r3, r4, r5, pc}
 8004650:	20000204 	.word	0x20000204

08004654 <_init>:
 8004654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004656:	bf00      	nop
 8004658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800465a:	bc08      	pop	{r3}
 800465c:	469e      	mov	lr, r3
 800465e:	4770      	bx	lr

08004660 <_fini>:
 8004660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004662:	bf00      	nop
 8004664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004666:	bc08      	pop	{r3}
 8004668:	469e      	mov	lr, r3
 800466a:	4770      	bx	lr
